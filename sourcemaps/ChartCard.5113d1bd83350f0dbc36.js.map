{"version":3,"sources":["webpack:///./src/Components/NumberData/NumberData.js","webpack:///./src/Components/NumberDescription/NumberDescription.js","webpack:///./src/Components/ChartCard/ChartCard.js"],"names":["NumberData","data","dataSize","percentageData","iconTooltipText","className","toLocaleString","Tooltip","key","position","TooltipPosition","content","propTypes","linkDescription","NumberDescription","link","description","layout","flexDirection","Flex","direction","FlexItem","spacer","default","Button","component","isInline","variant","href","critical","ChartCard","sysStatsData","sysStatsLoading","loading","intl","useIntl","Card","CardBody","Loading","hostScans","totalCount","formatMessage","messages","hosts","matches","ruleStats","matchedCount","gqlProps"],"mappings":"+RAOaA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,eAAgBC,EAAnC,EAAmCA,gBAAnC,OACtB,yBAAKC,UAAU,mDACX,0BAAMA,UAAS,wCAAoCH,IAC9CD,aADL,EACKA,EAAMK,kBAEVH,GACG,0BAAME,UAAU,sCACZ,8BAAOF,GACP,kBAACI,EAAA,EAAD,CACIC,IAAG,UAAMJ,GACTK,SAAWC,QACXC,QAAU,6BAAMP,QAOpCJ,EAAWY,UAAY,CACnBX,KAAMW,QACNV,SAAUU,WACVC,gBAAiBD,WACjBT,eAAgBS,WAChBR,gBAAiBQ,UCrBd,IAAME,EAAoB,SAAC,GAAD,IAAGb,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,eAAgBY,EAAnC,EAAmCA,KAAMC,EAAzC,EAAyCA,YAAaH,EAAtD,EAAsDA,gBAAiBI,EAAvE,EAAuEA,OAAQb,EAA/E,EAA+EA,gBAAiBc,EAAhG,EAAgGA,cAAhG,OAC7B,yBAAKb,UAAS,8CAA0CY,EAAS,QAAH,OAAWA,GAAW,KAChF,kBAACE,EAAA,EAAD,CAAMC,UAAYF,GACd,kBAACG,EAAA,EAAD,CAAUC,OAAS,CAAEC,QAAS,aAC1B,kBAACvB,EAAD,CAAYC,KAAOA,EAAOC,SAAWA,EAAWC,eAAiBA,EAAiBC,gBAAkBA,KAEvGY,GAAe,kBAACK,EAAA,EAAD,CAAUC,OAAS,CAAEC,QAAS,aAC1C,8BAAOP,IAETH,GAAmB,kBAACQ,EAAA,EAAD,CAAUC,OAAS,CAAEC,QAAS,aAC/C,kBAACC,EAAA,GAAD,CAAQC,UAAU,IAAIC,UAAQ,EAACC,QAAQ,OAAOC,KAAOb,GAASF,OAM9EC,EAAkBF,UAAY,CAC1BX,KAAMW,QACNV,SAAUU,WACVT,eAAgBS,WAChBG,KAAMH,QACNI,YAAaJ,WACbC,gBAAiBD,WACjBK,OAAQL,WACRiB,SAAUjB,WACVR,gBAAiBQ,SACjBM,cAAeN,YAGnB,U,qCC7BMkB,EAAY,SAAC,GAAqD,cAA7CC,EAA6C,EAAnD9B,KAA6B+B,EAAsB,EAA/BC,QAC/BC,GAAOC,SAEb,OAAO,kBAACC,EAAA,EAAD,KACH,kBAACC,EAAA,EAAD,KACKL,EAAkB,kBAACM,EAAA,EAAD,MACf,kBAAC,EAAD,CACIrC,KAAM8B,SAAF,UAAEA,EAAcQ,iBAAhB,aAAE,EAAyBC,WAC/BtC,SAAS,KACTc,YAAakB,EAAKO,cAAcC,sBAC5B,CAAEC,MAAOZ,SAAF,UAAEA,EAAcY,aAAhB,iBAAE,EAAqBH,kBAAvB,aAAE,EAAiClC,iBACtCsC,QAASb,SAAF,UAAEA,EAAcc,iBAAhB,iBAAE,EAAyBC,oBAA3B,aAAE,EAAuCxC,mBACxDW,OAAO,kBAO3Ba,EAAUlB,UAAYmC,KAEtB","file":"js/ChartCard.b59c7f052335640276e1.js","sourcesContent":["import './NumberData.scss';\n\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport const NumberData = ({ data, dataSize, percentageData, iconTooltipText }) => (\n    <div className=\"ins-c-dashboard__number-data--number-percentage\">\n        <span className={ `ins-c-dashboard__number-data--${dataSize}` }>\n            {data?.toLocaleString()}\n        </span>\n        {percentageData &&\n            <span className=\"ins-c-dashboard__number-percentage\">\n                <span>{percentageData}</span>\n                <Tooltip\n                    key={ `${iconTooltipText}` }\n                    position={ TooltipPosition.top }\n                    content={ <div>{iconTooltipText}</div> }>\n                </Tooltip>\n            </span>\n        }\n    </div>\n);\n\nNumberData.propTypes = {\n    data: propTypes.any,\n    dataSize: propTypes.string,\n    linkDescription: propTypes.string,\n    percentageData: propTypes.string,\n    iconTooltipText: propTypes.node\n};\n\nexport default NumberData;\n","import './NumberDescription.scss';\n\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts/Flex/index';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { NumberData } from '../NumberData/NumberData';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport const NumberDescription = ({ data, dataSize, percentageData, link, description, linkDescription, layout, iconTooltipText, flexDirection }) => (\n    <div className={ `ins-c-dashboard__number-description ${layout ? `pf-m-${layout}` : ''}` }>\n        <Flex direction={ flexDirection }>\n            <FlexItem spacer={ { default: 'spacerXs' } }>\n                <NumberData data={ data } dataSize={ dataSize } percentageData={ percentageData } iconTooltipText={ iconTooltipText } />\n            </FlexItem>\n            {description && <FlexItem spacer={ { default: 'spacerXs' } }>\n                <span>{description}</span>\n            </FlexItem>}\n            { linkDescription && <FlexItem spacer={ { default: 'spacerXs' } }>\n                <Button component='a' isInline variant=\"link\" href={ link } >{linkDescription}</Button>\n            </FlexItem> }\n        </Flex>\n    </div>\n);\n\nNumberDescription.propTypes = {\n    data: propTypes.any,\n    dataSize: propTypes.string,\n    percentageData: propTypes.string,\n    link: propTypes.any,\n    description: propTypes.string,\n    linkDescription: propTypes.string,\n    layout: propTypes.string,\n    critical: propTypes.string,\n    iconTooltipText: propTypes.node,\n    flexDirection: propTypes.object\n};\n\nexport default NumberDescription;\n","import { Card, CardBody } from '@patternfly/react-core/dist/esm/components/Card';\n\nimport Loading from '../../Components/Loading/Loading';\nimport NumberDescription from '../NumberDescription/NumberDescription';\nimport React from 'react';\nimport { gqlProps } from '../Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst ChartCard = ({ data: sysStatsData, loading: sysStatsLoading }) => {\n    const intl = useIntl();\n\n    return <Card>\n        <CardBody>\n            {sysStatsLoading ? <Loading /> :\n                <NumberDescription\n                    data={sysStatsData?.hostScans?.totalCount}\n                    dataSize='md'\n                    description={intl.formatMessage(messages.analysisRunAcross,\n                        { hosts: sysStatsData?.hosts?.totalCount?.toLocaleString(),\n                            matches: sysStatsData?.ruleStats?.matchedCount?.toLocaleString() })}\n                    layout='horizontal'\n                />\n            }\n        </CardBody>\n    </Card>;\n};\n\nChartCard.propTypes = gqlProps;\n\nexport default ChartCard;\n"],"sourceRoot":""}