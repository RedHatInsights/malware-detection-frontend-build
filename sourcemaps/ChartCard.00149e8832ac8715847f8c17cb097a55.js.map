{"version":3,"file":"js/ChartCard.1654700358255.22ee5e15413b6e7c8f4a.js","mappings":"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","sources":["webpack:///./src/Components/NumberData/NumberData.js","webpack:///./src/Components/NumberDescription/NumberDescription.js","webpack:///./src/Components/ChartCard/ChartCard.js"],"sourcesContent":["import './NumberData.scss';\n\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport const NumberData = ({ data, dataSize, percentageData, iconTooltipText }) => (\n    <div className=\"ins-c-dashboard__number-data--number-percentage\">\n        <span className={ `ins-c-dashboard__number-data--${dataSize}` }>\n            {data?.toLocaleString()}\n        </span>\n        {percentageData &&\n            <span className=\"ins-c-dashboard__number-percentage\">\n                <span>{percentageData}</span>\n                <Tooltip\n                    key={ `${iconTooltipText}` }\n                    position={ TooltipPosition.top }\n                    content={ <div>{iconTooltipText}</div> }>\n                </Tooltip>\n            </span>\n        }\n    </div>\n);\n\nNumberData.propTypes = {\n    data: propTypes.any,\n    dataSize: propTypes.string,\n    linkDescription: propTypes.string,\n    percentageData: propTypes.string,\n    iconTooltipText: propTypes.node\n};\n\nexport default NumberData;\n","import './NumberDescription.scss';\n\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts/Flex/index';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { NumberData } from '../NumberData/NumberData';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport const NumberDescription = ({ data, dataSize, percentageData, link, description, linkDescription, layout, iconTooltipText, flexDirection }) => (\n    <div className={ `ins-c-dashboard__number-description ${layout ? `pf-m-${layout}` : ''}` }>\n        <Flex direction={ flexDirection }>\n            <FlexItem spacer={ { default: 'spacerXs' } }>\n                <strong>\n                    <NumberData data={ data } dataSize={ dataSize } percentageData={ percentageData } iconTooltipText={ iconTooltipText } />\n                </strong>\n            </FlexItem>\n            {description && <FlexItem spacer={ { default: 'spacerXs' } }>\n                <span>{description}</span>\n            </FlexItem>}\n            { linkDescription && <FlexItem spacer={ { default: 'spacerXs' } }>\n                <Button component='a' isInline variant=\"link\" href={ link } >{linkDescription}</Button>\n            </FlexItem> }\n        </Flex>\n    </div>\n);\n\nNumberDescription.propTypes = {\n    data: propTypes.any,\n    dataSize: propTypes.string,\n    percentageData: propTypes.string,\n    link: propTypes.any,\n    description: propTypes.string,\n    linkDescription: propTypes.string,\n    layout: propTypes.string,\n    critical: propTypes.string,\n    iconTooltipText: propTypes.node,\n    flexDirection: propTypes.object\n};\n\nexport default NumberDescription;\n","import './ChartCard.scss';\n\nimport { Card, CardBody } from '@patternfly/react-core/dist/esm/components/Card';\nimport { Chart, ChartBar, ChartVoronoiContainer } from '@patternfly/react-charts/dist/esm/components/';\nimport { gqlProps, strong } from '../Common';\n\nimport Loading from '../../Components/Loading/Loading';\nimport NumberDescription from '../NumberDescription/NumberDescription';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst ChartCard = ({ sysStats, chartStats }) => {\n    const intl = useIntl();\n    const { data: sysStatsData, loading: sysStatsLoading } = sysStats;\n    const { data: chartStatsData, loading: chartStatsLoading } = chartStats;\n    const chartTransform = (data) => data.map(item => {\n        const date = new Date(item.day);\n        // eslint-disable-next-line no-unused-vars\n        const [_weekday, month, day] = `${date}`.split(' ');\n\n        return { name: 'Systems scanned', date, x: `${month} ${day}`, y: Number(item.hostScanCount) };\n    });\n\n    return <Card className='ins-l-chartCard'>\n        <CardBody>\n            <React.Fragment>\n                {sysStatsLoading ? <Loading /> : <NumberDescription\n                    data={sysStatsData?.hostScans?.totalCount}\n                    dataSize='md'\n                    description={intl.formatMessage(messages.analysisRunAcross,\n                        {\n                            hosts: sysStatsData?.hosts?.totalCount,\n                            matches: sysStatsData?.ruleStats?.matchedCount,\n                            strong: (str) => strong(str)\n                        })}\n                    layout='horizontal'\n                />}\n                {chartStatsLoading ? <Loading /> :\n                    <div className='ins-l-chartContainer'>\n                        <Chart\n                            ariaDesc='Number of recent system scans'\n                            ariaTitle='Number of recent system scans'\n                            containerComponent={<ChartVoronoiContainer\n                                labels={({ datum }) => `${datum.y} ${datum.name.toLowerCase()} on ${datum.x}`} constrainToVisibleArea />}\n                            domainPadding={{ x: [30, 25] }}\n                            height={300}\n                            width={550}\n                            minDomain={{ y: 0 }}\n                        >\n                            <ChartBar data={chartTransform(chartStatsData.timeSeriesStatsList)} />\n                        </Chart>\n                    </div>}\n            </React.Fragment>\n\n        </CardBody>\n    </Card>;\n};\n\nChartCard.propTypes = gqlProps;\n\nexport default ChartCard;\n"],"names":["NumberData","data","dataSize","percentageData","iconTooltipText","className","toLocaleString","Tooltip","key","position","TooltipPosition","content","propTypes","linkDescription","NumberDescription","link","description","layout","flexDirection","Flex","direction","FlexItem","spacer","default","Button","component","isInline","variant","href","critical","ChartCard","sysStats","chartStats","intl","useIntl","sysStatsData","sysStatsLoading","loading","chartStatsData","chartStatsLoading","Card","CardBody","Loading","hostScans","totalCount","formatMessage","messages","hosts","matches","ruleStats","matchedCount","strong","str","Chart","ariaDesc","ariaTitle","containerComponent","ChartVoronoiContainer","labels","datum","y","name","toLowerCase","x","constrainToVisibleArea","domainPadding","height","width","minDomain","ChartBar","timeSeriesStatsList","map","item","date","Date","day","split","month","Number","hostScanCount","gqlProps"],"sourceRoot":""}