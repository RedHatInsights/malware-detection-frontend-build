{"version":3,"file":"js/777.564d8706234ff94bb7dd.js","mappings":"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","sources":["webpack:///./src/Routes/NoPermissionsPage/NoPermissionsPage.js","webpack:///./src/Components/Permissions.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/Components/Common.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Messages.js","webpack:///./src/operations/queries.js","webpack:///./src/store/cache.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\n\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { capitalize } from '../../Components/Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { withRouter } from 'react-router-dom';\n\nconst NoPermissionsPage = () => {\n    const intl = useIntl();\n    useEffect(() => {\n        insights?.chrome?.appAction?.('no-permissions');\n    }, []);\n\n    return <Main>\n        <NotAuthorized serviceName={capitalize(intl.formatMessage(messages.malwareDetection))} />\n    </Main>;\n};\n\nexport default withRouter(NoPermissionsPage);\n","import { Banner } from '@patternfly/react-core/dist/esm/components/Banner/index';\nimport { GET_MALWARE_COUNT } from '../operations/queries';\nimport Loading from './Loading/Loading';\nimport NoPerms from '../Routes/NoPermissionsPage/NoPermissionsPage';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { hasMalware } from '../store/cache';\nimport messages from '../Messages';\nimport { useIntl } from 'react-intl';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport { useQuery } from '@apollo/client';\n\nexport function Permissions (props) {\n    const intl = useIntl();\n    const { data, loading } = useQuery(GET_MALWARE_COUNT);\n    const PERMS = {\n        access: ['malware-detection:*:*', ' malware-detection:*:read']\n    };\n    const permsAccess = usePermissions('malware-detection', PERMS.access);\n\n    !loading && hasMalware(Number(data?.ruleStats?.matchedCount) !== 0);\n\n    if (permsAccess?.isLoading) {\n        return <Loading />;\n    } else if (!permsAccess?.hasAccess) {\n        return <NoPerms />;\n    } else if (!permsAccess?.isLoading && permsAccess?.hasAccess) {\n        return <React.Fragment>\n            { !loading && hasMalware() && <Banner variant=\"danger\" className='ins-l-malwareBanner'>{intl.formatMessage(messages.weDetected)}</Banner>}\n            { props.children}\n        </React.Fragment>;\n    }\n}\n\nPermissions.propTypes = {\n    children: PropTypes.any\n};\n","/* eslint-disable react/display-name */\nimport React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Permissions } from './Components/Permissions';\n\nconst SigRoutes = lazy(() => import(/* webpackChunkName: \"Signatures\" */ './Routes/Signatures/Routes'));\nconst SysRoutes = lazy(() => import(/* webpackChunkName: \"Systems\" */ './Routes/Systems/Routes'));\n\nconst paths = [\n    { title: 'Signatures', path: '/signatures:?', render: ()=><Permissions><SigRoutes /></Permissions> },\n    { title: 'Signatures', path: '/signatures', render: ()=><Permissions><SigRoutes /></Permissions> },\n    { title: 'Systems', path: '/systems:?', render: ()=><Permissions><SysRoutes /></Permissions> },\n    { title: 'Systems', path: '/systems', render: ()=><Permissions><SysRoutes /></Permissions> }\n];\n\nexport const Routes = () => (\n    <Suspense>\n        <Switch>\n            {paths.map((path) => (\n                <Route\n                    key={path.title}\n                    {...path}\n                />\n            ))}\n            <Redirect path=\"/signatures\" to={`${paths[1].path}`} push />\n            {/* Finally, catch all unmatched routes */}\n            <Redirect path=\"*\" to={`${paths[1].path}`} push />\n        </Switch>\n    </Suspense>\n);\n","import './App.scss';\n\nimport React, { useEffect, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { Routes } from './Routes';\n\nconst App = (props) => {\n    const { pathname } = useLocation();\n    const { push } = useHistory();\n    const appNavClick = useMemo(\n        () => ({\n            signatures(redirect) {\n                insights.chrome.appNavClick({ id: 'signatures', redirect });\n            },\n            systems(redirect) {\n                insights.chrome.appNavClick({ id: 'systems', redirect });\n            }\n        }),\n        []\n    );\n\n    useEffect(() => {\n        insights.chrome.init();\n        const baseComponentUrl = pathname.split('/')[4];\n        const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n            if (event.domEvent) {\n                push(`/${event.navId}`);\n                appNavClick[baseComponentUrl] !== undefined\n                    ? appNavClick[baseComponentUrl](true)\n                    : appNavClick.signatures;\n            }\n        });\n\n        return () => unregister();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return  <Routes childProps={props} />;\n};\n\nexport default App;\n","import {\n    Tooltip,\n    TooltipPosition\n} from '@patternfly/react-core/dist/esm/components/Tooltip/';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nconst link = (desc, url = '#') => <Button isInline component='a' variant='link' href={url}>{desc}</Button>;\n\nconst gqlProps = {\n    data: propTypes.object,\n    loading: propTypes.bool,\n    error: propTypes.object\n};\n\nconst isBeta = () => window.location.pathname.split('/')[1] === 'beta' ? '/beta' : '';\n\n// Parse the match.metadata object and return a string of its 'key: value' items each on a separate line\nconst expandMatchMetadata = (md) => {\n    let output = `Source Type: ${md.source_type} ${md.md5sum || md.process_name ? '' : '(no metadata: Match Source is missing)'}`;\n    output += md.md5sum ? `\\nFile Type: ${md.file_type}\\nFile Mime Type: ${md.mime_type}\\nFile MD5Sum: ${md.md5sum}` : '';\n    output += md.line ? `\\nLine Number: ${md.line_number}\\nLine: ${decodeURIComponent(md.line)}` : '';\n    output += md.process_name ? `\\nProcess Name: ${md.process_name}` : '';\n    return output;\n};\n\nconst totalMatchesTitle = ({ tooltip, title }) => (<span>\n    {title}\n    <Tooltip\n        key={title}\n        position={TooltipPosition.right}\n        content={<div>{tooltip}</div>}\n    >\n        <span aria-label=\"Action\">\n            {` `}<OutlinedQuestionCircleIcon />\n        </span>\n    </Tooltip>\n</span>);\n\n// title case text string\nconst capitalize = (string) => string.replace(/\\w\\S*/g, (w) => (w.replace(/^\\w/, (c) => c.toUpperCase())));\n\nexport { link, gqlProps, isBeta, totalMatchesTitle, expandMatchMetadata, capitalize };\n","import {\n    EmptyState,\n    EmptyStateIcon,\n    Skeleton,\n    Title\n} from '@patternfly/react-core/dist/esm/components';\n\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nconst Loading = ({ type }) => {\n    const Spinner = () => (\n        <span className=\"pf-c-spinner\" role=\"progressbar\" aria-valuetext=\"Loading...\">\n            <span className=\"pf-c-spinner__clipper\" />\n            <span className=\"pf-c-spinner__lead-ball\" />\n            <span className=\"pf-c-spinner__tail-ball\" />\n        </span>\n    );\n\n    switch (type) {\n        case 'table': return <div className='ins-l-common--BackgroundColor'>\n            <br />\n            <Skeleton width=\"75%\" screenreaderText=\"Loading contents\" />\n            {[...Array(9)].map((value, key) => <React.Fragment key={key}><br /><Skeleton width=\"75%\" /><br /></React.Fragment>)}\n        </div>;\n\n        default: return <EmptyState>\n            <EmptyStateIcon variant=\"container\" component={Spinner} />\n            <Title size=\"lg\" headingLevel=\"h4\">\n                Loading\n            </Title>\n        </EmptyState>;\n    }\n\n};\n\nLoading.propTypes = { type: propTypes.string };\n\nexport default Loading;\n","/* eslint-disable max-len */\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n    malwareDetection: {\n        id: 'malwareDetection',\n        description: 'Title',\n        defaultMessage: 'Malware detection'\n    },\n    malwareDetectionSignatures: {\n        id: 'malwareDetectionSignatures',\n        description: 'Title',\n        defaultMessage: 'Malware detection signatures'\n    },\n    sigName: {\n        id: 'sigNameId',\n        description: 'Sig table column title',\n        defaultMessage: 'Signature name'\n    },\n    sig: {\n        id: 'sig',\n        description: 'Signature',\n        defaultMessage: 'Signature'\n    },\n    systems: {\n        id: 'systems',\n        description: 'Sig table column title',\n        defaultMessage: 'Systems'\n    },\n    added: {\n        id: 'added',\n        description: 'Sig table column title',\n        defaultMessage: 'Added'\n    },\n    matched: {\n        id: 'matched',\n        description: 'Sig table column title',\n        defaultMessage: 'Matched'\n    },\n    matchedSignatures: {\n        id: 'matchedSignatures',\n        description: 'Sig status card heading',\n        defaultMessage: 'Matched Signatures'\n    },\n    enabledSignatures: {\n        id: 'enabledSignatures',\n        description: 'Sig status card heading',\n        defaultMessage: 'Enabled Signatures'\n    },\n    disabledSignatures: {\n        id: 'disabledSignatures',\n        description: 'Sig status card heading',\n        defaultMessage: 'Disabled Signatures'\n    },\n    analysisRunAcross: {\n        id: 'analysisRunAcross',\n        description: 'Chart card heading',\n        defaultMessage: 'analyses run across {hosts, plural, one {# system} other {# systems}} with {matches, plural, one {# match} other {# matches}}'\n    },\n    noFound: {\n        id: 'noFound',\n        description: 'Sig status card heading',\n        defaultMessage: 'No active malware matches found'\n    },\n    noAnalysisRun: {\n        id: 'noFnoAnalysisRunound',\n        description: 'No host analyses run',\n        defaultMessage: 'No system analyses run'\n    },\n    hostsProtected: {\n        id: 'hostsProtected',\n        description: 'Sig status card sub heading',\n        defaultMessage: 'Your systems are protected.'\n    },\n    activeFound: {\n        id: 'activeFound',\n        description: 'Sig status card heading',\n        defaultMessage: 'Active malware matches found!'\n    },\n    hostsVulnerable: {\n        id: 'hostsVulnerable',\n        description: 'Sig status card sub heading',\n        defaultMessage: 'Your systems may be at risk.'\n    },\n    lastCheck: {\n        id: 'lastCheck',\n        description: 'Sig status card',\n        defaultMessage: 'Last check:'\n    },\n    lastSeen: {\n        id: 'lastSeen',\n        description: 'Last seen',\n        defaultMessage: 'Last seen'\n    },\n    uuid: {\n        id: 'uuid',\n        description: 'UUID',\n        defaultMessage: 'UUID'\n    },\n    description: {\n        id: 'description',\n        description: 'description',\n        defaultMessage: 'Description'\n    },\n    never: {\n        id: 'never',\n        description: 'never',\n        defaultMessage: 'Never'\n    },\n    malwareDetectionSigs: {\n        id: 'malwareDetectionSigs',\n        description: 'Malware detection signatures',\n        defaultMessage: 'Malware detection signatures'\n    },\n    malwareDetectionSys: {\n        id: 'malwareDetectionSys',\n        description: 'Malware detection systems',\n        defaultMessage: 'Malware detection systems'\n    },\n    affectedHosts: {\n        id: 'affectedHosts',\n        description: 'Affected hosts',\n        defaultMessage: 'Affected systems'\n    },\n    lastmatch: {\n        id: 'lastmatch',\n        description: 'Last match',\n        defaultMessage: 'Last match'\n    },\n    hostmatch: {\n        id: 'hostmatch',\n        description: 'Host match',\n        defaultMessage: 'System match'\n    },\n    status: {\n        id: 'status',\n        description: 'Status',\n        defaultMessage: 'Status'\n    },\n    author: {\n        id: 'author',\n        description: 'Author',\n        defaultMessage: 'Author'\n    },\n    enabled: {\n        id: 'enabled',\n        description: 'Enabled',\n        defaultMessage: 'Enabled'\n    },\n    enablement: {\n        id: 'enablement',\n        description: 'Enablement',\n        defaultMessage: 'Enablement'\n    },\n    disabled: {\n        id: 'disabled',\n        description: 'Disabled',\n        defaultMessage: 'Disabled'\n    },\n    noHostHas: {\n        id: 'noHostHas',\n        description: 'No host has been affectyed by this signature.',\n        defaultMessage: 'No system has been affectyed by this signature.'\n    },\n    signature: {\n        id: 'signature',\n        description: 'Signature',\n        defaultMessage: 'Signature'\n    },\n    filterBy: {\n        id: 'filterBy',\n        description: 'Filter by {what?}',\n        defaultMessage: 'Filter by {field}'\n    },\n    weDetected: {\n        id: 'weDetected',\n        description: 'Malware detected on your system. Contact your corporate information security team for more information.',\n        defaultMessage: 'Malware detected on your system. Contact your corporate information security team for more information.'\n    },\n    name: {\n        id: 'name',\n        description: 'Name',\n        defaultMessage: 'Name'\n    },\n    noMatches: {\n        id: 'noMatches',\n        description: 'No matches found',\n        defaultMessage: 'No matches found'\n    },\n    hostsNotAffected: {\n        id: 'hostsNotAffected',\n        description: 'Hosts are not affected by any signatures. Your hosts are protected!',\n        defaultMessage: 'Systems are not affected by any signatures. Your systems are protected!'\n    },\n    noResults: {\n        id: 'noResults',\n        description: 'No results found',\n        defaultMessage: 'No results found'\n    },\n    noResultsMatch: {\n        id: 'noResultsMatch',\n        description: 'No results match this filter criteria. Remove all filters or clear all filters to show results.',\n        defaultMessage: 'No results match this filter criteria. Remove all filters or clear all filters to show results.'\n    },\n    all: {\n        id: 'all',\n        description: 'all',\n        defaultMessage: 'All'\n    },\n    notMatched: {\n        id: 'notMatched',\n        description: 'not matched',\n        defaultMessage: 'Not matched'\n    },\n    sigCompiled: {\n        id: 'sigCompiled',\n        description: 'Signature is compiled',\n        defaultMessage: 'Signature is compiled'\n    },\n    sigCompiledBody: {\n        id: 'sigCompiledBody',\n        description: 'We couldnt display',\n        defaultMessage: 'We couldn\\'t display this signature because it\\'s compiled.'\n    },\n    totalMatches: {\n        id: 'totalMatches',\n        description: 'Total matches',\n        defaultMessage: 'Total matches'\n    },\n    noAffectedHosts: {\n        id: 'noAffectedHosts',\n        description: 'No affected hosts',\n        defaultMessage: 'No affected systems'\n    },\n    noAffectedHostsBody: {\n        id: 'noAffectedHostsBody',\n        description: 'This signature doesn\\'t affect any hosts. Your hosts are protected!',\n        defaultMessage: 'This signature doesn\\'t affect any systems. Your systems are protected!'\n    },\n    resetFilters: {\n        id: 'resetFilters',\n        description: 'Reset filters',\n        defaultMessage: 'Reset filters'\n    },\n    lastStatus: {\n        id: 'lastStatus',\n        description: 'Last status',\n        defaultMessage: 'Last status'\n    },\n    totalMatchesNote: {\n        id: 'totalMatchesNote',\n        description: 'Total number of matches found from every scan of a system within the last 14 days.',\n        defaultMessage: 'Total number of matches found from every scan of a system within the last 14 days.'\n    },\n    lastScan: {\n        id: 'lastScan',\n        description: 'Last scan',\n        defaultMessage: 'Last scan'\n    }\n});\n","import { gql, makeVar } from '@apollo/client';\n\nexport const test = makeVar(false);\n\nconst Signatures = {\n    RuleDetails: gql` fragment RuleDetails on Rule {\n      hasMatch\n      id\n      lastMatchDate\n      name\n      rawRule\n      metadata\n      isDisabled\n      hostCount\n    }`,\n    ExtraRuleDetails: gql` fragment ExtraRuleDetails on Rule {\n      affectedHosts {\n          totalCount\n        }\n}` };\n\nexport const GET_SIGNATURE_PAGE = gql`query QuerySigPage {\n  ruleStats {\n    matchedCount\n    enabledCount\n    disabledCount\n  }\n  hostScans(first: 1, orderBy: CREATED_AT_DESC) {\n    nodes {\n      createdAt\n    }\n    totalCount\n  }\n  hosts {\n    totalCount\n  }\n}`;\n\nexport const GET_SIGNATURE_TABLE = gql`query\nQuerySigPage($offset: Int = 0, $limit: Int = 10, $orderBy: [RulesOrderBy!], $ruleName: String, $condition: RuleCondition = {})  {\n  rulesList(offset: $offset, first: $limit, orderBy: $orderBy, ruleName: $ruleName, condition: $condition)  {\n      ...RuleDetails\n  }\n  rules(offset: $offset, first: $limit, orderBy: $orderBy, ruleName: $ruleName, condition: $condition) {\n    totalCount\n  }\n}${Signatures.RuleDetails}`;\n\nexport const GET_SIGNATURE_DETAILS_PAGE = gql`query QuerySigDetailsPage($ruleName: String)  {\n  rulesList(ruleName: $ruleName)  {\n      ...RuleDetails\n      ...ExtraRuleDetails\n  }\n  hosts {\n    totalCount\n  }\n}${Signatures.RuleDetails}${Signatures.ExtraRuleDetails}`;\n\nexport const GET_MALWARE_COUNT = gql`query QuerySigPage {\n  ruleStats {\n    matchedCount\n  }\n}`;\n\nexport const GET_SIGNATURE_DETAILS_TABLE = gql`query QuerySigPage($offset: Int = 0, $limit: Int = 10, $orderBy: [HostWithMatchesOrderBy!],\n$ruleName: String, $displayName: String)  {\n  rulesList(ruleName: $ruleName)  {\n    affectedHostsList (offset: $offset, first: $limit, orderBy: $orderBy, displayName: $displayName) {\n      displayName\n        lastScanDate\n        matchCount\n        matches {\n          stringOffset\n          stringIdentifier\n          stringData\n          source\n          scanDate\n          ruleScanId\n          ruleId\n          hostId\n          id\n          metadata\n      }\n      }\n      affectedHosts(offset: $offset, first: $limit, orderBy: $orderBy, displayName: $displayName) {\n        totalCount\n      }\n    }\n}`;\n\nexport const GET_SYSTEM_TABLE = gql`query\nQuerySysPage($offset: Int = 0, $limit: Int = 10, $orderBy: [HostsOrderBy!], $name: String)  {\n  hostsList(offset: $offset, first: $limit, orderBy: $orderBy, displayName: $name)  {\n    displayName\n    hasMatch\n    lastScanDate\n    lastMatchDate\n    totalMatches\n    hostScans {\n      totalCount\n    }\n    updated\n    }\n    hosts(offset: $offset, first: $limit, orderBy: $orderBy, displayName: $name){\n    totalCount\n  }\n}`;\n\nexport const GET_SYSTEMS_DETAILS_PAGE = gql`query QuerySysDetailsPage($name: String)  {\n  hosts(condition: {displayName: $name})  {\n    nodes {\n      updated\n      displayName\n      id\n      lastMatchDate\n      totalMatches\n  }\n}\n}`;\n\nexport const GET_SYSTEMS_DETAILS_TABLE_PAGE = gql`query QuerySysDetailsPage(\n  $systemId: UUID!, $offset: Int = 0, $limit: Int = 10, $orderBy: [RuleWithMatchesOrderBy!], $ruleName: String) {\n  host(id: $systemId) {\n    id\n    updated\n    lastMatchDate\n    hasMatch\n    affectedRules(\n      first: $limit\n      offset: $offset\n      orderBy: $orderBy\n      ruleName: $ruleName\n    ) {\n      totalCount\n    }\n    affectedRulesList(\n      first: $limit\n      offset: $offset\n      orderBy: $orderBy\n      ruleName: $ruleName\n    ) {\n      matchCount\n      createdAt\n      matches {\n        stringOffset\n        stringIdentifier\n        stringData\n        source\n        metadata\n        scanDate\n      }\n      name\n      metadata\n      rawRule\n    }\n  }\n}\n\n`;\n","import { InMemoryCache, makeVar } from '@apollo/client';\n// import { offsetLimitPagination } from '@apollo/client/utilities';\n\nexport const hasMalware = makeVar(false);\nexport const sigTableFilters = makeVar({});\nexport const sysTableFilters = makeVar({});\nexport const cache = new InMemoryCache({\n    typePolicies: {\n        Query: {\n            fields: {\n                // rulesList: { ...offsetLimitPagination(),\n                //     read(existing, { variables }) {\n\n                //         need to have the variables stored/updated as cache var, then we can compare exisitng to what we see in the read\n\n                //         console.error(existing, variables);\n                //         if (!existing) {return;} //We have no data at all\n\n                //         if (existing.length < (variables.offset + variables.limit)) {return;} //We don't have enough data\n\n                //         const sliced = existing.slice(variables.offset, variables.offset + variables.limit);\n\n                //         if (sliced.includes(undefined)) {return;} //Some of our data is null\n\n                //         return sliced;\n                //     }\n                // }\n            }\n        }\n    }\n});\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet registry;\n\nexport function init (...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n"],"names":["withRouter","intl","useIntl","useEffect","insights","chrome","appAction","Main","NotAuthorized","serviceName","capitalize","formatMessage","messages","Permissions","props","useQuery","GET_MALWARE_COUNT","data","loading","permsAccess","usePermissions","hasMalware","Number","ruleStats","matchedCount","isLoading","Loading","hasAccess","Banner","variant","className","children","propTypes","PropTypes","SigRoutes","lazy","SysRoutes","paths","title","path","render","Routes","Suspense","Switch","map","Route","key","Redirect","to","push","pathname","useLocation","useHistory","appNavClick","useMemo","signatures","redirect","id","systems","init","baseComponentUrl","split","unregister","on","event","domEvent","navId","undefined","childProps","gqlProps","error","isBeta","window","location","expandMatchMetadata","md","output","source_type","md5sum","process_name","file_type","mime_type","line","line_number","decodeURIComponent","totalMatchesTitle","tooltip","position","TooltipPosition","content","string","replace","w","c","toUpperCase","type","width","screenreaderText","Array","value","component","role","size","headingLevel","defineMessages","malwareDetection","description","defaultMessage","malwareDetectionSignatures","sigName","sig","added","matched","matchedSignatures","enabledSignatures","disabledSignatures","analysisRunAcross","noFound","noAnalysisRun","hostsProtected","activeFound","hostsVulnerable","lastCheck","lastSeen","uuid","never","malwareDetectionSigs","malwareDetectionSys","affectedHosts","lastmatch","hostmatch","status","author","enabled","enablement","disabled","noHostHas","signature","filterBy","weDetected","name","noMatches","hostsNotAffected","noResults","noResultsMatch","all","notMatched","sigCompiled","sigCompiledBody","totalMatches","noAffectedHosts","noAffectedHostsBody","resetFilters","lastStatus","totalMatchesNote","lastScan","Signatures","makeVar","RuleDetails","gql","ExtraRuleDetails","GET_SIGNATURE_PAGE","GET_SIGNATURE_TABLE","GET_SIGNATURE_DETAILS_PAGE","GET_SIGNATURE_DETAILS_TABLE","GET_SYSTEM_TABLE","GET_SYSTEMS_DETAILS_PAGE","GET_SYSTEMS_DETAILS_TABLE_PAGE","sigTableFilters","sysTableFilters","cache","InMemoryCache","typePolicies","Query","fields","registry","Error","middleware","ReducerRegistry","promiseMiddleware"],"sourceRoot":""}