{"version":3,"file":"js/Signature Details.8ae1b37352d75cdeb28f.js","mappings":"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","sources":["webpack:///./src/Components/SigDetailsTable/SigDetailsTable.js","webpack:///./src/Routes/Signatures/Details.js"],"sourcesContent":["import { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    expandable,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { expandMatchMetadata } from '../Common';\nimport { GET_SIGNATURE_DETAILS_TABLE } from '../../operations/queries';\nimport Loading from '../Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { totalMatchesTitle } from '../Common';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\n\nconst sortIndices = { 1: 'DISPLAY_NAME', 2: 'LAST_SCAN_DATE', 3: 'MATCH_COUNT' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n    }\n\n    return state;\n};\n\nconst SigDetailsTable = ({ ruleName, affectedCount }) => {\n    const intl = useIntl();\n    const initialState = {\n        tableVars: {\n            limit: 10,\n            offset: 0,\n            orderBy: 'LAST_SCAN_DATE_ASC',\n            displayName: '',\n            ruleName\n        },\n        sortBy: {\n            index: 2,\n            direction: SortByDirection.asc\n        },\n        rows: []\n    };\n    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data, loading, error } =\n        useQuery(GET_SIGNATURE_DETAILS_TABLE, { variables: tableVars });\n    const columns = [\n        { title: intl.formatMessage(messages.name), cellFormatters: [expandable], transforms: [sortable, cellWidth(45)] },\n        { title: intl.formatMessage(messages.matched), transforms: [sortable] },\n        { title: <span>{totalMatchesTitle({ tooltip: intl.formatMessage(messages.totalMatchesNote),\n            title: intl.formatMessage(messages.totalMatches) })}</span>, transforms: [sortable] }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { displayName: value } }),\n            value: tableVars.displayName,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.name).toLowerCase() })\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const host = collapseRows[rowKey + 1].hostData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells =  [{\n            title: <CodeEditor height='250px' code={`${host.matches.map((match, key) => `Match Source: ${match.source}\nOffset:${match.stringOffset}\nMatch Data: ${match.stringData}\nMatch Identifier: ${match.stringIdentifier}\nMatch Scan Date: ${new Date(match.scanDate).toUTCString()}\n${match.metadata ? expandMatchMetadata(JSON.parse(match.metadata)) : ''}\n${host.matches.length > 1 && key !== host.matches.length - 1 ? `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n` : ''}`).join('')}`}\n            isDownloadEnabled isCopyEnabled/> }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.flatMap((data, key) => {\n            const host = data;\n            return [{\n                rowId: key,\n                isOpen: false,\n                cells: [\n                    { title: <span>{host.displayName}</span> },\n                    { title: <DateFormat date={new Date(host.lastScanDate)} type='onlyDate' /> },\n                    { title: <span>{host.matchCount?.toLocaleString()}</span> }\n\n                ]\n            }, {\n                parent: key * 2,\n                hostData: host,\n                fullWidth: true,\n                cells: []\n            }];\n        });\n\n        stateSet({ type: 'setRows', payload: rowBuilder(data?.rulesList[0]?.affectedHostsList) });\n    }, [intl, data]);\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: data?.rulesList[0]?.affectedHosts?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n        />\n        <Table className='sigTable' aria-label='Signature Details table'\n            rows={rows} cells={columns} onCollapse={onCollapse}\n            onSort={onSort} sortBy={sortBy} isStickyHeader>\n            <TableHeader />\n            <TableBody />\n        </Table>\n        {loading && <Loading type='table' />}\n        {!error && !loading && affectedCount !== 0 ?\n            data?.rulesList[0]?.affectedHosts?.totalCount === 0 ?\n                <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n                    text={intl.formatMessage(messages.noResultsMatch)} />\n                : <React.Fragment />\n            : !loading && <MessageState className='pf-c-card' variant='large' icon={CheckCircleIcon} iconClass='ins-l-success-color'\n                title={intl.formatMessage(messages.noAffectedHosts)}\n                text={intl.formatMessage(messages.noAffectedHostsBody)} />\n        }\n        {error && <MessageState className='pf-c-card' variant='large' title='Error' text='error' />}\n        <Pagination\n            itemCount={data?.rulesList[0]?.affectedHosts?.totalCount || 0}\n            widgetId='pagination-options-menu-bottom'\n            perPage={tableVars.limit}\n            page={page}\n            variant={PaginationVariant.bottom}\n            onSetPage={onSetPage}\n            onPerPageSelect={onPerPageSelect}\n        />\n    </React.Fragment>;\n};\n\nSigDetailsTable.propTypes = { ruleName: propTypes.string, affectedCount: propTypes.number };\n\nexport default SigDetailsTable;\n","import './Details.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport { Title, TitleSizes } from '@patternfly/react-core/dist/esm/components/Title';\n\nimport Breadcrumb from '../../Components/Breadcrumb/Breadcrumb';\nimport CodeEditor from '../../Components/CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SIGNATURE_DETAILS_PAGE } from '../../operations/queries';\nimport Loading from '../../Components/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport SigDetailsTable from '../../Components/SigDetailsTable/SigDetailsTable';\nimport StatusLabel from '../../Components/StatusLabel/StatusLabel';\nimport { isBeta } from '../../Components/Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nconst Details = () => {\n    const intl = useIntl();\n    const [isCodeEditorEnabled] = React.useState(false);\n    const { id: sigId } = useParams();\n    const breadcrumbs = [{ name: intl.formatMessage(messages.malwareDetectionSignatures),\n        to: `${isBeta()}/insights/malware` }, { name: sigId, to: '#' }];\n    const { data, loading } = useQuery(GET_SIGNATURE_DETAILS_PAGE, {\n        variables: { ruleName: sigId  }\n    });\n    const sigDetailsData = data?.rulesList[0];\n    const detailBlock = (title, detail) => <React.Fragment>\n        <p className='ins-l-detailBlockHeader'>{title}</p>\n        <p>{detail}</p>\n    </React.Fragment>;\n\n    return <React.Fragment>\n        <PageHeader>\n            <Breadcrumb items={breadcrumbs} />\n            <Grid hasGutter>\n                <GridItem md={12} sm={12}>\n                    <Title headingLevel='h1' size={TitleSizes['3xl']} >{sigId}</Title>\n                </GridItem>\n\n                {isCodeEditorEnabled && (<GridItem md={7} sm={12}>\n                    { sigDetailsData && <CodeEditor height='250px' code={sigDetailsData.rawRule} isReadOnly isDownloadEnabled isCopyEnabled />}\n                </GridItem>)}\n\n                {loading ? <Loading /> :\n                    <GridItem md={isCodeEditorEnabled && 5 || 12} sm={12}>\n                        <Grid hasGutter>\n                            <GridItem span={isCodeEditorEnabled && 6 || 1}>\n                                {detailBlock(intl.formatMessage(messages.lastmatch), sigDetailsData?.lastMatchDate ?\n                                    <DateFormat date={new Date(sigDetailsData.lastMatchDate)} type=\"onlyDate\" />\n                                    : intl.formatMessage(messages.never))}\n                            </GridItem>\n                            <GridItem span={isCodeEditorEnabled && 6 || 1}>\n                                {detailBlock(intl.formatMessage(messages.hostmatch),\n                                    <span>{`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}</span>)}\n                            </GridItem>\n                            {isCodeEditorEnabled && <GridItem span={6}>\n                                {detailBlock(intl.formatMessage(messages.description), sigDetailsData?.metadata?.description)}\n                            </GridItem>}\n                            <GridItem span={isCodeEditorEnabled && 6 || 1}>\n                                {detailBlock(intl.formatMessage(messages.enablement), sigDetailsData && <StatusLabel {...sigDetailsData} />)}\n                            </GridItem>\n                            <GridItem span={isCodeEditorEnabled && 6 || 2}>\n                                {detailBlock(intl.formatMessage(messages.author), sigDetailsData?.metadata?.author)}\n                            </GridItem>\n                            {!isCodeEditorEnabled && <GridItem span={7}>\n                                {detailBlock(intl.formatMessage(messages.description), sigDetailsData?.metadata?.description)}\n                            </GridItem>}\n                        </Grid>\n                    </GridItem>\n                }\n            </Grid>\n        </PageHeader>\n        <Main>\n            <Title className='ins-l-tableBlockHeader' headingLevel='h1' size={TitleSizes['3xl']}>\n                {intl.formatMessage(messages.affectedHosts)}\n            </Title>\n            <SigDetailsTable ruleName={sigId} affectedCount={sigDetailsData?.affectedHosts?.totalCount}/>\n        </Main>\n    </React.Fragment>;\n};\n\nexport default Details;\n"],"names":["sortIndices","orderBy","index","direction","SortByDirection","tableReducer","state","action","type","tableVars","payload","sortBy","rows","SigDetailsTable","ruleName","affectedCount","intl","useIntl","initialState","limit","offset","displayName","useReducer","stateSet","useQuery","GET_SIGNATURE_DETAILS_TABLE","variables","data","loading","error","columns","title","formatMessage","messages","cellFormatters","expandable","transforms","sortable","cellWidth","totalMatchesTitle","tooltip","page","filterConfigItems","label","toLowerCase","filterValues","key","onChange","e","value","placeholder","field","onSetPage","onPerPageSelect","perPage","useEffect","flatMap","host","rowId","isOpen","cells","DateFormat","date","Date","lastScanDate","matchCount","toLocaleString","parent","hostData","fullWidth","rowBuilder","rulesList","affectedHostsList","PrimaryToolbar","pagination","itemCount","affectedHosts","totalCount","isCompact","filterConfig","items","Table","className","onCollapse","rowKey","collapseRows","CodeEditor","height","code","matches","map","match","source","stringOffset","stringData","stringIdentifier","scanDate","toUTCString","metadata","expandMatchMetadata","JSON","parse","length","join","isDownloadEnabled","isCopyEnabled","onSort","isStickyHeader","Loading","MessageState","variant","icon","CheckCircleIcon","iconClass","text","SearchIcon","Pagination","widgetId","PaginationVariant","propTypes","React","isCodeEditorEnabled","sigId","useParams","id","breadcrumbs","name","to","isBeta","GET_SIGNATURE_DETAILS_PAGE","sigDetailsData","detailBlock","detail","PageHeader","Breadcrumb","Grid","hasGutter","GridItem","md","sm","Title","headingLevel","size","TitleSizes","rawRule","isReadOnly","span","lastMatchDate","hosts","description","StatusLabel","author","Main"],"sourceRoot":""}