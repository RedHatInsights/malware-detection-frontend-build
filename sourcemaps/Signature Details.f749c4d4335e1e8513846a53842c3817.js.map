{"version":3,"file":"js/Signature Details.1698752394682.e330805fa28d9952ad67.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumb/Breadcrumb.js","webpack:///./src/Components/CodeEditor/CodeEditor.js","webpack:///./src/Components/MessageState/MessageState.js","webpack:///./src/Components/SharedComponents/EmptyAccount.js","webpack:///./src/Components/SigDetailsTable/SigDetailsTable.js","webpack:///./src/Routes/Signatures/Details.js","webpack:///./src/operations/mutations.js"],"sourcesContent":["import { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/index';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst BreadcrumbComponent = ({ items }) => {\n    const last = items.pop();\n    return <Breadcrumb>\n        {items.map((value, key) => <BreadcrumbItem key={key} to={value.to}>{value.name}</BreadcrumbItem>)}\n        <BreadcrumbItem isActive>{last.name}</BreadcrumbItem>\n    </Breadcrumb>;\n};\n\nBreadcrumbComponent.propTypes = {\n    items: PropTypes.array\n};\n\nexport default BreadcrumbComponent;\n","import { LockIcon } from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport MessageState from '../MessageState/MessageState';\nimport { CodeEditor as PfCodeEditor } from '@patternfly/react-code-editor';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst CodeEditor = ({ code, language, isReadOnly, isDownloadEnabled, isCopyEnabled, height = '400px' }) => {\n    const intl = useIntl();\n\n    return <PfCodeEditor\n        isDownloadEnabled={isDownloadEnabled}\n        isCopyEnabled={isCopyEnabled}\n        isReadOnly={isReadOnly}\n        isLanguageLabelVisible={language}\n        code={code}\n        language={language}\n        emptyState={\n            <MessageState className='' icon={LockIcon} variant='small' title={intl.formatMessage(messages.sigCompiled)}\n                text={intl.formatMessage(messages.sigCompiledBody)} />\n        }\n        height={height}\n    />;\n};\n\nCodeEditor.propTypes = {\n    code: PropTypes.any,\n    language: PropTypes.string,\n    isReadOnly: PropTypes.bool,\n    isCopyEnabled: PropTypes.bool,\n    isDownloadEnabled: PropTypes.bool,\n    height: PropTypes.string\n};\n\nCodeEditor.defaultProps = { codeType: 'Code' };\n\nexport default CodeEditor;\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant } from '@patternfly/react-core/dist/esm/components/EmptyState/index';\n\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\n\nconst MessageState = ({ className, children, icon, iconClass, iconStyle, text, title, variant }) =>\n    <EmptyState className={className} variant={variant}>\n        {icon !== 'none' && <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />}\n        <Title headingLevel='h5' size='lg'>\n            {title}\n        </Title>\n        <EmptyStateBody style={{ marginBottom: '16px' }}>\n            {text}\n        </EmptyStateBody>\n        {children}\n    </EmptyState>;\n\nMessageState.propTypes = {\n    children: PropTypes.any,\n    icon: PropTypes.any,\n    iconClass: PropTypes.any,\n    iconStyle: PropTypes.any,\n    text: PropTypes.any,\n    title: PropTypes.string,\n    variant: PropTypes.any,\n    className: PropTypes.string\n};\n\nMessageState.defaultProps = {\n    icon: CubesIcon,\n    title: '',\n    variant: EmptyStateVariant.full\n};\n\nexport default MessageState;\n","import React from 'react';\nimport {\n    Title,\n    Button,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateBody\n} from '@patternfly/react-core';\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { documentationURL } from '../Common';\n\nconst EmptyAccount = ({ message, className }) => {\n    const intl = useIntl();\n    return (\n        <EmptyState className={className} variant='large'>\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                {intl.formatMessage(messages.emptyAccountTitle)}\n            </Title>\n            <EmptyStateBody>\n                {message}\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href={documentationURL}\n                target=\"_blank\" >\n                {intl.formatMessage(messages.emptyAccountButton)}\n            </Button>\n        </EmptyState>\n    );\n};\n\nEmptyAccount.propTypes = {\n    message: propTypes.string,\n    className: propTypes.string\n};\n\nexport default EmptyAccount;\n","import './SigDetailsTable.scss';\n\nimport { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    expandable,\n    sortable,\n    info,\n    classNames\n} from '@patternfly/react-table/dist/esm/components/Table';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { expandMatchMetadata } from '../Common';\nimport { GET_SIGNATURE_DETAILS_TABLE, GET_SIGNATURE_DETAILS_TABLE_GROUPS } from '../../operations/queries';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport EmptyAccount from '../SharedComponents/EmptyAccount';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { isEmpty, uniqWith } from 'lodash';\n\nconst sortIndices = { 1: 'DISPLAY_NAME', 2: 'GROUP_NAME', 3: 'OS_VERSION', 4: 'LAST_SCAN_DATE', 5: 'MATCH_COUNT' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n        case 'setGroups':\n            return { ...state, groups: action.payload };\n    }\n\n    return state;\n};\n\nconst SigDetailsTable = ({ ruleName, affectedCount, isEmptyAccount }) => {\n    const intl = useIntl();\n    const initialState = {\n        tableVars: {\n            limit: 10,\n            offset: 0,\n            orderBy: 'LAST_SCAN_DATE_DESC',\n            displayName: '',\n            hostGroupFilter: undefined,\n            ruleName\n        },\n        sortBy: {\n            index: 4,\n            direction: SortByDirection.desc\n        },\n        rows: [],\n        groups: []\n    };\n    const [{ tableVars, sortBy, rows, groups }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data, loading, error } =\n        useQuery(GET_SIGNATURE_DETAILS_TABLE, { variables: tableVars });\n    const { data: groupsData, loading: groupsLoading } =\n        useQuery(GET_SIGNATURE_DETAILS_TABLE_GROUPS, { variables: tableVars });\n    const columns = [\n        { title: intl.formatMessage(messages.name), cellFormatters: [expandable], transforms: [sortable, cellWidth(45)] },\n        { title: intl.formatMessage(messages.group), transforms: [sortable, cellWidth(15)] },\n        { title: intl.formatMessage(messages.os), key: 'osVersion', transforms: [sortable, cellWidth(10)] },\n        { title: intl.formatMessage(messages.lastMatched), transforms: [sortable, cellWidth(10)] },\n        {\n            title: intl.formatMessage(messages.totalMatches),\n            transforms: [\n                info({\n                    tooltip: intl.formatMessage(messages.totalMatchesNote)\n                }),\n                sortable, cellWidth(10)\n            ]\n        }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { displayName: value, offset: 0 } }),\n            value: tableVars.displayName,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.name).toLowerCase() })\n        }\n    }, {\n        label: intl.formatMessage(messages.group).toLowerCase(),\n        type: isEmpty(groups) ? 'group' : 'checkbox',  // display checkboxes only if there are groups to choose from\n        filterValues: {\n            key: 'group-filter',\n            onChange: (e, value) => {\n                // Populates hostGroupFilter used in the GET_SIGNATURE_DETAILS_TABLE query\n                stateSet({ type: 'setTableVars', payload: { hostGroupFilter: value }, offset: 0 });\n            },\n            items: groupsLoading ? []  // display an empty box whilst the groups are loading\n                : isEmpty(groups) ? [{ isDisabled: true, label: intl.formatMessage(messages.noGroups) }]  // message if no groups\n                    : groups,\n            value: tableVars.hostGroupFilter,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.group).toLowerCase() })\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const host = collapseRows[rowKey + 1].hostData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells = [{\n            title: <CodeEditor height='250px' code={`${host.matches.map((match, key) => `Match Source: ${match.source}\nOffset:${match.stringOffset}\nMatch Data: ${match.stringData}\nMatch Identifier: ${match.stringIdentifier}\nMatch Scan Date: ${new Date(match.scanDate).toUTCString()}\n${match.metadata ? expandMatchMetadata(JSON.parse(match.metadata)) : ''}\n${host.matches.length > 1 && key !== host.matches.length - 1 ? `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n` : ''}`).join('')}`}\n            isDownloadEnabled isCopyEnabled />\n        }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.flatMap((data, key) => {\n            const host = data;\n            return [{\n                rowId: key,\n                isOpen: false,\n                cells: [\n                    { title: <InsightsLink to={`/systems/${host.id}`}>{host.displayName}</InsightsLink> },\n                    { title: `${host.groups?.[0]?.name || intl.formatMessage(messages.notApplicable)}` },\n                    { title: host.osVersion ? `RHEL ${host.osVersion}` : intl.formatMessage(messages.dataNotAvailable) },\n                    { title: <DateFormat date={new Date(host.matches[host.matches.length - 1].scanDate)} type='onlyDate' /> },\n                    { title: <InsightsLink to={`/systems/${host.id}`}>{host.matchCount?.toLocaleString()}</InsightsLink> }\n                ]\n            }, {\n                parent: key * 2,\n                hostData: host,\n                fullWidth: true,\n                cells: []\n            }];\n        });\n\n        stateSet({ type: 'setRows', payload: rowBuilder(data?.rulesList[0]?.affectedHostsList) });\n    }, [intl, data]);\n\n    useEffect(() => {\n        // populates the Group name filter dropdown\n        const getGroupList = groupsData => {\n            return groupsData?.filter(host => !isEmpty(host.groups)).map(host => (\n                { label: host.groups[0].name, value: host.groups[0].name })\n            );\n        };\n\n        let groupsList = getGroupList(groupsData?.rulesList[0]?.affectedHostsList) || [];\n        groupsList = uniqWith(groupsList, (group1, group2) => group1.label === group2.label); // remove duplicate group names\n        stateSet({ type: 'setGroups', payload: groupsList });\n    }, [groupsData]);\n\n    const NoResultsMatch = (\n        <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n            text={intl.formatMessage(messages.noResultsMatch)} />\n    );\n\n    const NoAffectedHosts = (\n        <MessageState className='pf-c-card' variant='large' icon={CheckCircleIcon} iconClass='ins-l-success-color'\n            title={intl.formatMessage(messages.noAffectedHosts)}\n            text={intl.formatMessage(messages.noAffectedHostsBody)} />\n    );\n\n    const EmptyAccountState = (\n        <EmptyAccount className='pf-c-card' message={intl.formatMessage(messages.emptyAccountTableBody)} />\n    );\n\n    const ErrorState = (\n        <MessageState className='pf-c-card' variant='large' title='Error' text='error' />\n    );\n\n    const buildFilterChips = () => {\n        const chips = [];\n        tableVars?.displayName &&\n            chips.push({\n                category: intl.formatMessage(messages.name), value: 'name',\n                chips: [{ name: tableVars?.displayName, value: tableVars?.displayName }]\n            });\n        tableVars?.hostGroupFilter &&\n            chips.push({\n                category: intl.formatMessage(messages.group), value: 'groups',\n                chips: tableVars.hostGroupFilter.map(group => ({ name: group, value: group }))\n            });\n        return chips;\n    };\n\n    const activeFiltersConfig = {\n        deleteTitle: intl.formatMessage(messages.resetFilters),\n        filters: buildFilterChips(),\n        showDeleteButton: tableVars?.displayName !== '' || tableVars?.hostGroupFilter !== undefined,\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                stateSet({ type: 'setTableVars', payload: { displayName: '', hostGroupFilter: undefined, offset: 0 } });\n            } else {\n                itemsToRemove.map((item) => {\n                    item.value === 'name' && stateSet({ type: 'setTableVars', payload: { displayName: '' } });\n                    if (item.value === 'groups') {\n                        const groupChips = tableVars.hostGroupFilter.filter(group => group !== item.chips[0].name);\n                        const payload = { hostGroupFilter: groupChips.length ? groupChips : undefined, offset: 0 };\n                        stateSet({ type: 'setTableVars', payload });\n                    }\n                });\n            }\n        }\n    };\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: data?.rulesList[0]?.affectedHosts?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        {loading\n            ? <SkeletonTable\n                columns={[{ title: '', columnTransforms: [classNames('skeleton-expandable-column')] }, ...columns]}\n                rowSize={tableVars.limit}\n                sortBy={sortBy}\n            />\n            : <Table\n                className='sigTable'\n                aria-label='Signature Details table'\n                rows={rows}\n                cells={columns}\n                onCollapse={onCollapse}\n                onSort={onSort}\n                sortBy={data?.rulesList[0]?.affectedHosts?.totalCount > 0 ? sortBy : undefined}\n                isStickyHeader\n            >\n                <TableHeader />\n                <TableBody />\n            </Table>}\n\n        {\n            (!error && !loading && affectedCount !== 0)\n                ? (data?.rulesList[0]?.affectedHosts?.totalCount === 0)\n                    ? NoResultsMatch : <React.Fragment />\n                : (!loading &&\n                    (isEmptyAccount ? EmptyAccountState : NoAffectedHosts)\n                )\n        }\n        {error && <ErrorState />}\n        <Pagination\n            itemCount={data?.rulesList[0]?.affectedHosts?.totalCount || 0}\n            widgetId='pagination-options-menu-bottom'\n            perPage={tableVars.limit}\n            page={page}\n            variant={PaginationVariant.bottom}\n            onSetPage={onSetPage}\n            onPerPageSelect={onPerPageSelect}\n        />\n    </React.Fragment>;\n};\n\nSigDetailsTable.propTypes = {\n    ruleName: propTypes.string,\n    affectedCount: propTypes.number,\n    isEmptyAccount: propTypes.bool\n};\n\nexport default SigDetailsTable;\n","import './Details.scss';\n\nimport { Dropdown, DropdownItem, DropdownToggle, Grid, GridItem, Label } from '@patternfly/react-core';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { ExternalLinkAltIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title';\nimport Breadcrumb from '../../Components/Breadcrumb/Breadcrumb';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SIGNATURE_DETAILS_PAGE } from '../../operations/queries';\nimport { DISABLE_SIGNATURES, ENABLE_SIGNATURES } from '../../operations/mutations';\nimport Loading from '../../Components/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { useEffect, useState } from 'react';\nimport SigDetailsTable from '../../Components/SigDetailsTable/SigDetailsTable';\nimport { isBeta, RBACPermissions } from '../../Components/Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport MessageState from '../../Components/MessageState/MessageState';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nconst Details = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const notification = (data) => dispatch(addNotification(data));\n    const hasWritePerms = usePermissions('malware-detection', RBACPermissions.write).hasAccess;\n    const { id: sigName } = useParams();\n    const breadcrumbs = [{\n        name: intl.formatMessage(messages.malwareDetectionSignatures),\n        to: `${isBeta()}/insights/malware`\n    }, { name: sigName, to: '#' }];\n    const sigDetailsQuery = { query: GET_SIGNATURE_DETAILS_PAGE, variables: { ruleName: sigName } };\n    const { data, loading } = useQuery(sigDetailsQuery.query, { variables: sigDetailsQuery.variables });\n    const sigDetailsData = data?.rulesList[0];\n    const sigMetadata = sigDetailsData?.metadata;\n    const isMatched = sigDetailsData?.affectedHosts?.totalCount > 0;\n    const isDisabled = sigDetailsData?.isDisabled;\n    const references = sigMetadata?.references || [];\n    const xfti_references = sigMetadata?.xfti_references || [];\n    const dataNotAvailable = intl.formatMessage(messages.dataNotAvailable);\n    const chrome = useChrome();\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const [showTable, setShowTable] = useState(false);\n    const mutationVars = {\n        variables: { input: { id: sigDetailsData?.id } },\n        refetchQueries: [sigDetailsQuery],\n        onCompleted: () => { setDropdownOpen(false); setShowTable(false); },\n        onError: ({ networkError: error }) => {\n            setDropdownOpen(false); setShowTable(true);\n            const errorMsg = `${error.response.statusText} - ${error.bodyText}`;\n            notification({ variant: 'danger', dismissable: true, title: intl.formatMessage(messages.error), description: `${errorMsg}` });\n        }\n    };\n    const [enableSignature, { loading: enableSigLoading }] = useMutation(ENABLE_SIGNATURES, mutationVars);\n    const [disableSignature, { loading: disableSigLoading }] = useMutation(DISABLE_SIGNATURES, mutationVars);\n\n    const detailBlock = (title, detail) => (\n        <React.Fragment>\n            <p className='ins-l-detailBlockHeader'>{title}</p>\n            <p>{detail || dataNotAvailable}</p>\n        </React.Fragment>\n    );\n\n    const referenceLink = (referenceLink, referenceName) => (\n        <a className='ins-l-referenceLink' rel=\"noopener noreferrer\" target=\"_blank\" href={referenceLink}>\n            {referenceName} <ExternalLinkAltIcon />\n        </a>\n    );\n\n    useEffect(() => {\n        chrome.updateDocumentTitle(`${sigName} - Signatures - Malware | Red Hat Insights`);\n    }, [chrome, sigName]);\n\n    useEffect(() => {\n        // only show the table when the data loads / changes\n        setShowTable(true);\n    }, [data]);\n\n    const DisabledFromMalwareAnalysis = (\n        <MessageState variant='large' icon={ExclamationTriangleIcon} iconClass='ins-l-custom-color'\n            title={intl.formatMessage(messages.disabledFromAnalysis)}\n            text={intl.formatMessage(messages.disabledFromAnalysisBody, {\n                disabledBy: sigDetailsData?.disabledBy || 'Unknown',\n                disabledAt: <DateFormat date={sigDetailsData?.disabledAt || new Date()} type=\"onlyDate\" />\n            })}>\n            {hasWritePerms &&\n                <Button variant=\"primary\" isLoading={enableSigLoading} onClick={() => enableSignature(mutationVars)}>\n                    {intl.formatMessage(enableSigLoading ? messages.enablingSignature : messages.enableSignatureForAnalysis)}\n                </Button>\n            }\n        </MessageState>\n    );\n\n    const ActionsDropdown = (\n        <Dropdown\n            ouiaId='actions'\n            toggle={\n                <DropdownToggle onToggle={() => setDropdownOpen(!dropdownOpen)} isExpanded={dropdownOpen}>\n                    {intl.formatMessage(messages.actions)}\n                </DropdownToggle>\n            }\n            isOpen={dropdownOpen}\n            dropdownItems={isDisabled ?\n                [<DropdownItem key=\"action\" ouiaId=\"enable\" onClick={() => { enableSignature(mutationVars); setShowTable(false); }}>\n                    {intl.formatMessage(enableSigLoading ? messages.enablingSignature : messages.enableSignatureForAnalysis)}\n                </DropdownItem>]\n                :\n                [<DropdownItem key=\"action\" ouiaId=\"disable\" onClick={() => { disableSignature(mutationVars); setShowTable(false); }}>\n                    {intl.formatMessage(disableSigLoading ? messages.disablingSignature : messages.disableSignatureFromAnalysis)}\n                </DropdownItem>]\n            }\n            style={{ paddingBottom: 0 }}\n        />\n    );\n\n    const matchedSystemsCount = () => {\n        return isMatched ? <React.Fragment>\n            <ExclamationCircleIcon color='var(--pf-global--danger-color--100)' />&nbsp;\n            <span style={{ color: 'var(--pf-global--danger-color--200)', fontWeight: 'bold' }}>\n                {`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}\n            </span>\n        </React.Fragment>\n            :\n            <span>{`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}</span>;\n    };\n\n    return <React.Fragment>\n        <PageHeader>\n            <Breadcrumb items={breadcrumbs} />\n            <Grid hasGutter>\n                <GridItem md={9} sm={9}>\n                    <PageHeaderTitle\n                        title={\n                            <span>\n                                {sigName}&nbsp;\n                                {sigMetadata?.threat_type &&\n                                    <Label variant=\"outline\" color=\"blue\">{sigMetadata.threat_type}</Label>\n                                }&nbsp;\n                                {(isDisabled || isMatched) &&\n                                    <Label variant=\"filled\" color=\"red\">{isDisabled ? 'Disabled' : 'Matched'}</Label>}\n                            </span>\n                        }\n                    />\n                </GridItem>\n                {hasWritePerms &&\n                    <GridItem md={3} sm={3}>\n                        {ActionsDropdown}\n                    </GridItem>\n                }\n\n                {loading ? <Loading /> :\n                    <GridItem>\n                        <Grid hasGutter>\n                            <GridItem xl2={7} md={8} sm={12}>\n                                <p className='ins-l-detailBlockHeader'>{intl.formatMessage(messages.description)}</p>\n                                <Truncate\n                                    text={sigMetadata?.description}\n                                    length={200}\n                                    inline\n                                />\n                            </GridItem>\n                            <GridItem xl2={5} md={4} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.matchedSystems),\n                                    isDisabled ? intl.formatMessage(messages.notApplicable) : matchedSystemsCount())\n                                }\n                            </GridItem>\n                            <GridItem lg={2} md={3} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.ruleCategory), sigMetadata?.rule_category)}\n                            </GridItem>\n                            <GridItem xl2={5} lg={6} md={5} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.ruleIntendedUsage), sigMetadata?.usage)}\n                            </GridItem>\n                            <GridItem xl2={5} md={4} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.lastmatch),\n                                    isDisabled ? intl.formatMessage(messages.notApplicable) :\n                                        sigDetailsData?.lastMatchDate ?\n                                            <DateFormat date={new Date(sigDetailsData.lastMatchDate)} type=\"onlyDate\" /> :\n                                            intl.formatMessage(messages.never))\n                                }\n                            </GridItem>\n                            <GridItem xl2={7} md={8} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.author), sigMetadata?.author)}\n                            </GridItem>\n                            {(references.length > 0 || xfti_references.length > 0) &&\n                                <GridItem xl2={7} md={8} sm={12}>\n                                    {xfti_references.length === 1 ?\n                                        referenceLink(xfti_references[0], intl.formatMessage(messages.ruleAuthorReference))\n                                        :\n                                        xfti_references.map((ref, i) => referenceLink(ref,\n                                            `${intl.formatMessage(messages.ruleAuthorReference)} [${i + 1}] `))}\n                                    {references.length === 1 ?\n                                        referenceLink(references[0], intl.formatMessage(messages.ruleBackgroundReference))\n                                        :\n                                        references.map((ref, i) => referenceLink(ref,\n                                            `${intl.formatMessage(messages.ruleBackgroundReference)} [${i + 1}] `))}\n                                </GridItem>\n                            }\n                        </Grid>\n                    </GridItem>\n                }\n            </Grid>\n        </PageHeader>\n        <Main>\n            {!showTable ? <Loading /> :\n                isDisabled ? DisabledFromMalwareAnalysis :\n                    <React.Fragment>\n                        <Title className='ins-l-tableBlockHeader' headingLevel='h2'>\n                            {intl.formatMessage(messages.affectedHosts)}\n                        </Title>\n                        <SigDetailsTable\n                            ruleName={sigName}\n                            isEmptyAccount={data?.hosts?.totalCount === 0}\n                            affectedCount={sigDetailsData?.affectedHosts?.totalCount}\n                        />\n                    </React.Fragment>\n            }\n        </Main>\n    </React.Fragment>;\n};\n\nexport default Details;\n","import { gql } from '@apollo/client';\n\nexport const DISABLE_SIGNATURES = gql`mutation DisableRule ($input: DisableRuleInput = {}) {\n  disableRule(input: $input) {\n    clientMutationId\n  }\n}`;\n\nexport const ENABLE_SIGNATURES = gql`mutation EnableRule ($input: EnableRuleInput = {}) {\n  enableRule(input: $input) {\n    clientMutationId\n  }\n}`;\n\n"],"names":["BreadcrumbComponent","items","last","pop","Breadcrumb","map","value","key","BreadcrumbItem","to","name","isActive","propTypes","PropTypes","CodeEditor","code","language","isReadOnly","isDownloadEnabled","isCopyEnabled","height","intl","useIntl","isLanguageLabelVisible","emptyState","className","icon","LockIcon","variant","title","formatMessage","messages","text","defaultProps","codeType","MessageState","children","iconClass","iconStyle","style","headingLevel","size","marginBottom","CubesIcon","EmptyStateVariant","EmptyAccount","message","WrenchIcon","Title","Button","component","href","documentationURL","target","sortIndices","orderBy","index","direction","SortByDirection","tableReducer","state","action","type","tableVars","payload","sortBy","rows","groups","SigDetailsTable","ruleName","affectedCount","isEmptyAccount","initialState","limit","offset","displayName","hostGroupFilter","undefined","useReducer","stateSet","useQuery","GET_SIGNATURE_DETAILS_TABLE","variables","data","loading","error","GET_SIGNATURE_DETAILS_TABLE_GROUPS","groupsData","groupsLoading","columns","cellFormatters","expandable","transforms","sortable","cellWidth","info","tooltip","page","filterConfigItems","label","toLowerCase","filterValues","onChange","e","placeholder","field","isEmpty","isDisabled","onSetPage","onPerPageSelect","perPage","useEffect","flatMap","host","rowId","isOpen","cells","InsightsLink","id","osVersion","DateFormat","date","Date","matches","length","scanDate","matchCount","toLocaleString","parent","hostData","fullWidth","rowBuilder","rulesList","affectedHostsList","groupsList","filter","getGroupList","uniqWith","group1","group2","chips","NoResultsMatch","SearchIcon","NoAffectedHosts","CheckCircleIcon","EmptyAccountState","ErrorState","activeFiltersConfig","deleteTitle","filters","push","category","group","showDeleteButton","onDelete","event","itemsToRemove","isAll","item","groupChips","PrimaryToolbar","pagination","itemCount","affectedHosts","totalCount","isCompact","filterConfig","SkeletonTable","columnTransforms","classNames","rowSize","Table","onCollapse","rowKey","collapseRows","match","source","stringOffset","stringData","stringIdentifier","toUTCString","metadata","expandMatchMetadata","JSON","parse","join","onSort","isStickyHeader","Pagination","widgetId","PaginationVariant","dispatch","useDispatch","hasWritePerms","usePermissions","RBACPermissions","hasAccess","sigName","useParams","breadcrumbs","isBeta","sigDetailsQuery","query","GET_SIGNATURE_DETAILS_PAGE","sigDetailsData","sigMetadata","isMatched","references","xfti_references","dataNotAvailable","chrome","useChrome","useState","dropdownOpen","setDropdownOpen","showTable","setShowTable","mutationVars","input","refetchQueries","onCompleted","onError","networkError","errorMsg","response","statusText","bodyText","addNotification","notification","dismissable","description","useMutation","ENABLE_SIGNATURES","enableSignature","enableSigLoading","DISABLE_SIGNATURES","disableSignature","disableSigLoading","detailBlock","detail","referenceLink","referenceName","rel","updateDocumentTitle","DisabledFromMalwareAnalysis","ExclamationTriangleIcon","disabledBy","disabledAt","isLoading","onClick","ActionsDropdown","Dropdown","ouiaId","toggle","DropdownToggle","onToggle","isExpanded","dropdownItems","DropdownItem","paddingBottom","PageHeader","Grid","hasGutter","GridItem","md","sm","PageHeaderTitle","threat_type","Label","color","Loading","xl2","Truncate","inline","fontWeight","hosts","lg","rule_category","usage","lastMatchDate","author","ref","i","Main","gql"],"sourceRoot":""}