{"version":3,"file":"js/491.65a86c365d719e9304a2.js","mappings":"46BAgBA,IAAMA,EAAW,SAAC,GAAqC,IAAnCC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,kBACrBC,GAAOC,EAAAA,EAAAA,UACPC,GAAoBD,EAAAA,EAAAA,UACpBE,GAAcF,EAAAA,EAAAA,UACZG,GAAaC,EAAAA,EAAAA,eAAbD,SACAE,GAASC,EAAAA,EAAAA,cAATD,KAEFE,GAAcC,EAAAA,EAAAA,UAChB,iBAAO,CACHC,WADG,SACQC,GACPC,SAASC,OAAOL,YAAY,CAAEM,GAAI,aAAcH,SAAAA,KAEpDI,QAJG,SAIKJ,GACJC,SAASC,OAAOL,YAAY,CAAEM,GAAI,UAAWH,SAAAA,QAGrD,IAGEK,GAAmBC,EAAAA,EAAAA,IAAW,SAACC,EAAD,qBAAqB,CACrDC,QAAS,EAAF,SADyB,EAAMA,UAG9B,UAAAnB,EAAKoB,eAAL,eAAcC,SAAU,CAAE,0BAAoBrB,EAAKoB,YACnD,UAAAlB,EAAkBkB,eAAlB,mBAA2BE,WAA3B,eAAgCC,aAAc,CAAE,uBAAuB,KACvE,UAAApB,EAAYiB,eAAZ,eAAqBC,SAAU,CAAE,8BAAwBlB,EAAYiB,eAG3EI,GAASf,EAAAA,EAAAA,UAAQ,kBAAO,IAAIgB,EAAAA,EAAa,CAC3CC,KAAMV,EAAiBW,QAAOC,EAAAA,EAAAA,GAAe,CACzCC,IAAK,uCAETC,MAAAA,EAAAA,GACA/B,kBAAAA,GAL0B,UAMxBC,EAAKoB,YAAY,CAACrB,EAAmBiB,IA+B3C,OA7BAe,EAAAA,EAAAA,YAAU,WAAM,MACZnB,SAASC,OAAOmB,OAChBpB,SAASC,OAAOoB,YAAY,WAC5B,UAAIrB,SAASC,cAAb,OAAI,EAAiBqB,mBACjBtB,SAASC,OAAOsB,GAAG,wBAAwB,YAAc,QAAXC,EAAW,EAAXA,KAC1C,GACA,UAAAxB,SAASC,cAAT,mBAAiBwB,uBAAjB,sBAAmCD,GAAM,GAAO,KAAS,GADzD,eAAOE,EAAP,KAAkBC,EAAlB,KAAuBC,EAAvB,KAEAxC,EAAKoB,SAAWoB,MAAAA,OAAA,EAAAA,EAAcC,KAAK,OAAQ,GAC3CvC,EAAkBkB,QAAUkB,GAAc,GAC1CnC,EAAYiB,QAAUmB,GAAO,GAE7Bf,EAAOkB,gBAIf,IAAMC,EAAmBvC,EAASwC,MAAM,KAAK,GACvCC,EAAajC,SAASC,OAAOsB,GAAG,kBAAkB,SAACW,GACjDA,EAAMC,WACNzC,EAAK,IAAD,OAAKwC,EAAME,aACmBC,IAAlCzC,EAAYmC,GACNnC,EAAYmC,IAAkB,GAC9BnC,EAAYE,eAI1B,OAAO,kBAAMmC,OAEd,CAACrB,IAEG,kBAAC,KAAD,CAAc0B,OAAQC,UAAUC,SAASC,MAAM,EAAG,GAAIC,SAAUA,EAAUC,QAASC,QAAQC,KAC9F,kBAACC,EAAA,EAAD,CAAgBlC,OAAQA,GACpB,kBAAC,EAAAmC,SAAD,CAAUC,OAAQ9D,GAAYkC,EAAAA,EAAAA,IAAK6B,MAAU7B,EAAAA,EAAAA,OAAQ8B,YACjD,kBAAC,gBAAD,CAAQC,UAAUC,EAAAA,EAAAA,IAAY5D,IAC1B,kBAAC6D,EAAA,EAAD,WAOpBpE,EAASqE,UAAY,CACjBpE,UAAWqE,IAAAA,KACXpE,kBAAmBoE,IAAAA,MAGvBtE,EAASuE,aAAe,CACpBtE,WAAW,EACXC,mBAAmB,GAGvB,U,oBCjGAsE,GAAAA,OAAgB,kBAAC,EAAD,MAAcC,SAASC,eAAe","sources":["webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js"],"sourcesContent":["/* eslint-disable no-console */\nimport { ApolloClient, ApolloProvider, createHttpLink } from '@apollo/client';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { BrowserRouter as Router, useHistory, useLocation } from 'react-router-dom';\n\nimport App from './App';\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { cache } from './store/cache';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { init } from './store';\nimport logger from 'redux-logger';\nimport messages from '../locales/data.json';\nimport { setContext } from '@apollo/client/link/context';\n\nconst AppEntry = ({ useLogger, connectToDevTools }) => {\n    const tags = useRef();\n    const selectedWorkloads = useRef();\n    const selectedSID = useRef();\n    const { pathname } = useLocation();\n    const { push } = useHistory();\n\n    const appNavClick = useMemo(\n        () => ({\n            signatures(redirect) {\n                insights.chrome.appNavClick({ id: 'signatures', redirect });\n            },\n            systems(redirect) {\n                insights.chrome.appNavClick({ id: 'systems', redirect });\n            }\n        }),\n        []\n    );\n\n    const globalFilterLink = setContext((_, { headers }) => ({\n        headers: {\n            ...headers,\n            ...(tags.current?.length && { 'insights-tags': `${tags.current}` }),\n            ...(selectedWorkloads.current?.SAP?.isSelected && { 'insights-sap-system': true }),\n            ...(selectedSID.current?.length && { 'insights-sap-sids': `${selectedSID.current}` })\n        }\n    }));\n    const client = useMemo(() =>  new ApolloClient({\n        link: globalFilterLink.concat(createHttpLink({\n            uri: '/api/malware-detection/v1/graphql'\n        })),\n        cache,\n        connectToDevTools\n    }, `${tags.current}`), [connectToDevTools, globalFilterLink]);\n\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp('malware');\n        if (insights.chrome?.globalFilterScope) {\n            insights.chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n                const [workloads, SID, selectedTags] =\n                insights.chrome?.mapGlobalFilter?.(data, false, true) || [];\n                tags.current =  selectedTags?.join(',') || '';\n                selectedWorkloads.current = workloads  || {};\n                selectedSID.current = SID || [];\n\n                client.resetStore();\n            });\n        }\n\n        const baseComponentUrl = pathname.split('/')[1];\n        const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n            if (event.domEvent) {\n                push(`/${event.navId}`);\n                appNavClick[baseComponentUrl] !== undefined\n                    ? appNavClick[baseComponentUrl](true)\n                    : appNavClick.signatures;\n            }\n        });\n\n        return () => unregister();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [client]);\n\n    return <IntlProvider locale={navigator.language.slice(0, 2)} messages={messages} onError={console.log}>\n        <ApolloProvider client={client}>\n            <Provider store={(useLogger ? init(logger) : init()).getStore()}>\n                <Router basename={getBaseName(pathname)}>\n                    <App />\n                </Router>\n            </Provider>\n        </ApolloProvider>\n    </IntlProvider>;\n};\n\nAppEntry.propTypes = {\n    useLogger: PropTypes.bool,\n    connectToDevTools: PropTypes.bool\n};\n\nAppEntry.defaultProps = {\n    useLogger: false,\n    connectToDevTools: false\n};\n\nexport default AppEntry;\n","import AppEntry from './AppEntry';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<AppEntry />, document.getElementById('root'));\n"],"names":["AppEntry","useLogger","connectToDevTools","tags","useRef","selectedWorkloads","selectedSID","pathname","useLocation","push","useHistory","appNavClick","useMemo","signatures","redirect","insights","chrome","id","systems","globalFilterLink","setContext","_","headers","current","length","SAP","isSelected","client","ApolloClient","link","concat","createHttpLink","uri","cache","useEffect","init","identifyApp","globalFilterScope","on","data","mapGlobalFilter","workloads","SID","selectedTags","join","resetStore","baseComponentUrl","split","unregister","event","domEvent","navId","undefined","locale","navigator","language","slice","messages","onError","console","log","ApolloProvider","Provider","store","logger","getStore","basename","getBaseName","App","propTypes","PropTypes","defaultProps","ReactDOM","document","getElementById"],"sourceRoot":""}