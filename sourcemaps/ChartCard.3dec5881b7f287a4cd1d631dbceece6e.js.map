{"version":3,"file":"js/ChartCard.95cccce76060a0cfbc40.js","mappings":"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","sources":["webpack:///./src/Components/NumberData/NumberData.js","webpack:///./src/Components/NumberDescription/NumberDescription.js","webpack:///./src/Components/ChartCard/ChartCard.js"],"sourcesContent":["import './NumberData.scss';\n\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport const NumberData = ({ data, dataSize, percentageData, iconTooltipText }) => (\n    <div className=\"ins-c-dashboard__number-data--number-percentage\">\n        <span className={ `ins-c-dashboard__number-data--${dataSize}` }>\n            {data?.toLocaleString()}\n        </span>\n        {percentageData &&\n            <span className=\"ins-c-dashboard__number-percentage\">\n                <span>{percentageData}</span>\n                <Tooltip\n                    key={ `${iconTooltipText}` }\n                    position={ TooltipPosition.top }\n                    content={ <div>{iconTooltipText}</div> }>\n                </Tooltip>\n            </span>\n        }\n    </div>\n);\n\nNumberData.propTypes = {\n    data: propTypes.any,\n    dataSize: propTypes.string,\n    linkDescription: propTypes.string,\n    percentageData: propTypes.string,\n    iconTooltipText: propTypes.node\n};\n\nexport default NumberData;\n","import './NumberDescription.scss';\n\nimport { Flex, FlexItem } from '@patternfly/react-core/dist/esm/layouts/Flex/index';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { NumberData } from '../NumberData/NumberData';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport const NumberDescription = ({ data, dataSize, percentageData, link, description, linkDescription, layout, iconTooltipText, flexDirection }) => (\n    <div className={ `ins-c-dashboard__number-description ${layout ? `pf-m-${layout}` : ''}` }>\n        <Flex direction={ flexDirection }>\n            <FlexItem spacer={ { default: 'spacerXs' } }>\n                <strong>\n                    <NumberData data={ data } dataSize={ dataSize } percentageData={ percentageData } iconTooltipText={ iconTooltipText } />\n                </strong>\n            </FlexItem>\n            {description && <FlexItem spacer={ { default: 'spacerXs' } }>\n                <span>{description}</span>\n            </FlexItem>}\n            { linkDescription && <FlexItem spacer={ { default: 'spacerXs' } }>\n                <Button component='a' isInline variant=\"link\" href={ link } >{linkDescription}</Button>\n            </FlexItem> }\n        </Flex>\n    </div>\n);\n\nNumberDescription.propTypes = {\n    data: propTypes.any,\n    dataSize: propTypes.string,\n    percentageData: propTypes.string,\n    link: propTypes.any,\n    description: propTypes.string,\n    linkDescription: propTypes.string,\n    layout: propTypes.string,\n    critical: propTypes.string,\n    iconTooltipText: propTypes.node,\n    flexDirection: propTypes.object\n};\n\nexport default NumberDescription;\n","import './ChartCard.scss';\n\nimport { Card, CardBody } from '@patternfly/react-core/dist/esm/components/Card';\nimport { Chart, ChartAxis, ChartBar, ChartTooltip } from '@patternfly/react-charts/dist/esm/components/';\nimport { gqlProps, strong } from '../Common';\n\nimport Loading from '../../Components/Loading/Loading';\nimport NumberDescription from '../NumberDescription/NumberDescription';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { Skeleton } from '@patternfly/react-core';\n\nconst ChartCard = ({ sysStats, chartStats }) => {\n    const intl = useIntl();\n    const { data: sysStatsData, loading: sysStatsLoading } = sysStats;\n    const { data: chartStatsData, loading: chartStatsLoading } = chartStats;\n    const maxYAxisValue = (hostScanData) => {\n        let maxHostScanCount = 0;\n        if (hostScanData) {\n            maxHostScanCount = Math.max(...hostScanData.map(item => item.hostScanCount));\n        }\n\n        // min height of our Y axis is 4, because below that the chart uses fractional values, eg 0.5, 1.0, 1.5, etc\n        return maxHostScanCount < 4 ? 4 : maxHostScanCount;\n    };\n\n    const chartTransform = (data) => data.map(item => {\n        const date = new Date(item.day);\n        // eslint-disable-next-line no-unused-vars\n        const [_weekday, month, day] = `${date}`.split(' ');\n        const label = `${item.hostScanCount} systems scanned on ${month} ${day}`;\n\n        return { name: 'Systems scanned', date, x: `${month} ${day}`, y: Number(item.hostScanCount), label };\n    });\n\n    return <Card className='ins-l-chartCard'>\n        <CardBody>\n            <React.Fragment>\n                {sysStatsLoading ? <Skeleton width=\"350px\" /> : <NumberDescription\n                    data={sysStatsData?.hostScans?.totalCount}\n                    dataSize='md'\n                    description={intl.formatMessage(messages.analysisRunAcross,\n                        {\n                            hosts: sysStatsData?.hosts?.totalCount,\n                            matches: sysStatsData?.ruleStats?.matchedCount,\n                            strong: (str) => strong(str)\n                        })}\n                    layout='horizontal'\n                />}\n                {chartStatsLoading ? <Loading /> :\n                    <div className='ins-l-chartContainer'>\n                        <Chart\n                            ariaDesc='Number of recent system scans'\n                            ariaTitle='Number of recent system scans'\n                            domainPadding={{ x: [30, 25] }}\n                            height={250}\n                            width={650}\n                        >\n                            <ChartAxis\n                                dependentAxis\n                                domain={[0, maxYAxisValue(chartStatsData?.timeSeriesStatsList)]}\n                                tickFormat={t=>parseInt(t)}\n                            />\n                            <ChartAxis crossAxis />\n                            <ChartBar\n                                data={chartTransform(chartStatsData.timeSeriesStatsList)}\n                                labelComponent={<ChartTooltip constrainToVisibleArea />}\n                            />\n                        </Chart>\n                    </div>}\n            </React.Fragment>\n\n        </CardBody>\n    </Card>;\n};\n\nChartCard.propTypes = gqlProps;\n\nexport default ChartCard;\n"],"names":["NumberData","data","dataSize","percentageData","iconTooltipText","className","toLocaleString","Tooltip","key","position","top","content","propTypes","linkDescription","NumberDescription","link","description","layout","flexDirection","Flex","direction","FlexItem","spacer","default","Button","component","isInline","variant","href","critical","ChartCard","sysStats","chartStats","intl","useIntl","sysStatsData","loading","sysStatsLoading","chartStatsData","chartStatsLoading","Card","CardBody","Skeleton","width","hostScans","totalCount","formatMessage","analysisRunAcross","hosts","matches","ruleStats","matchedCount","strong","str","Loading","Chart","ariaDesc","ariaTitle","domainPadding","x","height","ChartAxis","C","dependentAxis","domain","hostScanData","maxHostScanCount","Math","max","map","item","hostScanCount","maxYAxisValue","timeSeriesStatsList","tickFormat","t","parseInt","crossAxis","ChartBar","date","Date","day","_weekday","month","split","label","name","y","Number","labelComponent","ChartTooltip","constrainToVisibleArea"],"sourceRoot":""}