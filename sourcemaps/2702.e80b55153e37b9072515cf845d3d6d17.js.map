{"version":3,"file":"js/2702.1665520867108.81bd1f3ac78ceeebbf6c.js","mappings":"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","sources":["webpack:///./config/empty.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/store/cache.js","webpack:///./src/store/index.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js"],"sourcesContent":["// Used as an empty module to save bundle size\nmodule.exports = {};\n","/* eslint-disable react/display-name */\nimport React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nconst TemporaryBetaPageRoute = lazy(() => import(/* webpackChunkName: \"TemporaryBetaPage\" */ './Routes/TemporaryBetaPage/TemporaryBetaPage'));\n\nconst paths = [\n    { title: 'Signatures', path: '/signatures', render: ()=> <TemporaryBetaPageRoute /> }\n];\n\nexport const Routes = () => (\n    <Suspense>\n        <Switch>\n            {paths.map((path) => (\n                <Route\n                    key={path.title}\n                    {...path}\n                />\n            ))}\n            <Redirect path=\"/signatures\" to={`${paths[0].path}`} push />\n            {/* Finally, catch all unmatched routes */}\n            <Redirect path=\"*\" to={`${paths[0].path}`} push />\n        </Switch>\n    </Suspense>\n);\n","import './App.scss';\n\nimport React, { useEffect, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { Routes } from './Routes';\n\nconst App = (props) => {\n    const { pathname } = useLocation();\n    const { push } = useHistory();\n    const appNavClick = useMemo(\n        () => ({\n            signatures(redirect) {\n                insights.chrome.appNavClick({ id: 'signatures', redirect });\n            },\n            systems(redirect) {\n                insights.chrome.appNavClick({ id: 'systems', redirect });\n            }\n        }),\n        []\n    );\n\n    useEffect(() => {\n        insights.chrome.init();\n        const baseComponentUrl = pathname.split('/')[4];\n        const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n            if (event.domEvent) {\n                push(`/${event.navId}`);\n                appNavClick[baseComponentUrl] !== undefined\n                    ? appNavClick[baseComponentUrl](true)\n                    : appNavClick.signatures;\n            }\n        });\n\n        return () => unregister();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return  <Routes childProps={props} />;\n};\n\nexport default App;\n","import { InMemoryCache, makeVar } from '@apollo/client';\n// import { offsetLimitPagination } from '@apollo/client/utilities';\n\nexport const hasMalware = makeVar(false);\nexport const sigTableFilters = makeVar({});\nexport const sysTableFilters = makeVar({});\nexport const globalFilters  = makeVar({});\nexport const cache = new InMemoryCache({\n    typePolicies: {\n        Query: {\n            fields: {\n                // rulesList: { ...offsetLimitPagination(),\n                //     read(existing, { variables }) {\n\n                //         need to have the variables stored/updated as cache var, then we can compare exisitng to what we see in the read\n\n                //         console.error(existing, variables);\n                //         if (!existing) {return;} //We have no data at all\n\n                //         if (existing.length < (variables.offset + variables.limit)) {return;} //We don't have enough data\n\n                //         const sliced = existing.slice(variables.offset, variables.offset + variables.limit);\n\n                //         if (sliced.includes(undefined)) {return;} //Some of our data is null\n\n                //         return sliced;\n                //     }\n                // }\n            }\n        }\n    }\n});\n","import { createContext } from 'react';\nimport { ReducerRegistry, applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nexport const RegistryContext = createContext({\n    getRegistry: () => {}\n});\n\nexport function init (...middleware) {\n    return new ReducerRegistry(\n        {},\n        [\n            promiseMiddleware,\n            ...middleware\n        ]\n    );\n}\n\nconst selectRows = (rows, selected) =>\n    rows.map((row) => ({\n        ...row,\n        selected: selected.includes(row.id)\n    }));\n\nexport const entitiesReducer = () =>\n    applyReducerHash({\n        ['INVENTORY_INIT']: () => ({\n            rows: [],\n            total: 0\n        }),\n        ['RESET_PAGE']: (state) => ({\n            ...state,\n            page: 1\n        }),\n        ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n            ...state,\n            rows: selectRows(state.rows || [], selected)\n        })\n    });\n","/* eslint-disable no-console */\nimport { ApolloClient, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { NotificationsPortal, notifications } from '@redhat-cloud-services/frontend-components-notifications/';\nimport React, { useEffect, useMemo, useRef } from 'react';\n\nimport App from './App';\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { cache } from './store/cache';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { init, RegistryContext } from './store';\nimport { globalFilters } from './store/cache';\nimport logger from 'redux-logger';\nimport messages from '../locales/data.json';\nimport { setContext } from '@apollo/client/link/context';\n\nconst AppEntry = ({ useLogger, connectToDevTools }) => {\n    const tags = useRef();\n    const registry = useLogger ? init(logger) : init();\n    const selectedWorkloads = useRef();\n    const selectedSID = useRef();\n\n    const globalFilterLink = setContext((_, { headers }) => ({\n        headers: {\n            ...headers,\n            ...(tags.current?.length && { 'insights-tags': `${tags.current}` }),\n            ...(selectedWorkloads.current?.SAP?.isSelected && { 'insights-sap-system': true }),\n            ...(selectedWorkloads.current['Ansible Automation Platform']?.isSelected && { 'insights-ansible-system': true }),\n            ...(selectedWorkloads.current['Microsoft SQL']?.isSelected && { 'insights-mssql-system': true }),\n            ...(selectedSID.current?.length && { 'insights-sap-sids': `${selectedSID.current}` })\n        }\n    }));\n    const client = useMemo(() =>  new ApolloClient({\n        link: globalFilterLink.concat(createHttpLink({\n            uri: '/api/malware-detection/v1/graphql'\n        })),\n        cache,\n        connectToDevTools\n    }, `${tags.current}`), [connectToDevTools, globalFilterLink]);\n    registry.register({ notifications });\n\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp('malware');\n        if (insights.chrome?.globalFilterScope) {\n            insights.chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n                const [workloads, SID, selectedTags] =\n                insights.chrome?.mapGlobalFilter?.(data, false, true) || [];\n                tags.current =  selectedTags?.join(',') || '';\n\n                selectedWorkloads.current = workloads || {};\n                selectedSID.current = SID || [];\n\n                globalFilters({ workloads, SID, selectedTags });\n\n                client.resetStore();\n            });\n        }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [client]);\n\n    return <IntlProvider locale={navigator.language.slice(0, 2)} messages={messages} onError={console.log}>\n        <ApolloProvider client={client}>\n            <RegistryContext.Provider value={{ getRegistry: () => registry }}>\n                <Provider store={registry.getStore()}>\n                    <Router basename={getBaseName(window.location.pathname)}>\n                        <NotificationsPortal />\n                        <App />\n                    </Router>\n                </Provider>\n            </RegistryContext.Provider>\n        </ApolloProvider>\n    </IntlProvider>;\n};\n\nAppEntry.propTypes = {\n    useLogger: PropTypes.bool,\n    connectToDevTools: PropTypes.bool\n};\n\nAppEntry.defaultProps = {\n    useLogger: false,\n    connectToDevTools: false\n};\n\nexport default AppEntry;\n","import AppEntry from './AppEntry';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<AppEntry />, document.getElementById('root'));\n"],"names":["module","exports","TemporaryBetaPageRoute","lazy","paths","title","path","render","Routes","Suspense","Switch","map","Route","key","Redirect","to","push","props","pathname","useLocation","useHistory","appNavClick","useMemo","signatures","redirect","insights","chrome","id","systems","useEffect","init","baseComponentUrl","split","unregister","on","event","domEvent","navId","undefined","childProps","globalFilters","makeVar","cache","InMemoryCache","typePolicies","Query","fields","RegistryContext","createContext","getRegistry","middleware","ReducerRegistry","promiseMiddleware","AppEntry","useLogger","connectToDevTools","tags","useRef","registry","logger","selectedWorkloads","selectedSID","globalFilterLink","setContext","_","headers","current","length","SAP","isSelected","client","ApolloClient","link","concat","createHttpLink","uri","register","notifications","identifyApp","globalFilterScope","data","mapGlobalFilter","workloads","SID","selectedTags","join","resetStore","locale","navigator","language","slice","messages","onError","console","log","ApolloProvider","Provider","value","store","getStore","basename","getBaseName","window","location","NotificationsPortal","propTypes","PropTypes","defaultProps","ReactDOM","document","getElementById"],"sourceRoot":""}