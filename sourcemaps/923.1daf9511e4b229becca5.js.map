{"version":3,"sources":["webpack:///./src/Routes/Signatures/Routes.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Messages.js","webpack:///./src/operations/queries.js","webpack:///./src/store/cache.js","webpack:///./src/store/client.js","webpack:///./src/store/index.js"],"names":["List","lazy","Details","Switch","Route","exact","path","component","Suspense","fallback","Loading","Redirect","to","push","Oops","Noperms","paths","Routes","Bullseye","Spinner","size","key","rootClass","SigRoutes","getRegistry","register","notifications","withRouter","props","useQuery","GET_MALWARE_COUNT","data","loading","intl","useIntl","useEffect","insights","chrome","init","identifyApp","hideGlobalFilter","hasMalware","Number","ruleStats","matchedCount","Banner","variant","className","formatMessage","messages","childProps","type","width","screenreaderText","Array","map","value","role","aria-valuetext","headingLevel","propTypes","defineMessages","malwareDetection","id","description","defaultMessage","sigName","systems","added","matched","matchedSignatures","enabledSignatures","disabledSignatures","analysisRunAcross","noFound","noAnalysisRun","hostsProtected","activeFound","hostsVulnerable","lastCheck","never","malwareDetectionSigs","affectedHosts","lastmatch","hostmatch","status","author","enabled","enablement","disabled","noHostHas","signature","filterBy","weDetected","name","noMatches","hostsNotAffected","noResults","noResultsMatch","all","notMatched","sigCompiled","sigCompiledBody","totalMatches","noAffectedHosts","noAffectedHostsBody","resetFilters","Signatures","makeVar","RuleDetails","gql","ExtraRuleDetails","GET_SIGNATURE_PAGE","GET_SIGNATURE_TABLE","GET_SIGNATURE_DETAILS_PAGE","GET_SIGNATURE_DETAILS_TABLE","sigTableFilters","cache","InMemoryCache","typePolicies","Query","fields","client","ApolloClient","uri","registry","Error","middleware","ReducerRegistry","promiseMiddleware"],"mappings":"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","file":"js/923.b1f01a7ecf2f581ab800.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport Loading from '../../Components/Loading/Loading';\n\nconst List = lazy(() => import(/* webpackChunkName: 'Signature List' */ './Signatures'));\nconst Details = lazy(() => import(/* webpackChunkName: \"Signature Details\" */ './Details'));\n\nconst SigRoutes = () => <React.Fragment>\n    <Switch>\n        <Route exact path='/' component={() => <Suspense fallback={<Loading />}> <List /> </Suspense>} />\n        <Route exact path='/:id' component={() => <Suspense fallback={<Loading />}> <Details /> </Suspense>} />\n        <Redirect path='*' to='/oops' push />\n    </Switch>\n</React.Fragment>;\n\nexport default SigRoutes;\n","import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Bullseye } from '@patternfly/react-core/dist/esm/layouts/Bullseye';\nimport Loading from './Components/Loading/Loading';\nimport SigRoutes from './Routes/Signatures/Routes';\nimport { Spinner } from '@patternfly/react-core/dist/esm/components/Spinner';\n\nconst Oops = lazy(() => import(/* webpackChunkName: 'Oops' */ './Routes/OopsPage/OopsPage'));\nconst Noperms = lazy(() => import(/* webpackChunkName: 'Noperms' */ './Routes/NoPermissionsPage/NoPermissionsPage'));\n\nconst paths = { sigRoutes: '/', oops: '/oops', noperms: '/nopermissions' };\n\nexport const Routes = () => <Suspense fallback={<Bullseye><Spinner size=\"xl\" /></Bullseye>}>\n    <Switch>\n        <Route key='signatures' path={paths.sigRoutes} rootClass='Insights'\n            component={SigRoutes} />\n        <Route key='noperms' exact path={paths.noperms} rootClass='Insights'\n            component={() => <Suspense fallback={<Loading />}> <Noperms /> </Suspense>} />\n        <Route key='oops' exact path={paths.oops} rootClass='Insights'\n            component={() => <Suspense fallback={<Loading />}> <Oops /> </Suspense>} />\n        <Redirect path='*' to={paths.oops} push />\n    </Switch>\n</Suspense >;\n","import './App.scss';\n\nimport { NotificationsPortal, notifications } from '@redhat-cloud-services/frontend-components-notifications/';\nimport React, { useEffect } from 'react';\n\nimport { Banner } from '@patternfly/react-core/dist/esm/components/Banner/index';\nimport { GET_MALWARE_COUNT } from './operations/queries';\nimport { Routes } from './Routes';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { hasMalware } from './store/cache';\nimport messages from './Messages';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport { withRouter } from 'react-router-dom';\n\nconst registry = getRegistry();\nregistry.register({ notifications });\nconst App = (props) => {\n    const { data, loading } = useQuery(GET_MALWARE_COUNT);\n    const intl = useIntl();\n\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp('malware');\n        insights.chrome.hideGlobalFilter?.();\n    }, []);\n\n    !loading && hasMalware(Number(data?.ruleStats?.matchedCount) !== 0);\n\n    return <React.Fragment>\n        <NotificationsPortal />\n        { !loading && hasMalware() && <Banner variant=\"danger\" className='ins-l-malwareBanner'>{intl.formatMessage(messages.weDetected)}</Banner>}\n        <Routes childProps={props} />\n    </React.Fragment>;\n};\n\nexport default withRouter(App);\n","import {\n    EmptyState,\n    EmptyStateIcon,\n    Skeleton,\n    Title\n} from '@patternfly/react-core/dist/esm/components';\n\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nconst Loading = ({ type }) => {\n    const Spinner = () => (\n        <span className=\"pf-c-spinner\" role=\"progressbar\" aria-valuetext=\"Loading...\">\n            <span className=\"pf-c-spinner__clipper\" />\n            <span className=\"pf-c-spinner__lead-ball\" />\n            <span className=\"pf-c-spinner__tail-ball\" />\n        </span>\n    );\n\n    switch (type) {\n        case 'table': return <div className='ins-l-common--BackgroundColor'>\n            <br />\n            <Skeleton width=\"75%\" screenreaderText=\"Loading contents\" />\n            {[...Array(9)].map((value, key) => <React.Fragment key={key}><br /><Skeleton width=\"75%\" /><br /></React.Fragment>)}\n        </div>;\n\n        default: return <EmptyState>\n            <EmptyStateIcon variant=\"container\" component={Spinner} />\n            <Title size=\"lg\" headingLevel=\"h4\">\n                Loading\n            </Title>\n        </EmptyState>;\n    }\n\n};\n\nLoading.propTypes = { type: propTypes.string };\n\nexport default Loading;\n","/* eslint-disable max-len */\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n    malwareDetection: {\n        id: 'malwareDetection',\n        description: 'Title',\n        defaultMessage: 'Malware detection'\n    },\n    sigName: {\n        id: 'sigNameId',\n        description: 'Sig table column title',\n        defaultMessage: 'Signature name'\n    },\n    systems: {\n        id: 'systems',\n        description: 'Sig table column title',\n        defaultMessage: 'Systems'\n    },\n    added: {\n        id: 'added',\n        description: 'Sig table column title',\n        defaultMessage: 'Added'\n    },\n    matched: {\n        id: 'matched',\n        description: 'Sig table column title',\n        defaultMessage: 'Matched'\n    },\n    matchedSignatures: {\n        id: 'matchedSignatures',\n        description: 'Sig status card heading',\n        defaultMessage: 'Matched Signatures'\n    },\n    enabledSignatures: {\n        id: 'enabledSignatures',\n        description: 'Sig status card heading',\n        defaultMessage: 'Enabled Signatures'\n    },\n    disabledSignatures: {\n        id: 'disabledSignatures',\n        description: 'Sig status card heading',\n        defaultMessage: 'Disabled Signatures'\n    },\n    analysisRunAcross: {\n        id: 'analysisRunAcross',\n        description: 'Chart card heading',\n        defaultMessage: 'analysis run across {hosts, plural, one {# system} other {# systems}} with {matches, plural, one {# match} other {# matches}}'\n    },\n    noFound: {\n        id: 'noFound',\n        description: 'Sig status card heading',\n        defaultMessage: 'No active malware matches found'\n    },\n    noAnalysisRun: {\n        id: 'noFnoAnalysisRunound',\n        description: 'No host analysis run',\n        defaultMessage: 'No system analysis run'\n    },\n    hostsProtected: {\n        id: 'hostsProtected',\n        description: 'Sig status card sub heading',\n        defaultMessage: 'Your systems are protected.'\n    },\n    activeFound: {\n        id: 'activeFound',\n        description: 'Sig status card heading',\n        defaultMessage: 'Active malware matches found!'\n    },\n    hostsVulnerable: {\n        id: 'hostsVulnerable',\n        description: 'Sig status card sub heading',\n        defaultMessage: 'Your systems may be at risk.'\n    },\n    lastCheck: {\n        id: 'lastCheck',\n        description: 'Sig status card',\n        defaultMessage: 'Last check:'\n    },\n    description: {\n        id: 'description',\n        description: 'description',\n        defaultMessage: 'Description'\n    },\n    never: {\n        id: 'never',\n        description: 'never',\n        defaultMessage: 'Never'\n    },\n    malwareDetectionSigs: {\n        id: 'malwareDetectionSigs',\n        description: 'Maleware detection signatures',\n        defaultMessage: 'Maleware detection signatures'\n    },\n    affectedHosts: {\n        id: 'affectedHosts',\n        description: 'Affected hosts',\n        defaultMessage: 'Affected systems'\n    },\n    lastmatch: {\n        id: 'lastmatch',\n        description: 'Last match',\n        defaultMessage: 'Last match'\n    },\n    hostmatch: {\n        id: 'hostmatch',\n        description: 'Host match',\n        defaultMessage: 'System match'\n    },\n    status: {\n        id: 'status',\n        description: 'Status',\n        defaultMessage: 'Status'\n    },\n    author: {\n        id: 'author',\n        description: 'Author',\n        defaultMessage: 'Author'\n    },\n    enabled: {\n        id: 'enabled',\n        description: 'Enabled',\n        defaultMessage: 'Enabled'\n    },\n    enablement: {\n        id: 'enablement',\n        description: 'Enablement',\n        defaultMessage: 'Enablement'\n    },\n    disabled: {\n        id: 'disabled',\n        description: 'Disabled',\n        defaultMessage: 'Disabled'\n    },\n    noHostHas: {\n        id: 'noHostHas',\n        description: 'No host has been affectyed by this signature.',\n        defaultMessage: 'No system has been affectyed by this signature.'\n    },\n    signature: {\n        id: 'signature',\n        description: 'Signature',\n        defaultMessage: 'Signature'\n    },\n    filterBy: {\n        id: 'filterBy',\n        description: 'Filter by {what?}',\n        defaultMessage: 'Filter by {field}'\n    },\n    weDetected: {\n        id: 'weDetected',\n        description: 'Malware detected on your system. Contact your corporate information security team for more information.',\n        defaultMessage: 'Malware detected on your system. Contact your corporate information security team for more information.'\n    },\n    name: {\n        id: 'name',\n        description: 'Name',\n        defaultMessage: 'Name'\n    },\n    noMatches: {\n        id: 'noMatches',\n        description: 'No matches found',\n        defaultMessage: 'No matches found'\n    },\n    hostsNotAffected: {\n        id: 'hostsNotAffected',\n        description: 'Hosts are not affected by any signatures. Your hosts are protected!',\n        defaultMessage: 'Systems are not affected by any signatures. Your systems are protected!'\n    },\n    noResults: {\n        id: 'noResults',\n        description: 'No results found',\n        defaultMessage: 'No results found'\n    },\n    noResultsMatch: {\n        id: 'noResultsMatch',\n        description: 'No results match this filter criteria. Remove all filters or clear all filters to show results.',\n        defaultMessage: 'No results match this filter criteria. Remove all filters or clear all filters to show results.'\n    },\n    all: {\n        id: 'all',\n        description: 'all',\n        defaultMessage: 'All'\n    },\n    notMatched: {\n        id: 'notMatched',\n        description: 'not matched',\n        defaultMessage: 'Not matched'\n    },\n    sigCompiled: {\n        id: 'sigCompiled',\n        description: 'Signature is compiled',\n        defaultMessage: 'Signature is compiled'\n    },\n    sigCompiledBody: {\n        id: 'sigCompiledBody',\n        description: 'We couldnt display',\n        defaultMessage: 'We couldn\\'t display this signature because it\\'s compiled.'\n    },\n    totalMatches: {\n        id: 'totalMatches',\n        description: 'Total matches',\n        defaultMessage: 'Total matches'\n    },\n    noAffectedHosts: {\n        id: 'noAffectedHosts',\n        description: 'No affected hosts',\n        defaultMessage: 'No affected systems'\n    },\n    noAffectedHostsBody: {\n        id: 'noAffectedHostsBody',\n        description: 'This signature doesn\\'t affect any hosts. Your hosts are protected!',\n        defaultMessage: 'This signature doesn\\'t affect any systems. Your systems are protected!'\n    },\n    resetFilters: {\n        id: 'resetFilters',\n        description: 'Reset filters',\n        defaultMessage: 'Reset filters'\n    }\n});\n","import { gql, makeVar } from '@apollo/client';\n\nexport const test = makeVar(false);\n\nconst Signatures = {\n    RuleDetails: gql` fragment RuleDetails on Rule {\n      hasMatch\n      id\n      lastMatchDate\n      name\n      rawRule\n      metadata\n      isDisabled\n      hostCount\n    }`,\n    ExtraRuleDetails: gql` fragment ExtraRuleDetails on Rule {\n      affectedHosts {\n          totalCount\n        }\n}` };\n\nexport const GET_SIGNATURE_PAGE = gql`query QuerySigPage {\n  ruleStats {\n    matchedCount\n    enabledCount\n    disabledCount\n  }\n  hostScans(first: 1, orderBy: CREATED_AT_DESC) {\n    nodes {\n      createdAt\n    }\n    totalCount\n  }\n  hosts {\n    totalCount\n  }\n}`;\n\nexport const GET_SIGNATURE_TABLE = gql`query\nQuerySigPage($offset: Int = 0, $limit: Int = 10, $orderBy: [RulesOrderBy!], $ruleName: String, $condition: RuleCondition = {})  {\n  rulesList(offset: $offset, first: $limit, orderBy: $orderBy, ruleName: $ruleName, condition: $condition)  {\n      ...RuleDetails\n  }\n  rules(offset: $offset, first: $limit, orderBy: $orderBy, ruleName: $ruleName, condition: $condition) {\n    totalCount\n  }\n}${Signatures.RuleDetails}`;\n\nexport const GET_SIGNATURE_DETAILS_PAGE = gql`query QuerySigDetailsPage($ruleName: String)  {\n  rulesList(ruleName: $ruleName)  {\n      ...RuleDetails\n      ...ExtraRuleDetails\n  }\n  hosts {\n    totalCount\n  }\n}${Signatures.RuleDetails}${Signatures.ExtraRuleDetails}`;\n\nexport const GET_MALWARE_COUNT = gql`query QuerySigPage {\n  ruleStats {\n    matchedCount\n  }\n}`;\n\nexport const GET_SIGNATURE_DETAILS_TABLE = gql`query QuerySigPage($offset: Int = 0, $limit: Int = 10, $orderBy: [HostWithMatchesOrderBy!],\n$ruleName: String, $insightsId: String)  {\n  rulesList(ruleName: $ruleName)  {\n    affectedHostsList (offset: $offset, first: $limit, orderBy: $orderBy, insightsId: $insightsId) {\n      insightsId\n        lastScanDate\n        matchCount\n        matches {\n          stringOffset\n          stringIdentifier\n          stringData\n          source\n          scanDate\n          ruleScanId\n          ruleId\n          hostId\n          id\n      }\n      }\n      affectedHosts(offset: $offset, first: $limit, orderBy: $orderBy, insightsId: $insightsId) {\n        totalCount\n      }\n    }\n}`;\n","import { InMemoryCache, makeVar } from '@apollo/client';\n// import { offsetLimitPagination } from '@apollo/client/utilities';\n\nexport const hasMalware = makeVar(false);\nexport const sigTableFilters = makeVar({});\n\nexport const cache = new InMemoryCache({\n    typePolicies: {\n        Query: {\n            fields: {\n                // rulesList: { ...offsetLimitPagination(),\n                //     read(existing, { variables }) {\n\n                //         need to have the variables stored/updated as cache var, then we can compare exisitng to what we see in the read\n\n                //         console.error(existing, variables);\n                //         if (!existing) {return;} //We have no data at all\n\n                //         if (existing.length < (variables.offset + variables.limit)) {return;} //We don't have enough data\n\n                //         const sliced = existing.slice(variables.offset, variables.offset + variables.limit);\n\n                //         if (sliced.includes(undefined)) {return;} //Some of our data is null\n\n                //         return sliced;\n                //     }\n                // }\n            }\n        }\n    }\n});\n","import { ApolloClient } from '@apollo/client';\nimport { cache } from './cache';\n\nconst uri = `/api/malware-detection/v1/graphql`;\n\nconst client = props => new ApolloClient({ cache, uri, ...props });\n\nexport { client };\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet registry;\n\nexport function init (...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n"],"sourceRoot":""}