{"version":3,"file":"js/6643.1659514369820.3698f3f5742cc9f92c24.js","mappings":"88BAkBA,IAAMA,EAAW,SAAC,GAAqC,IAAnCC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,kBACrBC,GAAOC,EAAAA,EAAAA,UACPC,EAAWJ,GAAYK,EAAAA,EAAAA,IAAKC,MAAUD,EAAAA,EAAAA,MACtCE,GAAoBJ,EAAAA,EAAAA,UACpBK,GAAcL,EAAAA,EAAAA,UAEdM,GAAmBC,EAAAA,EAAAA,IAAW,SAACC,EAAD,yBAAqB,CACrDC,QAAS,EAAF,aADyB,EAAMA,UAG9B,UAAAV,EAAKW,eAAL,eAAcC,SAAU,CAAE,0BAAoBZ,EAAKW,YACnD,UAAAN,EAAkBM,eAAlB,mBAA2BE,WAA3B,eAAgCC,aAAc,CAAE,uBAAuB,KACvE,UAAAT,EAAkBM,QAAQ,sCAA1B,eAA0DG,aAAc,CAAE,2BAA2B,KACrG,UAAAT,EAAkBM,QAAQ,wBAA1B,eAA4CG,aAAc,CAAE,yBAAyB,KACrF,UAAAR,EAAYK,eAAZ,eAAqBC,SAAU,CAAE,8BAAwBN,EAAYK,eAG3EI,GAASC,EAAAA,EAAAA,UAAQ,kBAAO,IAAIC,EAAAA,EAAa,CAC3CC,KAAMX,EAAiBY,QAAOC,EAAAA,EAAAA,GAAe,CACzCC,IAAK,uCAETC,MAAAA,EAAAA,GACAvB,kBAAAA,GAL0B,UAMxBC,EAAKW,YAAY,CAACZ,EAAmBQ,IAwB3C,OAvBAL,EAASqB,SAAS,CAAEC,cAAAA,EAAAA,iBAEpBC,EAAAA,EAAAA,YAAU,WAAM,MACZC,SAASC,OAAOxB,OAChBuB,SAASC,OAAOC,YAAY,WAC5B,UAAIF,SAASC,cAAb,OAAI,EAAiBE,mBACjBH,SAASC,OAAOG,GAAG,wBAAwB,YAAc,QAAXC,EAAW,EAAXA,KAC1C,GACA,UAAAL,SAASC,cAAT,mBAAiBK,uBAAjB,sBAAmCD,GAAM,GAAO,KAAS,GADzD,eAAOE,EAAP,KAAkBC,EAAlB,KAAuBC,EAAvB,KAEAnC,EAAKW,SAAWwB,MAAAA,OAAA,EAAAA,EAAcC,KAAK,OAAQ,GAE3C/B,EAAkBM,QAAUsB,GAAa,GACzC3B,EAAYK,QAAUuB,GAAO,IAE7BG,EAAAA,EAAAA,IAAc,CAAEJ,UAAAA,EAAWC,IAAAA,EAAKC,aAAAA,IAEhCpB,EAAOuB,kBAKhB,CAACvB,IAEG,kBAAC,KAAD,CAAcwB,OAAQC,UAAUC,SAASC,MAAM,EAAG,GAAIC,SAAUA,EAAUC,QAASC,QAAQC,KAC9F,kBAAC,IAAD,CAAgB/B,OAAQA,GACpB,kBAAC,cAAD,CAA0BgC,MAAO,CAAEC,YAAa,kBAAM9C,KAClD,kBAAC,EAAA+C,SAAD,CAAUC,MAAOhD,EAASiD,YACtB,kBAAC,gBAAD,CAAQC,UAAUC,EAAAA,EAAAA,aAAYC,OAAOC,SAASC,WAC1C,kBAAC,EAAAC,oBAAD,MACA,kBAAC,IAAD,YAQxB5D,EAAS6D,UAAY,CACjB5D,UAAW6D,IAAAA,KACX5D,kBAAmB4D,IAAAA,MAGvB9D,EAAS+D,aAAe,CACpB9D,WAAW,EACXC,mBAAmB,GAGvB","sources":["webpack:///./src/AppEntry.js"],"sourcesContent":["/* eslint-disable no-console */\nimport { ApolloClient, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { NotificationsPortal, notifications } from '@redhat-cloud-services/frontend-components-notifications/';\nimport React, { useEffect, useMemo, useRef } from 'react';\n\nimport App from './App';\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { cache } from './store/cache';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { init, RegistryContext } from './store';\nimport { globalFilters } from './store/cache';\nimport logger from 'redux-logger';\nimport messages from '../locales/data.json';\nimport { setContext } from '@apollo/client/link/context';\n\nconst AppEntry = ({ useLogger, connectToDevTools }) => {\n    const tags = useRef();\n    const registry = useLogger ? init(logger) : init();\n    const selectedWorkloads = useRef();\n    const selectedSID = useRef();\n\n    const globalFilterLink = setContext((_, { headers }) => ({\n        headers: {\n            ...headers,\n            ...(tags.current?.length && { 'insights-tags': `${tags.current}` }),\n            ...(selectedWorkloads.current?.SAP?.isSelected && { 'insights-sap-system': true }),\n            ...(selectedWorkloads.current['Ansible Automation Platform']?.isSelected && { 'insights-ansible-system': true }),\n            ...(selectedWorkloads.current['Microsoft SQL']?.isSelected && { 'insights-mssql-system': true }),\n            ...(selectedSID.current?.length && { 'insights-sap-sids': `${selectedSID.current}` })\n        }\n    }));\n    const client = useMemo(() =>  new ApolloClient({\n        link: globalFilterLink.concat(createHttpLink({\n            uri: '/api/malware-detection/v1/graphql'\n        })),\n        cache,\n        connectToDevTools\n    }, `${tags.current}`), [connectToDevTools, globalFilterLink]);\n    registry.register({ notifications });\n\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp('malware');\n        if (insights.chrome?.globalFilterScope) {\n            insights.chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n                const [workloads, SID, selectedTags] =\n                insights.chrome?.mapGlobalFilter?.(data, false, true) || [];\n                tags.current =  selectedTags?.join(',') || '';\n\n                selectedWorkloads.current = workloads || {};\n                selectedSID.current = SID || [];\n\n                globalFilters({ workloads, SID, selectedTags });\n\n                client.resetStore();\n            });\n        }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [client]);\n\n    return <IntlProvider locale={navigator.language.slice(0, 2)} messages={messages} onError={console.log}>\n        <ApolloProvider client={client}>\n            <RegistryContext.Provider value={{ getRegistry: () => registry }}>\n                <Provider store={registry.getStore()}>\n                    <Router basename={getBaseName(window.location.pathname)}>\n                        <NotificationsPortal />\n                        <App />\n                    </Router>\n                </Provider>\n            </RegistryContext.Provider>\n        </ApolloProvider>\n    </IntlProvider>;\n};\n\nAppEntry.propTypes = {\n    useLogger: PropTypes.bool,\n    connectToDevTools: PropTypes.bool\n};\n\nAppEntry.defaultProps = {\n    useLogger: false,\n    connectToDevTools: false\n};\n\nexport default AppEntry;\n"],"names":["AppEntry","useLogger","connectToDevTools","tags","useRef","registry","init","logger","selectedWorkloads","selectedSID","globalFilterLink","setContext","_","headers","current","length","SAP","isSelected","client","useMemo","ApolloClient","link","concat","createHttpLink","uri","cache","register","notifications","useEffect","insights","chrome","identifyApp","globalFilterScope","on","data","mapGlobalFilter","workloads","SID","selectedTags","join","globalFilters","resetStore","locale","navigator","language","slice","messages","onError","console","log","value","getRegistry","Provider","store","getStore","basename","getBaseName","window","location","pathname","NotificationsPortal","propTypes","PropTypes","defaultProps"],"sourceRoot":""}