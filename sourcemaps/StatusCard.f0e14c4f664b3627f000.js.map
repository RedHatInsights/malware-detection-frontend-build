{"version":3,"sources":["webpack:///./src/Components/StatusCard/StatusCard.js"],"names":["StatusCard","sigStatsData","data","sigStatsLoading","loading","noSigData","intl","useIntl","className","span","variant","icon","hasMalware","ExclamationCircleIcon","CheckCircleIcon","iconClass","title","formatMessage","messages","text","hostScans","nodes","date","Date","createdAt","type","ruleStats","matchedCount","toLocaleString","onClick","sigTableFilters","condition","hasMatch","enabledCount","disabledCount","propTypes","gqlProps"],"mappings":"w6BAiBA,IAAMA,EAAa,SAAC,GAAgE,oBAAxDC,EAAwD,EAA9DC,KAA6BC,EAAiC,EAA1CC,QAA0BC,EAAgB,EAAhBA,UAC1DC,GAAOC,SAEb,OAAO,kBAAC,IAAD,CAAMC,UAAU,cACnB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACKL,EAAkB,kBAAC,IAAD,MAAc,kBAAC,IAAD,CAAUM,KAAOJ,EAAgB,GAAJ,GAAQ,kBAAC,IAAD,CAAcG,UAAU,GAAGE,QAAQ,QACrGC,MAAMC,UAAeC,KAAwBC,KAC7CC,WAAWH,UAAe,qBAAuB,sBACjDI,OAAOJ,UACHN,EAAKW,cAAcC,iBAAwBZ,EAAKW,cAAcC,aAClEC,MAAMP,UACFN,EAAKW,cAAcC,qBAA4BZ,EAAKW,cAAcC,qBACtE,8BAAOZ,EAAKW,cAAcC,eAA1B,KACCjB,SAAA,UAAAA,EAAcmB,iBAAd,SAAyBC,MAAM,GAAK,kBAAC,IAAD,CAAYC,KAAM,IAAIC,KAAKtB,SAAT,UAASA,EAAcmB,iBAAvB,aAAS,EAAyBC,MAAM,GAAGG,WAAYC,KAAK,aAC/GnB,EAAKW,cAAcC,sBAGzBb,GAAa,kBAAC,aAAD,KACX,kBAAC,IAAD,CAAUI,KAAM,EACZD,UAAU,2GACbL,EAAkB,kBAAC,IAAD,MACb,kBAAC,IAAD,CAAUK,UAAU,oBAAoBC,KAAM,GAC5C,kBAAC,IAAD,CAAUD,UAAU,gBAAgBC,KAAM,IACtC,kBAAC,aAAD,KACI,iCAASR,SAAA,UAAAA,EAAcyB,iBAAd,mBAAyBC,oBAAzB,eAAuCC,mBAAoB,GACpE,6BACA,kBAAC,KAAD,CAAQpB,UAAU,mBAAmBE,QAAQ,OACzCmB,QAAS,kBAAMC,QAAgB,EAAD,MAAMA,WAAN,IAAyBC,UAAW,CAAEC,UAAU,QAC7E1B,EAAKW,cAAcC,0BAIhC,kBAAC,IAAD,CAAUV,UAAU,gBAAgBC,KAAM,IACtC,iCAASR,SAAA,UAAAA,EAAcyB,iBAAd,mBAAyBO,oBAAzB,eAAuCL,mBAAoB,GACpE,2BAAItB,EAAKW,cAAcC,yBAC3B,kBAAC,IAAD,CAAUV,UAAU,gBAAgBC,KAAM,IACtC,iCAASR,SAAA,UAAAA,EAAcyB,iBAAd,mBAAyBQ,qBAAzB,eAAwCN,mBAAoB,GACrE,2BAAItB,EAAKW,cAAcC,gCASvDlB,EAAWmC,UAAYC,KAEvB","file":"js/StatusCard.e9875375e2be364d6849.js","sourcesContent":["import './StatusCard.scss';\n\nimport { Card, CardBody } from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport { hasMalware, sigTableFilters } from '../../store/cache';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport Loading from '../../Components/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport React from 'react';\nimport { gqlProps } from '../Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst StatusCard = ({ data: sigStatsData, loading: sigStatsLoading, noSigData }) => {\n    const intl = useIntl();\n\n    return <Card className='ins-l-card'>\n        <CardBody>\n            <Grid>\n                {sigStatsLoading ? <Loading /> : <GridItem span={!noSigData ? 7 : 12}><MessageState className='' variant='large'\n                    icon={hasMalware() ? ExclamationCircleIcon : CheckCircleIcon}\n                    iconClass={hasMalware() ? 'ins-l-danger-color' : 'ins-l-success-color'}\n                    title={hasMalware() ?\n                        intl.formatMessage(messages.activeFound) : intl.formatMessage(messages.noFound)}\n                    text={hasMalware() ?\n                        intl.formatMessage(messages.hostsVulnerable) : intl.formatMessage(messages.hostsProtected)} >\n                    <span>{intl.formatMessage(messages.lastCheck)} </span>\n                    {sigStatsData?.hostScans?.nodes[0] ? <DateFormat date={new Date(sigStatsData?.hostScans?.nodes[0].createdAt)} type='onlyDate' /> :\n                        intl.formatMessage(messages.noAnalysisRun)}\n                </MessageState></GridItem>\n                }\n                {!noSigData && <React.Fragment>\n                    <GridItem span={1}\n                        className='pf-c-divider pf-m-vertical pf-m-inset-md pf-m-inset-none-on-md pf-m-inset-sm-on-lg pf-m-inset-xs-on-xl' />\n                    {sigStatsLoading ? <Loading />\n                        : <GridItem className='ins-l-sigStatCard' span={3}>\n                            <GridItem className='ins-l-sigStat' span={12}>\n                                <React.Fragment>\n                                    <strong>{sigStatsData?.ruleStats?.matchedCount?.toLocaleString() || 0}</strong>\n                                    <br />\n                                    <Button className='ins-l-sigStatNum' variant='link'\n                                        onClick={() => sigTableFilters({ ...sigTableFilters(), condition: { hasMatch: true } })}>\n                                        {intl.formatMessage(messages.matchedSignatures)}\n                                    </Button>\n                                </React.Fragment>\n                            </GridItem>\n                            <GridItem className='ins-l-sigStat' span={12}>\n                                <strong>{sigStatsData?.ruleStats?.enabledCount?.toLocaleString() || 0}</strong>\n                                <p>{intl.formatMessage(messages.enabledSignatures)}</p></GridItem>\n                            <GridItem className='ins-l-sigStat' span={12}>\n                                <strong>{sigStatsData?.ruleStats?.disabledCount?.toLocaleString() || 0}</strong>\n                                <p>{intl.formatMessage(messages.disabledSignatures)}</p></GridItem>\n                        </GridItem>\n                    }\n                </React.Fragment>}\n            </Grid>\n        </CardBody>\n    </Card >;\n};\n\nStatusCard.propTypes = gqlProps;\n\nexport default StatusCard;\n"],"sourceRoot":""}