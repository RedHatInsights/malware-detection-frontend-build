{"version":3,"file":"js/1724.d447894c99bb9108dff1.js","mappings":"6SAiBA,MAAMA,EAAW,EAAGC,YAAWC,wBAC3B,MAAMC,GAAO,IAAAC,UACPC,EAAWJ,GAAY,QAAK,MAAU,UACtCK,GAAoB,IAAAF,UACpBG,GAAc,IAAAH,UACdI,GAAS,EAAAC,EAAA,KAETC,GAAmB,QAAW,CAACC,GAAKC,cAAc,CACpDA,QAAS,IACFA,KACCT,EAAKU,SAASC,QAAU,CAAE,gBAAiB,GAAGX,EAAKU,cACnDP,EAAkBO,SAASE,KAAKC,YAAc,CAAE,uBAAuB,MACvEV,EAAkBO,QAAQ,gCAAgCG,YAAc,CAAE,2BAA2B,MACrGV,EAAkBO,QAAQ,kBAAkBG,YAAc,CAAE,yBAAyB,MACrFT,EAAYM,SAASC,QAAU,CAAE,oBAAqB,GAAGP,EAAYM,gBAG3EI,GAAS,IAAAC,UAAQ,IAAO,IAAIC,EAAA,EAAa,CAC3CC,KAAMV,EAAiBW,QAAO,EAAAC,EAAA,GAAe,CACzCC,IAAK,uCAETC,MAAK,KACLtB,qBACD,GAAGC,EAAKU,YAAY,CAACX,EAAmBQ,IAsB3C,OArBAL,EAASoB,SAAS,CAAEC,cAAa,mBAEjC,IAAAC,YAAU,KACFnB,EAAOoB,mBACPpB,EAAOqB,GAAG,wBAAwB,EAAGC,WACjC,MAAOC,EAAWC,EAAKC,GACvBzB,EAAO0B,kBAAkBJ,GAAM,GAAO,IAAS,GAC/C3B,EAAKU,QAAWoB,GAAcE,KAAK,MAAQ,GAE3C7B,EAAkBO,QAAUkB,GAAa,CAAC,EAC1CxB,EAAYM,QAAUmB,GAAO,IAE7B,QAAc,CAAED,YAAWC,MAAKC,iBAEhChB,EAAOmB,YAAY,GAE3B,GAGD,CAACnB,IAEG,kBAAC,KAAY,CAACoB,OAAQC,UAAUC,SAASC,MAAM,EAAG,GAAIC,SAAU,EAAUC,QAASC,QAAQC,KAC9F,kBAACC,EAAA,EAAc,CAAC5B,OAAQA,GACpB,kBAAC,KAAgB6B,SAAQ,CAACC,MAAO,CAAEC,YAAa,IAAM3C,IAClD,kBAAC,KAAQ,CAAC4C,MAAO5C,EAAS6C,YACtB,kBAAC,EAAAC,oBAAmB,MACpB,kBAACC,EAAA,EAAG,SAIL,EAGnBpD,EAASqD,UAAY,CACjBpD,UAAW,SACXC,kBAAmB,UAGvBF,EAASsD,aAAe,CACpBrD,WAAW,EACXC,mBAAmB,GAGvB,U,qBChFA,UAAgB,kBAAC,EAAQ,MAAKqD,SAASC,eAAe,Q","sources":["webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js"],"sourcesContent":["/* eslint-disable no-console */\nimport { ApolloClient, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { NotificationsPortal, notifications } from '@redhat-cloud-services/frontend-components-notifications/';\nimport React, { useEffect, useMemo, useRef } from 'react';\n\nimport App from './App';\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { cache } from './store/cache';\nimport { init, RegistryContext } from './store';\nimport { globalFilters } from './store/cache';\nimport logger from 'redux-logger';\nimport messages from '../locales/data.json';\nimport { setContext } from '@apollo/client/link/context';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst AppEntry = ({ useLogger, connectToDevTools }) => {\n    const tags = useRef();\n    const registry = useLogger ? init(logger) : init();\n    const selectedWorkloads = useRef();\n    const selectedSID = useRef();\n    const chrome = useChrome();\n\n    const globalFilterLink = setContext((_, { headers }) => ({\n        headers: {\n            ...headers,\n            ...(tags.current?.length && { 'insights-tags': `${tags.current}` }),\n            ...(selectedWorkloads.current?.SAP?.isSelected && { 'insights-sap-system': true }),\n            ...(selectedWorkloads.current['Ansible Automation Platform']?.isSelected && { 'insights-ansible-system': true }),\n            ...(selectedWorkloads.current['Microsoft SQL']?.isSelected && { 'insights-mssql-system': true }),\n            ...(selectedSID.current?.length && { 'insights-sap-sids': `${selectedSID.current}` })\n        }\n    }));\n    const client = useMemo(() =>  new ApolloClient({\n        link: globalFilterLink.concat(createHttpLink({\n            uri: '/api/malware-detection/v1/graphql'\n        })),\n        cache,\n        connectToDevTools\n    }, `${tags.current}`), [connectToDevTools, globalFilterLink]);\n    registry.register({ notifications });\n\n    useEffect(() => {\n        if (chrome.globalFilterScope) {\n            chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n                const [workloads, SID, selectedTags] =\n                chrome.mapGlobalFilter?.(data, false, true) || [];\n                tags.current =  selectedTags?.join(',') || '';\n\n                selectedWorkloads.current = workloads || {};\n                selectedSID.current = SID || [];\n\n                globalFilters({ workloads, SID, selectedTags });\n\n                client.resetStore();\n            });\n        }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [client]);\n\n    return <IntlProvider locale={navigator.language.slice(0, 2)} messages={messages} onError={console.log}>\n        <ApolloProvider client={client}>\n            <RegistryContext.Provider value={{ getRegistry: () => registry }}>\n                <Provider store={registry.getStore()}>\n                    <NotificationsPortal />\n                    <App />\n                </Provider>\n            </RegistryContext.Provider>\n        </ApolloProvider>\n    </IntlProvider>;\n};\n\nAppEntry.propTypes = {\n    useLogger: PropTypes.bool,\n    connectToDevTools: PropTypes.bool\n};\n\nAppEntry.defaultProps = {\n    useLogger: false,\n    connectToDevTools: false\n};\n\nexport default AppEntry;\n","import AppEntry from './AppEntry';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<AppEntry />, document.getElementById('root'));\n"],"names":["AppEntry","useLogger","connectToDevTools","tags","useRef","registry","selectedWorkloads","selectedSID","chrome","useChrome","globalFilterLink","_","headers","current","length","SAP","isSelected","client","useMemo","ApolloClient","link","concat","createHttpLink","uri","cache","register","notifications","useEffect","globalFilterScope","on","data","workloads","SID","selectedTags","mapGlobalFilter","join","resetStore","locale","navigator","language","slice","messages","onError","console","log","ApolloProvider","Provider","value","getRegistry","store","getStore","NotificationsPortal","App","propTypes","defaultProps","document","getElementById"],"sourceRoot":""}