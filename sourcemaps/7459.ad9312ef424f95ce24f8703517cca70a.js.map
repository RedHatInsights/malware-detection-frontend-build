{"version":3,"file":"js/7459.95cccce76060a0cfbc40.js","mappings":"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","sources":["webpack:///./src/Routes/NoPermissionsPage/NoPermissionsPage.js","webpack:///./src/Components/Permissions.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/Components/Common.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Messages.js","webpack:///./src/operations/queries.js","webpack:///./src/store/cache.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\n\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { capitalize } from '../../Components/Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst NoPermissionsPage = () => {\n    const intl = useIntl();\n    const chrome = useChrome();\n    useEffect(() => {\n        chrome.appAction('no-permissions');\n    }, []);\n\n    return <Main>\n        <NotAuthorized serviceName={capitalize(intl.formatMessage(messages.malwareDetection))} />\n    </Main>;\n};\n\nexport default NoPermissionsPage;\n","import { GET_MALWARE_COUNT } from '../operations/queries';\nimport Loading from './Loading/Loading';\nimport NoPerms from '../Routes/NoPermissionsPage/NoPermissionsPage';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { hasMalware } from '../store/cache';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport { useQuery } from '@apollo/client';\n\nexport function Permissions (props) {\n    const { data, loading } = useQuery(GET_MALWARE_COUNT);\n    const PERMS = {\n        access: ['malware-detection:*:*', 'malware-detection:*:read']\n    };\n    const permsAccess = usePermissions('malware-detection', PERMS.access);\n\n    !loading && hasMalware(Number(data?.ruleStats?.matchedCount) !== 0);\n\n    if (permsAccess?.isLoading) {\n        return <Loading />;\n    } else if (!permsAccess?.hasAccess) {\n        return <NoPerms />;\n    } else if (!permsAccess?.isLoading && permsAccess?.hasAccess) {\n        return <React.Fragment>\n            { props.children}\n        </React.Fragment>;\n    }\n}\n\nPermissions.propTypes = {\n    children: PropTypes.any\n};\n","/* eslint-disable react/display-name */\nimport React, { lazy, useEffect, useState } from 'react';\nimport { useRoutes } from 'react-router-dom';\nimport { Permissions } from './Components/Permissions';\nimport axios from 'axios';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\n\nconst SignatureList = lazy(() => import(/* webpackChunkName: 'Signature List' */ './Routes/Signatures/Signatures'));\nconst SignatureDetails = lazy(() => import(/* webpackChunkName: \"Signature Details\" */ './Routes/Signatures/Details'));\nconst SystemsList = lazy(() => import(/* webpackChunkName: 'System List' */ './Routes/Systems/Systems'));\nconst SystemsDetails = lazy(() => import(/* webpackChunkName: \"System Details\" */ './Routes/Systems/Details'));\n\nconst INVENTORY_TOTAL_FETCH_URL = '/api/inventory/v1/hosts';\nexport const BASE_PATH = '/insights/malware';\nconst RHEL_ONLY_FILTER = '?filter[system_profile][operating_system][RHEL][version][gte]=0';\n\nconst  MalwareRoutes = () => {\n    const [hasSystems, setHasSystems] = useState(true);\n\n    useEffect(() => {\n        try {\n            axios\n            .get(`${INVENTORY_TOTAL_FETCH_URL}${RHEL_ONLY_FILTER}&page=1&per_page=1`)\n            .then(({ data }) => {\n                setHasSystems(data.total > 0);\n            });\n        } catch (e) {\n            // eslint-disable-next-line no-console\n            console.error(e);\n        }\n    }, [hasSystems]);\n\n    let element = useRoutes([\n        {\n            path: '/*',\n            element: <Permissions><SignatureList /></Permissions>\n        },\n        { path: '/signatures/:id', element: <Permissions><SignatureDetails /></Permissions> },\n        { path: '/systems', element: <Permissions><SystemsList /></Permissions> },\n        {\n            path: '/systems/:id',\n            element: <Permissions><SystemsDetails /></Permissions>\n        }\n    ]);\n\n    return (\n        <AsyncComponent\n            appId=\"malware_zero_state\"\n            appName=\"dashboard\"\n            module=\"./AppZeroState\"\n            scope=\"dashboard\"\n            ErrorComponent={ <ErrorState /> }\n            app=\"Malware\"\n            customFetchResults={ hasSystems }\n        >\n            {element}\n        </AsyncComponent>\n    );\n};\n\nexport default MalwareRoutes;\n","import './App.scss';\n\nimport React from 'react';\nimport MalwareRoutes from './Routes';\n\nconst App = (props) => {\n    return  <MalwareRoutes childProps={props} />;\n};\n\nexport default App;\n","import {\n    Tooltip,\n    TooltipPosition\n} from '@patternfly/react-core/dist/esm/components/Tooltip/';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon';\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nconst link = (desc, url = '#') => <Button isInline component='a' variant='link' href={url}>{desc}</Button>;\n\nconst gqlProps = {\n    data: propTypes.object,\n    loading: propTypes.bool,\n    error: propTypes.object\n};\n\nconst isBeta = () => window.location.pathname.split('/')[1] === 'preview' ? '/preview' : '';\n\n// Parse the match.metadata object and return a string of its 'key: value' items each on a separate line\nconst expandMatchMetadata = (md) => {\n    let output = `Source Type: ${md.source_type} ${md.md5sum || md.process_name ? '' : '(no additional metadata)'}`;\n    output += md.md5sum ? `\\nFile Type: ${md.file_type}\\nFile Mime Type: ${md.mime_type}\\nFile MD5Sum: ${md.md5sum}` : '';\n    output += md.line ? `\\nLine Number: ${md.line_number}\\nLine: ${decodeURIComponent(md.line)}` : '';\n    output += md.process_name ? `\\nProcess Name: ${md.process_name}` : '';\n    return output;\n};\n\nconst totalMatchesTitle = ({ tooltip, title }) => (\n    <span style={{ whiteSpace: 'nowrap' }}>\n        {title}\n        <Tooltip\n            key={title}\n            position={TooltipPosition.right}\n            content={<div>{tooltip}</div>}\n        >\n            <span aria-label=\"Action\">\n                {` `}<OutlinedQuestionCircleIcon color=\"var(--pf-global--secondary-color--100)\" />\n            </span>\n        </Tooltip>\n    </span>\n);\n\n// title case text string\nconst capitalize = (string) => string.replace(/\\w\\S*/g, (w) => (w.replace(/^\\w/, (c) => c.toUpperCase())));\n\nconst strong = (str) => <strong>{str}</strong>;\n\nconst RBACPermissions = {\n    read: ['malware-detection:*:read'],\n    write: ['malware-detection:*:*']\n};\n\n// eslint-disable-next-line max-len\nconst documentationURL = 'https://access.redhat.com/documentation/en-us/red_hat_insights/1-latest/html/assessing_and_reporting_malware_signatures_on_rhel_systems/index';\n// eslint-disable-next-line react/prop-types\nconst DocumentationLink = ({ children }) => (\n    <a href={documentationURL} target=\"__blank\" rel=\"noopener noreferrer\">\n        {children} <ExternalLinkAltIcon />\n    </a>\n);\n\nexport {\n    link, gqlProps, isBeta, totalMatchesTitle, expandMatchMetadata, capitalize, strong, RBACPermissions,\n    documentationURL, DocumentationLink\n};\n","import {\n    EmptyState,\n    EmptyStateHeader,\n    EmptyStateIcon,\n    Spinner\n} from '@patternfly/react-core/dist/esm/components';\n\nimport React from 'react';\n\nconst Loading = () => (\n    <EmptyState>\n        <EmptyStateHeader titleText=\"Loading\" headingLevel=\"h4\" icon={<EmptyStateIcon icon={Spinner} />} />\n    </EmptyState>\n);\n\nexport default Loading;\n","/* eslint-disable max-len */\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n    malwareDetection: {\n        id: 'malwareDetection',\n        description: 'Title',\n        defaultMessage: 'Malware detection'\n    },\n    signatures: {\n        id: 'signatures',\n        description: 'Signature page title',\n        defaultMessage: 'Signatures'\n    },\n    malwareDetectionSignatures: {\n        id: 'malwareDetectionSignatures',\n        description: 'Title',\n        defaultMessage: 'Malware detection signatures'\n    },\n    sigName: {\n        id: 'sigNameId',\n        description: 'Sig table column title',\n        defaultMessage: 'Signature name'\n    },\n    sig: {\n        id: 'sig',\n        description: 'Signature',\n        defaultMessage: 'Signature'\n    },\n    systems: {\n        id: 'systems',\n        description: 'Sig table column title',\n        defaultMessage: 'Systems'\n    },\n    added: {\n        id: 'added',\n        description: 'Sig table column title',\n        defaultMessage: 'Added'\n    },\n    lastMatched: {\n        id: 'lastMatched',\n        description: 'Sig table column title',\n        defaultMessage: 'Last matched'\n    },\n    matched: {\n        id: 'matched',\n        description: 'matched',\n        defaultMessage: 'Matched'\n    },\n    matchedSignaturesCount: {\n        id: 'matchedSignaturesCount',\n        description: 'Sig status card heading',\n        defaultMessage: 'Matched {matchedCount, plural, one {signature} other {signatures}}'\n    },\n    enabledSignaturesCount: {\n        id: 'enabledSignaturesCount',\n        description: 'Sig status card heading',\n        defaultMessage: 'Enabled {enabledCount, plural, one {signature} other {signatures}}'\n    },\n    disabledSignaturesCount: {\n        id: 'disabledSignaturesCount',\n        description: 'Sig status card heading',\n        defaultMessage: 'Disabled {disabledCount, plural, one {signature} other {signatures}}'\n    },\n    enabledSignaturesFilter: {\n        id: 'enabledSignaturesFilter',\n        description: 'Enabled signatures filter option',\n        defaultMessage: 'Enabled signatures'\n    },\n    disabledSignaturesFilter: {\n        id: 'disabledSignaturesFilter',\n        description: 'Disabled signatures filter option',\n        defaultMessage: 'Disabled signatures'\n    },\n    signaturesIncludedFilter: {\n        id: 'signaturesIncludedFilter',\n        description: 'Signatures included filter',\n        defaultMessage: 'Signatures included in malware analysis'\n    },\n    allSignatures: {\n        id: 'allSignatures',\n        description: 'All signatures filter option',\n        defaultMessage: 'All signatures'\n    },\n    signaturesEnabled: {\n        id: 'signaturesEnabled',\n        description: 'Signatures enabled filter option',\n        defaultMessage: 'Signatures enabled'\n    },\n    signaturesDisabled: {\n        id: 'signaturesDisabled',\n        description: 'Signatures disabled filter option',\n        defaultMessage: 'Signatures disabled'\n    },\n    disableSignatureFromAnalysis: {\n        id: 'disableSignatureFromAnalysis',\n        description: 'Disable signature from malware analysis',\n        defaultMessage: 'Disable signature from malware analysis'\n    },\n    enableSignatureForAnalysis: {\n        id: 'enableSignatureForAnalysis',\n        description: 'Enable signature for malware analysis',\n        defaultMessage: 'Enable signature for malware analysis'\n    },\n    disableSignaturesFromAnalysis: {\n        id: 'disableSignaturesFromAnalysis',\n        description: 'Disable signatures from malware analysis',\n        defaultMessage: 'Disable signatures from malware analysis'\n    },\n    enableSignaturesForAnalysis: {\n        id: 'enableSignaturesForAnalysis',\n        description: 'Enable signatures for malware analysis',\n        defaultMessage: 'Enable signatures for malware analysis'\n    },\n    disablingSignature: {\n        id: 'disablingSignature',\n        description: 'Disabling signature loading message',\n        defaultMessage: 'Disabling signature from malware analysis ...'\n    },\n    enablingSignature: {\n        id: 'enablingSignature',\n        description: 'Enabling signature loading message',\n        defaultMessage: 'Enabling signature for malware analysis ...'\n    },\n    actions: {\n        id: 'actions',\n        description: 'Enable Disable signature dropdown title',\n        defaultMessage: 'Actions'\n    },\n    analysisRunAcross: {\n        id: 'analysisRunAcross',\n        description: 'Chart card heading',\n        defaultMessage: '<strong>analyses</strong> run across <strong>{hosts, plural, one {# system} other {# systems}}</strong> with <strong>{matches, plural, one {# match} other {# matches}}</strong>'\n    },\n    noFound: {\n        id: 'noFound',\n        description: 'Sig status card heading',\n        defaultMessage: 'No active malware matches found'\n    },\n    noAnalysisRun: {\n        id: 'noAnalysisRun',\n        description: 'No host analyses run',\n        defaultMessage: 'No system analyses run'\n    },\n    hostsProtected: {\n        id: 'hostsProtected',\n        description: 'Sig status card sub heading',\n        defaultMessage: 'Your systems are protected.'\n    },\n    activeFound: {\n        id: 'activeFound',\n        description: 'Sig status card heading',\n        defaultMessage: 'Active malware matches found!'\n    },\n    hostsVulnerable: {\n        id: 'hostsVulnerable',\n        description: 'Sig status card sub heading',\n        defaultMessage: 'Your systems may be at risk.'\n    },\n    lastCheck: {\n        id: 'lastCheck',\n        description: 'Sig status card',\n        defaultMessage: 'Last check:'\n    },\n    lastSeen: {\n        id: 'lastSeen',\n        description: 'Last seen',\n        defaultMessage: 'Last seen'\n    },\n    uuid: {\n        id: 'uuid',\n        description: 'UUID',\n        defaultMessage: 'UUID'\n    },\n    description: {\n        id: 'description',\n        description: 'description',\n        defaultMessage: 'Description'\n    },\n    threatType: {\n        id: 'threatType',\n        description: 'Malware threat type',\n        defaultMessage: 'Threat type'\n    },\n    ruleCategory: {\n        id: 'ruleCategory',\n        description: 'Rule category',\n        defaultMessage: 'Rule category'\n    },\n    ruleIntendedUsage: {\n        id: 'ruleIntendedUsage',\n        description: 'Rule intended usage',\n        defaultMessage: 'Intended usage'\n    },\n    ruleReferences: {\n        id: 'ruleReferences',\n        description: 'Rule references',\n        defaultMessage: 'References'\n    },\n    ruleAuthorReference: {\n        id: 'ruleAuthorReference',\n        description: 'Rule author reference',\n        defaultMessage: 'Author reference'\n    },\n    ruleAuthorReferences: {\n        id: 'ruleAuthorReferences',\n        description: 'Rule author reference links',\n        defaultMessage: 'Author reference links'\n    },\n    ruleBackgroundReference: {\n        id: 'ruleBackgroundReference',\n        description: 'Rule background reference',\n        defaultMessage: 'Background reference'\n    },\n    ruleBackgroundReferences: {\n        id: 'ruleBackgroundReferences',\n        description: 'Rule background reference links',\n        defaultMessage: 'Background reference links'\n    },\n    dataNotAvailable: {\n        id: 'dataNotAvailable',\n        description: 'Data not available',\n        defaultMessage: 'Not available'\n    },\n    notApplicable: {\n        id: 'notApplicable',\n        description: 'Not applicable',\n        defaultMessage: 'N/A'\n    },\n    never: {\n        id: 'never',\n        description: 'never',\n        defaultMessage: 'Never'\n    },\n    malwareDetectionSigs: {\n        id: 'malwareDetectionSigs',\n        description: 'Malware detection signatures',\n        defaultMessage: 'Malware detection signatures'\n    },\n    malwareDetectionSys: {\n        id: 'malwareDetectionSys',\n        description: 'Malware detection systems',\n        defaultMessage: 'Malware detection systems'\n    },\n    affectedHosts: {\n        id: 'affectedHosts',\n        description: 'Affected hosts',\n        defaultMessage: 'Affected systems'\n    },\n    lastmatch: {\n        id: 'lastmatch',\n        description: 'Last match',\n        defaultMessage: 'Last match'\n    },\n    hostmatch: {\n        id: 'hostmatch',\n        description: 'Host match',\n        defaultMessage: 'System match'\n    },\n    matchedSystems: {\n        id: 'matchedSystems',\n        description: 'Number of matched systems',\n        defaultMessage: 'Matched systems'\n    },\n    status: {\n        id: 'status',\n        description: 'Status',\n        defaultMessage: 'Status'\n    },\n    author: {\n        id: 'author',\n        description: 'Author',\n        defaultMessage: 'Author'\n    },\n    enabled: {\n        id: 'enabled',\n        description: 'Enabled',\n        defaultMessage: 'Enabled'\n    },\n    enablement: {\n        id: 'enablement',\n        description: 'Enablement',\n        defaultMessage: 'Enablement'\n    },\n    disabled: {\n        id: 'disabled',\n        description: 'Disabled',\n        defaultMessage: 'Disabled'\n    },\n    noHostHas: {\n        id: 'noHostHas',\n        description: 'No host has been affected by this signature.',\n        defaultMessage: 'No system has been affected by this signature.'\n    },\n    signature: {\n        id: 'signature',\n        description: 'Signature',\n        defaultMessage: 'Signature'\n    },\n    filterBy: {\n        id: 'filterBy',\n        description: 'Filter by {what?}',\n        defaultMessage: 'Filter by {field}'\n    },\n    weDetected: {\n        id: 'weDetected',\n        description: 'Malware detected on one or more systems',\n        defaultMessage: 'Malware detected on one or more systems. Further analysis and investigation is recommended, including contacting your information security team.'\n    },\n    systemsListIsDifferent: {\n        id: 'systemsListIsDifferent',\n        description: 'Systems list is different to Inventory',\n        defaultMessage: 'The list of systems in this view is different than those that appear in the Inventory. Only systems currently enabled for malware detection are displayed.'\n    },\n    name: {\n        id: 'name',\n        description: 'Name',\n        defaultMessage: 'Name'\n    },\n    noMatches: {\n        id: 'noMatches',\n        description: 'No matches found',\n        defaultMessage: 'No matches found'\n    },\n    hostsNotAffected: {\n        id: 'hostsNotAffected',\n        description: 'Hosts are not affected by any signatures.',\n        defaultMessage: 'Systems are not affected by any signatures.'\n    },\n    noResults: {\n        id: 'noResults',\n        description: 'No results found',\n        defaultMessage: 'No results found'\n    },\n    noResultsMatch: {\n        id: 'noResultsMatch',\n        description: 'No results match this filter criteria. Remove all filters or clear all filters to show results.',\n        defaultMessage: 'No results match this filter criteria. Remove all filters or clear all filters to show results.'\n    },\n    all: {\n        id: 'all',\n        description: 'all',\n        defaultMessage: 'All'\n    },\n    notMatched: {\n        id: 'notMatched',\n        description: 'not matched',\n        defaultMessage: 'Not matched'\n    },\n    notMatchedBody: {\n        id: 'notMatchedBody',\n        description: 'This system is not matched by any malware signatures.',\n        defaultMessage: 'This system is not matched by any malware signatures.'\n    },\n    sigCompiled: {\n        id: 'sigCompiled',\n        description: 'Signature is compiled',\n        defaultMessage: 'Signature is compiled'\n    },\n    sigCompiledBody: {\n        id: 'sigCompiledBody',\n        description: 'We couldnt display',\n        defaultMessage: 'We couldn\\'t display this signature because it\\'s compiled.'\n    },\n    totalMatches: {\n        id: 'totalMatches',\n        description: 'Total matches',\n        defaultMessage: 'Total matches'\n    },\n    noAffectedHosts: {\n        id: 'noAffectedHosts',\n        description: 'No affected hosts',\n        defaultMessage: 'No affected systems'\n    },\n    noAffectedHostsBody: {\n        id: 'noAffectedHostsBody',\n        description: 'This signature doesn\\'t affect any hosts.',\n        defaultMessage: 'This signature doesn\\'t affect any systems.'\n    },\n    disabledFromAnalysis: {\n        id: 'disabledFromAnalysis',\n        description: 'Disabled from malware analysis',\n        defaultMessage: 'Disabled from malware analysis'\n    },\n    disabledFromAnalysisBody: {\n        id: 'disabledFromAnalysisBody',\n        description: 'Disabled from malware analysis body',\n        defaultMessage: 'This signature has been disabled from malware analysis by user {disabledBy} on {disabledAt}.  It is not being evaluated for potential malware by Red Hat Insights.'\n    },\n    resumeMalwareAnalysis: {\n        id: 'resumeMalwareAnalysis',\n        description: 'Resume malware analysis button message',\n        defaultMessage: 'Resume malware analysis'\n    },\n    resumingMalwareAnalysis: {\n        id: 'resumingMalwareAnalysis',\n        description: 'Resuming malware analysis button message',\n        defaultMessage: 'Resuming malware analysis ...'\n    },\n    resetFilters: {\n        id: 'resetFilters',\n        description: 'Reset filters',\n        defaultMessage: 'Reset filters'\n    },\n    lastStatus: {\n        id: 'lastStatus',\n        description: 'Last status',\n        defaultMessage: 'Last status'\n    },\n    totalMatchesNote: {\n        id: 'totalMatchesNote',\n        description: 'This is the total number of matches found on every scan of a system. If a signature is found multiple times over a period of time, it is reported each time.',\n        defaultMessage: 'This is the total number of matches found on every scan of a system. If a signature is found multiple times over a period of time, it is reported each time.'\n    },\n    lastScan: {\n        id: 'lastScan',\n        description: 'Last scan',\n        defaultMessage: 'Last scan'\n    },\n    headerPopoverTitle: {\n        id: 'headerPopoverTitle',\n        description: 'Title for the information card in the header',\n        defaultMessage: 'About Malware Detection'\n    },\n    headerPopoverBody1: {\n        id: 'headerPopoverBody1',\n        description: 'Body for the information card in the header',\n        defaultMessage: `Expands the Red Hat Insights security offering by providing detection of potential malware in your RHEL infrastructure.`\n    },\n    headerPopoverFooter: {\n        id: 'headerPopoverFooter',\n        description: 'Footer for the information card in the header',\n        defaultMessage: 'Access installation guide'\n    },\n    emptyAccountTitle: {\n        id: 'emptyAccountTitle',\n        description: 'empty account card title',\n        defaultMessage: 'No systems have uploaded a malware scan report.'\n    },\n    emptyAccountCardBody: {\n        id: 'emptyAccountCardBody',\n        description: 'empty account card body',\n        defaultMessage: 'To get started, connect your systems with the installation guide.'\n    },\n    emptyAccountTableBody: {\n        id: 'emptyAccountTableBody',\n        description: 'empty account card body',\n        defaultMessage: 'This is only the preview state. To get started, follow the installation guide and connect your systems.'\n    },\n    emptyAccountButton: {\n        id: 'emptyAccountButton',\n        description: 'empty account card button',\n        defaultMessage: 'Access installation guide'\n    },\n    learnMore: {\n        id: 'learnMore',\n        description: 'Learn more link to malware documentation',\n        defaultMessage: 'Learn more'\n    },\n    error: {\n        id: 'error',\n        description: 'Error',\n        defaultMessage: 'Error'\n    },\n    group: {\n        id: 'group',\n        description: 'Group column name',\n        defaultMessage: 'Group'\n    },\n    os: {\n        id: 'os',\n        description: 'OS column name',\n        defaultMessage: 'OS'\n    },\n    noGroups: {\n        id: 'noGroups',\n        description: 'No groups to filter',\n        defaultMessage: 'No groups to filter'\n    }\n});\n","import { gql, makeVar } from '@apollo/client';\n\nexport const test = makeVar(false);\n\nconst Signatures = {\n    RuleDetails: gql` fragment RuleDetails on Rule {\n      hasMatch\n      id\n      lastMatchDate\n      name\n      rawRule\n      metadata\n      isDisabled\n      hostCount\n    }`,\n    ExtraRuleDetails: gql` fragment ExtraRuleDetails on Rule {\n      disabledBy\n      disabledAt\n      affectedHosts {\n          totalCount\n        }\n}` };\n\nexport const GET_SIGNATURE_PAGE = gql`query QuerySigPage {\n  ruleStats {\n    matchedCount\n    enabledCount\n    disabledCount\n  }\n  hostScans(first: 1, orderBy: CREATED_AT_DESC) {\n    nodes {\n      createdAt\n    }\n    totalCount\n  }\n  hosts {\n    totalCount\n  }\n}`;\n\nexport const GET_SIGNATURE_TABLE = gql`query\nQuerySigPage($offset: Int = 0, $limit: Int = 10, $orderBy: [RulesOrderBy!], $ruleName: String, $condition: RuleCondition = {})  {\n  rulesList(offset: $offset, first: $limit, orderBy: $orderBy, ruleName: $ruleName, condition: $condition)  {\n      ...RuleDetails\n  }\n  rules(offset: $offset, first: $limit, orderBy: $orderBy, ruleName: $ruleName, condition: $condition) {\n    totalCount\n  }\n}${Signatures.RuleDetails}`;\n\nexport const GET_SIGNATURE_DETAILS_PAGE = gql`query QuerySigDetailsPage($ruleName: String)  {\n  rulesList(condition: {name: $ruleName})  {\n      ...RuleDetails\n      ...ExtraRuleDetails\n  }\n  hosts {\n    totalCount\n  }\n}${Signatures.RuleDetails}${Signatures.ExtraRuleDetails}`;\n\nexport const GET_MALWARE_COUNT = gql`query QuerySigPage {\n  ruleStats {\n    matchedCount\n  }\n}`;\n\nexport const GET_SIGNATURE_DETAILS_TABLE = gql`query QuerySigPage($offset: Int = 0, $limit: Int = 10,\n  $orderBy: [HostWithMatchesOrderBy!], $ruleName: String, $displayName: String, $hostGroupFilter: [String]) {\n  rulesList(ruleName: $ruleName) {\n    affectedHostsList(\n      offset: $offset\n      first: $limit\n      orderBy: $orderBy\n      displayName: $displayName\n      groupName: $hostGroupFilter\n    ) {\n      id\n      displayName\n      groups\n      osVersion\n      lastScanDate\n      matchCount\n      matches {\n        stringOffset\n        stringIdentifier\n        stringData\n        source\n        scanDate\n        ruleScanId\n        ruleId\n        hostId\n        id\n        metadata\n      }\n    }\n    affectedHosts(\n      offset: $offset\n      first: $limit\n      orderBy: $orderBy\n      displayName: $displayName\n      groupName: $hostGroupFilter\n    ) {\n      totalCount\n    }\n  }\n}`;\n\nexport const GET_SIGNATURE_DETAILS_TABLE_GROUPS = gql`query QuerySigPageGroups($ruleName: String)  {\n  rulesList(ruleName: $ruleName)  {\n    affectedHostsList (orderBy: GROUP_NAME_ASC){\n      groups\n    }\n  }\n}`;\n\nexport const GET_SYSTEM_TABLE = gql`\nquery QuerySysPage($offset: Int = 0, $limit: Int = 10, $orderBy: [HostsOrderBy!], $hostnameOrId: String, $tags: JSON,\n  $hasMatch: Boolean, $hostGroupFilter: [String], $osFilter: [String]) {\n  hostsList(\n    offset: $offset\n    first: $limit\n    orderBy: $orderBy\n    displayName: $hostnameOrId\n    hostTags: $tags\n    condition: {hasMatch: $hasMatch}\n    groupName: $hostGroupFilter\n    osVersion: $osFilter\n  ) {\n    id\n    displayName\n    hasMatch\n    lastScanDate\n    lastMatchDate\n    totalMatches\n    hostScans {\n      totalCount\n    }\n    updated\n    tags\n    groups\n    osVersion\n  }\n  hosts(\n    offset: $offset\n    first: $limit\n    orderBy: $orderBy\n    displayName: $hostnameOrId\n    hostTags: $tags\n    condition: {hasMatch: $hasMatch}\n    groupName: $hostGroupFilter\n    osVersion: $osFilter\n  ) {\n    totalCount\n  }\n}`;\n\nexport const GET_SYSTEMS_DETAILS_PAGE = gql`query QuerySysDetailsPage($id: UUID)  {\n  hosts(condition: {id: $id})  {\n    nodes {\n      lastScanDate\n      displayName\n      id\n      lastMatchDate\n      totalMatches\n  }\n}\n}`;\n\nexport const GET_SYSTEMS_DETAILS_TABLE_PAGE = gql`query QuerySysDetailsPage(\n  $systemId: UUID!, $offset: Int = 0, $limit: Int = 10, $orderBy: [RuleWithMatchesOrderBy!], $ruleName: String) {\n  host(id: $systemId) {\n    id\n    updated\n    lastMatchDate\n    hasMatch\n    affectedRules(\n      first: $limit\n      offset: $offset\n      orderBy: $orderBy\n      ruleName: $ruleName\n    ) {\n      totalCount\n    }\n    affectedRulesList(\n      first: $limit\n      offset: $offset\n      orderBy: $orderBy\n      ruleName: $ruleName\n    ) {\n      matchCount\n      lastMatchDate\n      lastStatus\n      matches {\n        stringOffset\n        stringIdentifier\n        stringData\n        source\n        metadata\n        scanDate\n      }\n      name\n      metadata\n      rawRule\n    }\n  }\n}\n`;\n\nexport const GET_TIME_SERIES_STATS = gql`query QuerySysScanComponent {\n  timeSeriesStatsList {\n    day\n    hostScanCount\n  }\n}`;\n","import { InMemoryCache, makeVar } from '@apollo/client';\n// import { offsetLimitPagination } from '@apollo/client/utilities';\n\nexport const hasMalware = makeVar(false);\nexport const sigTableFilters = makeVar({});\nexport const sysTableFilters = makeVar({});\nexport const globalFilters  = makeVar({});\nexport const cache = new InMemoryCache({\n    typePolicies: {\n        Query: {\n            fields: {\n                // rulesList: { ...offsetLimitPagination(),\n                //     read(existing, { variables }) {\n\n                //         need to have the variables stored/updated as cache var, then we can compare exisitng to what we see in the read\n\n                //         console.error(existing, variables);\n                //         if (!existing) {return;} //We have no data at all\n\n                //         if (existing.length < (variables.offset + variables.limit)) {return;} //We don't have enough data\n\n                //         const sliced = existing.slice(variables.offset, variables.offset + variables.limit);\n\n                //         if (sliced.includes(undefined)) {return;} //Some of our data is null\n\n                //         return sliced;\n                //     }\n                // }\n            }\n        }\n    }\n});\n","import { createContext } from 'react';\nimport { ReducerRegistry, applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nexport const RegistryContext = createContext({\n    getRegistry: () => {}\n});\n\nexport function init (...middleware) {\n    return new ReducerRegistry(\n        {},\n        [\n            promiseMiddleware,\n            ...middleware\n        ]\n    );\n}\n\nconst selectRows = (rows, selected) =>\n    rows.map((row) => ({\n        ...row,\n        selected: selected.includes(row.id)\n    }));\n\nexport const entitiesReducer = () =>\n    applyReducerHash({\n        ['INVENTORY_INIT']: () => ({\n            rows: [],\n            total: 0\n        }),\n        ['RESET_PAGE']: (state) => ({\n            ...state,\n            page: 1\n        }),\n        ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n            ...state,\n            rows: selectRows(state.rows || [], selected)\n        })\n    });\n"],"names":["intl","useIntl","chrome","useChrome","useEffect","appAction","Main","NotAuthorized","serviceName","formatMessage","malwareDetection","Permissions","props","data","loading","useQuery","permsAccess","Number","ruleStats","matchedCount","isLoading","Loading","hasAccess","children","propTypes","SignatureList","lazy","SignatureDetails","SystemsList","SystemsDetails","hasSystems","setHasSystems","useState","axios","get","then","total","e","console","error","element","useRoutes","path","AsyncComponent","appId","appName","module","scope","ErrorComponent","ErrorState","app","customFetchResults","childProps","gqlProps","isBeta","window","location","pathname","split","expandMatchMetadata","md","output","source_type","md5sum","process_name","file_type","mime_type","line","line_number","decodeURIComponent","totalMatchesTitle","tooltip","title","style","whiteSpace","key","position","right","content","color","capitalize","string","replace","w","c","toUpperCase","strong","str","RBACPermissions","read","write","documentationURL","DocumentationLink","href","target","rel","titleText","headingLevel","icon","id","description","defaultMessage","signatures","malwareDetectionSignatures","sigName","sig","systems","added","lastMatched","matched","matchedSignaturesCount","enabledSignaturesCount","disabledSignaturesCount","enabledSignaturesFilter","disabledSignaturesFilter","signaturesIncludedFilter","allSignatures","signaturesEnabled","signaturesDisabled","disableSignatureFromAnalysis","enableSignatureForAnalysis","disableSignaturesFromAnalysis","enableSignaturesForAnalysis","disablingSignature","enablingSignature","actions","analysisRunAcross","noFound","noAnalysisRun","hostsProtected","activeFound","hostsVulnerable","lastCheck","lastSeen","uuid","threatType","ruleCategory","ruleIntendedUsage","ruleReferences","ruleAuthorReference","ruleAuthorReferences","ruleBackgroundReference","ruleBackgroundReferences","dataNotAvailable","notApplicable","never","malwareDetectionSigs","malwareDetectionSys","affectedHosts","lastmatch","hostmatch","matchedSystems","status","author","enabled","enablement","disabled","noHostHas","signature","filterBy","weDetected","systemsListIsDifferent","name","noMatches","hostsNotAffected","noResults","noResultsMatch","all","notMatched","notMatchedBody","sigCompiled","sigCompiledBody","totalMatches","noAffectedHosts","noAffectedHostsBody","disabledFromAnalysis","disabledFromAnalysisBody","resumeMalwareAnalysis","resumingMalwareAnalysis","resetFilters","lastStatus","totalMatchesNote","lastScan","headerPopoverTitle","headerPopoverBody1","headerPopoverFooter","emptyAccountTitle","emptyAccountCardBody","emptyAccountTableBody","emptyAccountButton","learnMore","group","os","noGroups","Signatures","GET_SIGNATURE_PAGE","GET_SIGNATURE_TABLE","GET_SIGNATURE_DETAILS_PAGE","GET_MALWARE_COUNT","GET_SIGNATURE_DETAILS_TABLE","GET_SIGNATURE_DETAILS_TABLE_GROUPS","GET_SYSTEM_TABLE","GET_SYSTEMS_DETAILS_PAGE","GET_SYSTEMS_DETAILS_TABLE_PAGE","GET_TIME_SERIES_STATS","hasMalware","sigTableFilters","globalFilters","cache","typePolicies","Query","fields","RegistryContext","createContext","getRegistry","init","middleware","selectRows","rows","selected","map","row","includes","entitiesReducer","state","page","payload"],"sourceRoot":""}