{"version":3,"sources":["webpack:///./src/Components/SigTable/SigTable.js"],"names":["initialState","tableVars","limit","offset","orderBy","ruleName","sortBy","index","direction","SortByDirection","rows","sortIndices","1","2","3","4","5","tableReducer","state","action","type","payload","SigTable","chips","hasMatch","intl","useIntl","useReducer","stateSet","useQuery","GET_SIGNATURE_TABLE","variables","useReactiveVar","sigTableFilters","sigTableData","data","sigTableLoading","loading","sigTableError","error","columns","title","formatMessage","messages","cellFormatters","expandable","transforms","cellWidth","sortable","page","FILTER_CATEGORIES","sig_match","urlParam","values","label","value","filterConfigItems","toLowerCase","filterValues","key","onChange","e","placeholder","field","id","tableFilters","condition","JSON","parse","stringify","items","onSetPage","onPerPageSelect","perPage","activeFiltersConfig","deleteTitle","filters","undefined","push","category","name","onDelete","event","itemsToRemove","isAll","map","item","useEffect","rulesList","flatMap","sig","rowId","isOpen","cells","Link","to","isDisabled","displayMatch","hostCount","lastMatchDate","content","date","Date","parent","sigData","fullWidth","pagination","itemCount","rules","totalCount","isCompact","filterConfig","className","aria-label","onCollapse","rowKey","collapseRows","hasGutter","span","code","rawRule","isReadOnly","component","TextVariants","metadata","description","onSort","isStickyHeader","icon","SearchIcon","variant","text","widgetId","PaginationVariant","propTypes","gqlProps"],"mappings":"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","file":"js/SigTable.e94a94dabd135308442f.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport './SigTable.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination/index';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    expandable,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table/index';\nimport { Text, TextVariants } from '@patternfly/react-core';\n\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SIGNATURE_TABLE } from '../../operations/queries';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../Components/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport StatusLabel from '../StatusLabel/StatusLabel';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport { gqlProps } from '../Common';\nimport messages from '../../Messages';\nimport { sigTableFilters } from '../../store/cache';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport { useReactiveVar } from '@apollo/client';\n\nconst initialState = {\n    tableVars: {\n        limit: 10,\n        offset: 0,\n        orderBy: 'LAST_MATCH_DATE_DESC',\n        ruleName: ''\n    },\n    sortBy: {\n        index: 4,\n        direction: SortByDirection.desc\n    },\n    rows: []\n};\nconst sortIndices = { 1: 'NAME', 2: 'HAS_MATCH', 3: 'IS_DISABLED', 4: 'HOST_COUNT', 5: 'LAST_MATCH_DATE' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n    }\n\n    return state;\n};\n\nconst SigTable = () => {\n    const intl = useIntl();\n    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data: sigTableData, loading: sigTableLoading, error: sigTableError } =\n        useQuery(GET_SIGNATURE_TABLE, { variables: { ...tableVars, ...useReactiveVar(sigTableFilters) } });\n    const columns = [\n        { title: intl.formatMessage(messages.sigName), cellFormatters: [expandable], transforms: [cellWidth(45), sortable] },\n        { title: intl.formatMessage(messages.status), transforms: [sortable] },\n        { title: intl.formatMessage(messages.enablement), transforms: [sortable] },\n        { title: intl.formatMessage(messages.systems), transforms: [sortable] },\n        { title: intl.formatMessage(messages.matched), transforms: [sortable] }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const sig = collapseRows[rowKey + 1].sigData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells = [{\n            title: <Grid hasGutter>\n                <GridItem span={6}>\n                    <CodeEditor code={sig.rawRule} isReadOnly />\n                </GridItem>\n                <GridItem span={6}> <Text className='ins-l-sigtable--title' component={TextVariants.h6}>\n                    {intl.formatMessage(messages.description)}\n                </Text>{sig.metadata.description}\n                </GridItem>\n            </Grid>\n        }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    const FILTER_CATEGORIES = {\n        sig_match: {\n            type: 'radio', title: intl.formatMessage(messages.status), urlParam: 'sig_match', values: [\n                { label: intl.formatMessage(messages.all), value: 'all' },\n                { label: intl.formatMessage(messages.matched), value: 'true' },\n                { label: intl.formatMessage(messages.notMatched), value: 'false' }\n            ]\n        }\n    };\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.signature).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { ruleName: value } }),\n            value: tableVars.ruleName,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.signature).toLowerCase() })\n        }\n    }, {\n        label: FILTER_CATEGORIES.sig_match.title.toLowerCase(),\n        type: FILTER_CATEGORIES.sig_match.type,\n        id: FILTER_CATEGORIES.sig_match.urlParam,\n        value: `radio-${FILTER_CATEGORIES.sig_match.urlParam}`,\n        filterValues: {\n            key: `${FILTER_CATEGORIES.sig_match.urlParam}-filter`,\n            onChange: (e, value) => {\n                const tableFilters = sigTableFilters();\n                value === 'all' && delete tableFilters?.condition;\n                value === 'all' ? sigTableFilters({ ...tableFilters }) :\n                    sigTableFilters({ ...tableFilters, condition: { hasMatch: JSON.parse(value) } });\n            },\n            value: JSON.stringify(sigTableFilters().condition?.hasMatch) || 'all',\n            items: FILTER_CATEGORIES.sig_match.values\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const buildFilterChips = () => {\n        const chips = [];\n        const hasMatch = sigTableFilters().condition?.hasMatch !== undefined && (sigTableFilters().condition?.hasMatch ?\n            intl.formatMessage(messages.matched) : intl.formatMessage(messages.notMatched));\n        tableVars?.ruleName &&\n        chips.push({ category: intl.formatMessage(messages.signature), value: 'name',\n            chips: [{ name: tableVars?.ruleName, value: tableVars?.ruleName }] });\n        hasMatch && chips.push({ category: intl.formatMessage(messages.status), value: 'matched', chips: [{ name: hasMatch, value: hasMatch }] });\n        return chips;\n    };\n\n    const activeFiltersConfig = {\n        deleteTitle: intl.formatMessage(messages.resetFilters),\n        filters: buildFilterChips(),\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                sigTableFilters({});\n                stateSet({ type: 'setTableVars', payload: { ruleName: '' } });\n            } else {\n                itemsToRemove.map((item) => {\n                    item.value === 'name' && stateSet({ type: 'setTableVars', payload: { ruleName: '' } });\n                    item.value === 'matched' && sigTableFilters({});\n                });\n            }\n        }\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.rulesList?.flatMap((data, key) => {\n            const sig = data;\n            return [{\n                rowId: key,\n                isOpen: false,\n                cells: [\n                    { title: <Link to={`/${sig.name}`}>{sig.name}</Link> },\n                    { title: <StatusLabel isDisabled={sig.isDisabled} hasMatch={sig.hasMatch} displayMatch /> },\n                    { title: <StatusLabel isDisabled={sig.isDisabled} hasMatch={sig.hasMatch} /> },\n                    { title: <Link to={`/${sig.name}`}>{sig.hostCount}</Link> },\n                    {\n                        title: sig.lastMatchDate ?\n                            <Tooltip content={<DateFormat date={new Date(sig.lastMatchDate)} type='exact' />}>\n                                <span><DateFormat date={new Date(sig.lastMatchDate)} type='onlyDate' /></span>\n                            </Tooltip>\n                            : <Tooltip content={intl.formatMessage(messages.noHostHas)}>\n                                <span>{intl.formatMessage(messages.never)}</span>\n                            </Tooltip>\n                    }]\n            }, {\n                parent: key * 2,\n                sigData: sig,\n                fullWidth: true,\n                cells: []\n            }];\n        });\n\n        stateSet({ type: 'setRows', payload: rowBuilder(sigTableData) });\n    }, [intl, sigTableData]);\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: sigTableData?.rules?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        <Table className='sigTable' aria-label='Signature table'\n            onCollapse={onCollapse}\n            rows={rows} cells={columns}\n            onSort={onSort} sortBy={sortBy} isStickyHeader>\n            <TableHeader />\n            <TableBody />\n        </Table>\n        {sigTableLoading && <Loading type='table' />}\n        {!sigTableLoading && !sigTableError && sigTableData?.rules?.totalCount === 0 &&\n            <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n                text={intl.formatMessage(messages.noResultsMatch)} />}\n        {sigTableError && <MessageState className='pf-c-card' variant='large' title='Error' text='error' />}\n        <Pagination\n            itemCount={sigTableData?.rules?.totalCount || 0}\n            widgetId='pagination-options-menu-bottom'\n            perPage={tableVars.limit}\n            page={page}\n            variant={PaginationVariant.bottom}\n            onSetPage={onSetPage}\n            onPerPageSelect={onPerPageSelect}\n        />\n    </React.Fragment>;\n};\n\nSigTable.propTypes = gqlProps;\n\nexport default SigTable;\n"],"sourceRoot":""}