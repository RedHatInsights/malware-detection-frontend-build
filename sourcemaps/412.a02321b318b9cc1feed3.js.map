{"version":3,"sources":["webpack:///./src/AppEntry.js"],"names":["AppEntry","useLogger","connectToDevTools","tags","useRef","selectedWorkloads","selectedSID","globalFilterLink","setContext","_","headers","current","length","SAP","isSelected","client","useMemo","ApolloClient","link","concat","createHttpLink","uri","cache","useEffect","insights","chrome","init","identifyApp","globalFilterScope","on","data","mapGlobalFilter","workloads","SID","selectedTags","join","resetStore","locale","navigator","language","slice","messages","onError","console","log","ApolloProvider","Provider","store","logger","getStore","basename","getBaseName","window","location","pathname","propTypes","PropTypes","defaultProps"],"mappings":"m8BAgBA,IAAMA,EAAW,SAAC,GAAqC,IAAnCC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,kBACrBC,GAAOC,cACPC,GAAoBD,cACpBE,GAAcF,cAEdG,GAAmBC,QAAW,SAACC,EAAD,mBAAqB,CACrDC,QAAS,EAAF,SADyB,EAAMA,UAG9B,UAAAP,EAAKQ,eAAL,eAAcC,SAAU,CAAE,0BAAoBT,EAAKQ,YACnD,UAAAN,EAAkBM,eAAlB,eAA2BE,IAAIC,aAAc,CAAE,uBAAuB,KACtE,UAAAR,EAAYK,eAAZ,eAAqBC,SAAU,CAAE,8BAAwBN,EAAYK,eAG3EI,GAASC,cAAQ,kBAAO,IAAIC,IAAa,CAC3CC,KAAMX,EAAiBY,QAAOC,OAAe,CACzCC,IAAK,uCAETC,WACApB,qBAL0B,UAMxBC,EAAKQ,YAAY,CAACT,EAAmBK,IAkB3C,OAhBAgB,gBAAU,WAAM,MACZC,SAASC,OAAOC,OAChBF,SAASC,OAAOE,YAAY,WAC5B,UAAIH,SAASC,cAAb,OAAI,EAAiBG,mBACjBJ,SAASC,OAAOI,GAAG,wBAAwB,YAAc,QAAXC,EAAW,EAAXA,KAC1C,GACA,UAAAN,SAASC,cAAT,mBAAiBM,uBAAjB,sBAAmCD,GAAM,GAAO,KAAS,GADzD,eAAOE,EAAP,KAAkBC,EAAlB,KAAuBC,EAAvB,KAEA/B,EAAKQ,SAAWuB,aAAA,EAAAA,EAAcC,KAAK,OAAQ,GAC3C9B,EAAkBM,QAAUqB,GAAc,GAC1C1B,EAAYK,QAAUsB,GAAO,GAE7BlB,EAAOqB,kBAGhB,CAACrB,IAEG,kBAAC,KAAD,CAAcsB,OAAQC,UAAUC,SAASC,MAAM,EAAG,GAAIC,SAAUA,EAAUC,QAASC,QAAQC,KAC9F,kBAAC,EAAAC,eAAD,CAAgB9B,OAAQA,GACpB,kBAAC,EAAA+B,SAAD,CAAUC,OAAQ9C,GAAYyB,QAAKsB,MAAUtB,WAAQuB,YACjD,kBAAC,gBAAD,CAAQC,UAAUC,QAAYC,OAAOC,SAASC,WAC1C,kBAAC,IAAD,WAOpBtD,EAASuD,UAAY,CACjBtD,UAAWuD,SACXtD,kBAAmBsD,UAGvBxD,EAASyD,aAAe,CACpBxD,WAAW,EACXC,mBAAmB,GAGvB","file":"js/412.9bfbc0fb0ea78753a23f.js","sourcesContent":["/* eslint-disable no-console */\nimport { ApolloClient, ApolloProvider, createHttpLink } from '@apollo/client';\nimport React, { useEffect, useMemo, useRef } from 'react';\n\nimport App from './App';\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { cache } from './store/cache';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { init } from './store';\nimport logger from 'redux-logger';\nimport messages from '../locales/data.json';\nimport { setContext } from '@apollo/client/link/context';\n\nconst AppEntry = ({ useLogger, connectToDevTools }) => {\n    const tags = useRef();\n    const selectedWorkloads = useRef();\n    const selectedSID = useRef();\n\n    const globalFilterLink = setContext((_, { headers }) => ({\n        headers: {\n            ...headers,\n            ...(tags.current?.length && { 'insights-tags': `${tags.current}` }),\n            ...(selectedWorkloads.current?.SAP.isSelected && { 'insights-sap-system': true }),\n            ...(selectedSID.current?.length && { 'insights-sap-sids': `${selectedSID.current}` })\n        }\n    }));\n    const client = useMemo(() =>  new ApolloClient({\n        link: globalFilterLink.concat(createHttpLink({\n            uri: '/api/malware-detection/v1/graphql'\n        })),\n        cache,\n        connectToDevTools\n    }, `${tags.current}`), [connectToDevTools, globalFilterLink]);\n\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp('malware');\n        if (insights.chrome?.globalFilterScope) {\n            insights.chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n                const [workloads, SID, selectedTags] =\n                insights.chrome?.mapGlobalFilter?.(data, false, true) || [];\n                tags.current =  selectedTags?.join(',') || '';\n                selectedWorkloads.current = workloads  || {};\n                selectedSID.current = SID || [];\n\n                client.resetStore();\n            });\n        }\n    }, [client]);\n\n    return <IntlProvider locale={navigator.language.slice(0, 2)} messages={messages} onError={console.log}>\n        <ApolloProvider client={client}>\n            <Provider store={(useLogger ? init(logger) : init()).getStore()}>\n                <Router basename={getBaseName(window.location.pathname)}>\n                    <App />\n                </Router>\n            </Provider>\n        </ApolloProvider>\n    </IntlProvider>;\n};\n\nAppEntry.propTypes = {\n    useLogger: PropTypes.bool,\n    connectToDevTools: PropTypes.bool\n};\n\nAppEntry.defaultProps = {\n    useLogger: false,\n    connectToDevTools: false\n};\n\nexport default AppEntry;\n"],"sourceRoot":""}