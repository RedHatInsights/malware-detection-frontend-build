{"version":3,"sources":["webpack:///./src/Components/SigDetailsTable/SigDetailsTable.js","webpack:///./src/Routes/Signatures/Details.js"],"names":["sortIndices","orderBy","index","direction","SortByDirection","tableReducer","state","action","type","tableVars","payload","sortBy","rows","SigDetailsTable","ruleName","affectedCount","intl","useIntl","initialState","limit","offset","displayname","useReducer","stateSet","useQuery","GET_SIGNATURE_DETAILS_TABLE","variables","data","loading","error","columns","title","formatMessage","messages","cellFormatters","expandable","transforms","sortable","cellWidth","page","filterConfigItems","label","toLowerCase","filterValues","key","onChange","e","value","placeholder","field","onSetPage","onPerPageSelect","perPage","useEffect","flatMap","host","rowId","isOpen","cells","DateFormat","date","Date","lastScanDate","matchCount","toLocaleString","parent","hostData","fullWidth","rowBuilder","rulesList","affectedHostsList","PrimaryToolbar","pagination","itemCount","affectedHosts","totalCount","isCompact","filterConfig","items","Table","className","onCollapse","rowKey","collapseRows","CodeEditor","height","code","matches","map","match","source","stringOffset","stringData","stringIdentifier","scanDate","length","join","isDownloadEnabled","isCopyEnabled","onSort","isStickyHeader","Loading","MessageState","variant","icon","CheckCircleIcon","iconClass","text","SearchIcon","Pagination","widgetId","PaginationVariant","propTypes","sigId","useParams","id","breadcrumbs","name","to","isBeta","GET_SIGNATURE_DETAILS_PAGE","sigDetailsData","detailBlock","detail","PageHeader","Breadcrumb","Title","headingLevel","size","TitleSizes","Grid","hasGutter","GridItem","md","sm","rawRule","isReadOnly","span","lastMatchDate","hosts","metadata","description","StatusLabel","author","Main"],"mappings":"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","file":"js/Signature Details.9763f4900839b6ae2f59.js","sourcesContent":["import { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    expandable,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SIGNATURE_DETAILS_TABLE } from '../../operations/queries';\nimport Loading from '../Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\n\nconst sortIndices = { 1: 'DISPLAYNAME', 2: 'LAST_SCAN_DATE', 3: 'MATCH_COUNT' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n    }\n\n    return state;\n};\n\nconst SigDetailsTable = ({ ruleName, affectedCount }) => {\n    const intl = useIntl();\n    const initialState = {\n        tableVars: {\n            limit: 10,\n            offset: 0,\n            orderBy: 'LAST_SCAN_DATE_ASC',\n            displayname: '',\n            ruleName\n        },\n        sortBy: {\n            index: 2,\n            direction: SortByDirection.asc\n        },\n        rows: []\n    };\n    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data, loading, error } =\n        useQuery(GET_SIGNATURE_DETAILS_TABLE, { variables: tableVars });\n    const columns = [\n        { title: intl.formatMessage(messages.name), cellFormatters: [expandable], transforms: [sortable, cellWidth(45)] },\n        { title: intl.formatMessage(messages.lastmatch), transforms: [sortable] },\n        { title: intl.formatMessage(messages.totalMatches), transforms: [sortable] }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { displayname: value } }),\n            value: tableVars.displayname,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.name).toLowerCase() })\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const host = collapseRows[rowKey + 1].hostData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells =  [{\n            title: <CodeEditor height='250px' code={`${host.matches.map((match, key) => `Match Source: ${match.source}\nOffset:${match.stringOffset}\nMatch Data: ${match.stringData}\nMatch Identifier: ${match.stringIdentifier}\nMatch Scan Date: ${new Date(match.scanDate)}\n${host.matches.length > 1 && key !== host.matches.length - 1 ? `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n` : ''}`).join('')}`}\n            isDownloadEnabled isCopyEnabled/> }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.flatMap((data, key) => {\n            const host = data;\n            return [{\n                rowId: key,\n                isOpen: false,\n                cells: [\n                    { title: <span>{host.displayname}</span> },\n                    { title: <DateFormat date={new Date(host.lastScanDate)} type='onlyDate' /> },\n                    { title: <span>{host.matchCount?.toLocaleString()}</span> }\n\n                ]\n            }, {\n                parent: key * 2,\n                hostData: host,\n                fullWidth: true,\n                cells: []\n            }];\n        });\n\n        stateSet({ type: 'setRows', payload: rowBuilder(data?.rulesList[0]?.affectedHostsList) });\n    }, [intl, data]);\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: data?.rulesList[0]?.affectedHosts?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n        />\n        <Table className='sigTable' aria-label='Signature Details table'\n            rows={rows} cells={columns} onCollapse={onCollapse}\n            onSort={onSort} sortBy={sortBy} isStickyHeader>\n            <TableHeader />\n            <TableBody />\n        </Table>\n        {loading && <Loading type='table' />}\n        {!error && !loading && affectedCount !== 0 ?\n            data?.rulesList[0]?.affectedHosts?.totalCount === 0 ?\n                <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n                    text={intl.formatMessage(messages.noResultsMatch)} />\n                : <React.Fragment />\n            : !loading && <MessageState className='pf-c-card' variant='large' icon={CheckCircleIcon} iconClass='ins-l-success-color'\n                title={intl.formatMessage(messages.noAffectedHosts)}\n                text={intl.formatMessage(messages.noAffectedHostsBody)} />\n        }\n        {error && <MessageState className='pf-c-card' variant='large' title='Error' text='error' />}\n        <Pagination\n            itemCount={data?.rulesList[0]?.affectedHosts?.totalCount || 0}\n            widgetId='pagination-options-menu-bottom'\n            perPage={tableVars.limit}\n            page={page}\n            variant={PaginationVariant.bottom}\n            onSetPage={onSetPage}\n            onPerPageSelect={onPerPageSelect}\n        />\n    </React.Fragment>;\n};\n\nSigDetailsTable.propTypes = { ruleName: propTypes.string, affectedCount: propTypes.number };\n\nexport default SigDetailsTable;\n","import './Details.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport { Title, TitleSizes } from '@patternfly/react-core/dist/esm/components/Title';\n\nimport Breadcrumb from '../../Components/Breadcrumb/Breadcrumb';\nimport CodeEditor from '../../Components/CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SIGNATURE_DETAILS_PAGE } from '../../operations/queries';\nimport Loading from '../../Components/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport SigDetailsTable from '../../Components/SigDetailsTable/SigDetailsTable';\nimport StatusLabel from '../../Components/StatusLabel/StatusLabel';\nimport { isBeta } from '../../Components/Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nconst Details = () => {\n    const intl = useIntl();\n    const { id: sigId } = useParams();\n    const breadcrumbs = [{ name: intl.formatMessage(messages.malwareDetection),\n        to: `${isBeta()}/insights/malware` }, { name: sigId, to: '#' }];\n    const { data, loading } = useQuery(GET_SIGNATURE_DETAILS_PAGE, {\n        variables: { ruleName: sigId  }\n    });\n    const sigDetailsData = data?.rulesList[0];\n    const detailBlock = (title, detail) => <React.Fragment>\n        <p className='ins-l-detailBlockHeader'>{title}</p>\n        <p>{detail}</p>\n    </React.Fragment>;\n\n    return <React.Fragment>\n        <PageHeader>\n            <Breadcrumb items={breadcrumbs} />\n            <Title headingLevel='h1' size={TitleSizes['3xl']}>{sigId}</Title>\n            <Grid hasGutter>\n                <GridItem md={7} sm={12}>\n                    { sigDetailsData && <CodeEditor height='250px' code={sigDetailsData.rawRule} isReadOnly isDownloadEnabled isCopyEnabled />}\n                </GridItem>\n                {loading ? <Loading /> :\n                    <GridItem md={5} sm={12}>\n                        <Grid hasGutter>\n                            <GridItem span={6}>\n                                {detailBlock(intl.formatMessage(messages.lastmatch), sigDetailsData?.lastMatchDate ?\n                                    <DateFormat date={new Date(sigDetailsData.lastMatchDate)} type=\"onlyDate\" />\n                                    : intl.formatMessage(messages.never))}\n                            </GridItem>\n                            <GridItem span={6}>\n                                {detailBlock(intl.formatMessage(messages.hostmatch),\n                                    <span>{`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}</span>)}\n                            </GridItem>\n                            <GridItem span={12}>\n                                {detailBlock(intl.formatMessage(messages.description), sigDetailsData?.metadata?.description)}\n                            </GridItem>\n                            <GridItem span={6}>\n                                {detailBlock(intl.formatMessage(messages.status), sigDetailsData && <StatusLabel {...sigDetailsData} />)}\n                            </GridItem>\n                            <GridItem span={6}>\n                                {detailBlock(intl.formatMessage(messages.author), sigDetailsData?.metadata?.author)}\n                            </GridItem>\n                        </Grid>\n                    </GridItem>}\n            </Grid>\n        </PageHeader>\n        <Main>\n            <Title className='ins-l-tableBlockHeader' headingLevel='h1' size={TitleSizes['3xl']}>\n                {intl.formatMessage(messages.affectedHosts)}\n            </Title>\n            <SigDetailsTable ruleName={sigId} affectedCount={sigDetailsData?.affectedHosts?.totalCount}/>\n        </Main>\n    </React.Fragment>;\n};\n\nexport default Details;\n"],"sourceRoot":""}