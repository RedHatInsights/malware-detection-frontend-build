{"version":3,"file":"js/Signature Details.1692741578161.98f98d99d49428d381aa.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumb/Breadcrumb.js","webpack:///./src/Components/CodeEditor/CodeEditor.js","webpack:///./src/Components/MessageState/MessageState.js","webpack:///./src/Components/SharedComponents/EmptyAccount.js","webpack:///./src/Components/SigDetailsTable/SigDetailsTable.js","webpack:///./src/Routes/Signatures/Details.js"],"sourcesContent":["import { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/index';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst BreadcrumbComponent = ({ items }) => {\n    const last = items.pop();\n    return <Breadcrumb>\n        {items.map((value, key) => <BreadcrumbItem key={key} to={value.to}>{value.name}</BreadcrumbItem>)}\n        <BreadcrumbItem isActive>{last.name}</BreadcrumbItem>\n    </Breadcrumb>;\n};\n\nBreadcrumbComponent.propTypes = {\n    items: PropTypes.array\n};\n\nexport default BreadcrumbComponent;\n","import { LockIcon } from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport MessageState from '../MessageState/MessageState';\nimport { CodeEditor as PfCodeEditor } from '@patternfly/react-code-editor';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst CodeEditor = ({ code, language, isReadOnly, isDownloadEnabled, isCopyEnabled, height = '400px' }) => {\n    const intl = useIntl();\n\n    return <PfCodeEditor\n        isDownloadEnabled={isDownloadEnabled}\n        isCopyEnabled={isCopyEnabled}\n        isReadOnly={isReadOnly}\n        isLanguageLabelVisible={language}\n        code={code}\n        language={language}\n        emptyState={\n            <MessageState className='' icon={LockIcon} variant='small' title={intl.formatMessage(messages.sigCompiled)}\n                text={intl.formatMessage(messages.sigCompiledBody)} />\n        }\n        height={height}\n    />;\n};\n\nCodeEditor.propTypes = {\n    code: PropTypes.any,\n    language: PropTypes.string,\n    isReadOnly: PropTypes.bool,\n    isCopyEnabled: PropTypes.bool,\n    isDownloadEnabled: PropTypes.bool,\n    height: PropTypes.string\n};\n\nCodeEditor.defaultProps = { codeType: 'Code' };\n\nexport default CodeEditor;\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant } from '@patternfly/react-core/dist/esm/components/EmptyState/index';\n\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\n\nconst MessageState = ({ className, children, icon, iconClass, iconStyle, text, title, variant }) =>\n    <EmptyState className={className} variant={variant}>\n        {icon !== 'none' && <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />}\n        <Title headingLevel='h5' size='lg'>\n            {title}\n        </Title>\n        <EmptyStateBody style={{ marginBottom: '16px' }}>\n            {text}\n        </EmptyStateBody>\n        {children}\n    </EmptyState>;\n\nMessageState.propTypes = {\n    children: PropTypes.any,\n    icon: PropTypes.any,\n    iconClass: PropTypes.any,\n    iconStyle: PropTypes.any,\n    text: PropTypes.any,\n    title: PropTypes.string,\n    variant: PropTypes.any,\n    className: PropTypes.string\n};\n\nMessageState.defaultProps = {\n    icon: CubesIcon,\n    title: '',\n    variant: EmptyStateVariant.full\n};\n\nexport default MessageState;\n","import React from 'react';\nimport {\n    Title,\n    Button,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateBody\n} from '@patternfly/react-core';\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\n\nconst EmptyAccount = ({ message, className }) => {\n    const intl = useIntl();\n    return (\n        <EmptyState className={className} variant='large'>\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                {intl.formatMessage(messages.emptyAccountTitle)}\n            </Title>\n            <EmptyStateBody>\n                {message}\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href={'https://access.redhat.com/documentation/en-us/red_hat_insights/2023/html/' +\n                'assessing_and_reporting_malware_signatures_on_rhel_systems_with_the_insights_for' +\n                '_rhel_malware_service/'}\n                target=\"_blank\" >\n                {intl.formatMessage(messages.emptyAccountButton)}\n            </Button>\n        </EmptyState>\n    );\n};\n\nEmptyAccount.propTypes = {\n    message: propTypes.string,\n    className: propTypes.string\n};\n\nexport default EmptyAccount;\n","import { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    expandable,\n    sortable,\n    info,\n    classNames\n} from '@patternfly/react-table/dist/esm/components/Table';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { expandMatchMetadata } from '../Common';\nimport { GET_SIGNATURE_DETAILS_TABLE } from '../../operations/queries';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport EmptyAccount from '../SharedComponents/EmptyAccount';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\n\nconst sortIndices = { 1: 'DISPLAY_NAME', 2: 'LAST_SCAN_DATE', 3: 'MATCH_COUNT' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n    }\n\n    return state;\n};\n\nconst SigDetailsTable = ({ ruleName, affectedCount, isEmptyAccount }) => {\n    const intl = useIntl();\n    const initialState = {\n        tableVars: {\n            limit: 10,\n            offset: 0,\n            orderBy: 'LAST_SCAN_DATE_ASC',\n            displayName: '',\n            ruleName\n        },\n        sortBy: {\n            index: 2,\n            direction: SortByDirection.asc\n        },\n        rows: []\n    };\n    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data, loading, error } =\n        useQuery(GET_SIGNATURE_DETAILS_TABLE, { variables: tableVars });\n    const columns = [\n        { title: intl.formatMessage(messages.name), cellFormatters: [expandable], transforms: [sortable, cellWidth(45)] },\n        { title: intl.formatMessage(messages.matched), transforms: [sortable] },\n        {\n            title: intl.formatMessage(messages.totalMatches),\n            transforms: [\n                info({\n                    tooltip: intl.formatMessage(messages.totalMatchesNote)\n                }),\n                sortable\n            ]\n        }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { displayName: value, offset: 0 } }),\n            value: tableVars.displayName,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.name).toLowerCase() })\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const host = collapseRows[rowKey + 1].hostData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells = [{\n            title: <CodeEditor height='250px' code={`${host.matches.map((match, key) => `Match Source: ${match.source}\nOffset:${match.stringOffset}\nMatch Data: ${match.stringData}\nMatch Identifier: ${match.stringIdentifier}\nMatch Scan Date: ${new Date(match.scanDate).toUTCString()}\n${match.metadata ? expandMatchMetadata(JSON.parse(match.metadata)) : ''}\n${host.matches.length > 1 && key !== host.matches.length - 1 ? `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n` : ''}`).join('')}`}\n            isDownloadEnabled isCopyEnabled />\n        }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.flatMap((data, key) => {\n            const host = data;\n            return [{\n                rowId: key,\n                isOpen: false,\n                cells: [\n                    { title: <InsightsLink to={`/systems/${host.id}`}>{host.displayName}</InsightsLink> },\n                    { title: <DateFormat date={new Date(host.lastScanDate)} type='onlyDate' /> },\n                    { title: <InsightsLink to={`/systems/${host.id}`}>{host.matchCount?.toLocaleString()}</InsightsLink> }\n\n                ]\n            }, {\n                parent: key * 2,\n                hostData: host,\n                fullWidth: true,\n                cells: []\n            }];\n        });\n\n        stateSet({ type: 'setRows', payload: rowBuilder(data?.rulesList[0]?.affectedHostsList) });\n    }, [intl, data]);\n\n    const NoResultsMatch = (\n        <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n            text={intl.formatMessage(messages.noResultsMatch)} />\n    );\n\n    const NoAffectedHosts = (\n        <MessageState className='pf-c-card' variant='large' icon={CheckCircleIcon} iconClass='ins-l-success-color'\n            title={intl.formatMessage(messages.noAffectedHosts)}\n            text={intl.formatMessage(messages.noAffectedHostsBody)} />\n    );\n\n    const EmptyAccountState = (\n        <EmptyAccount className='pf-c-card' message={intl.formatMessage(messages.emptyAccountTableBody)} />\n    );\n\n    const ErrorState = (\n        <MessageState className='pf-c-card' variant='large' title='Error' text='error' />\n    );\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: data?.rulesList[0]?.affectedHosts?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n        />\n        {loading\n            ? <SkeletonTable\n                columns={[{ title: '', columnTransforms: [classNames('skeleton-expandable-column')] }, ...columns]}\n                rowSize={tableVars.limit}\n                sortBy={sortBy}\n            />\n            : <Table\n                className='sigTable'\n                aria-label='Signature Details table'\n                rows={rows}\n                cells={columns}\n                onCollapse={onCollapse}\n                onSort={onSort}\n                sortBy={data?.rulesList[0]?.affectedHosts?.totalCount > 0 ? sortBy : undefined}\n                isStickyHeader\n            >\n                <TableHeader />\n                <TableBody />\n            </Table>}\n\n        {\n            (!error && !loading && affectedCount !== 0)\n                ? (data?.rulesList[0]?.affectedHosts?.totalCount === 0)\n                    ? NoResultsMatch : <React.Fragment />\n                : (!loading &&\n                    (isEmptyAccount ? EmptyAccountState : NoAffectedHosts)\n                )\n        }\n        {error && <ErrorState />}\n        <Pagination\n            itemCount={data?.rulesList[0]?.affectedHosts?.totalCount || 0}\n            widgetId='pagination-options-menu-bottom'\n            perPage={tableVars.limit}\n            page={page}\n            variant={PaginationVariant.bottom}\n            onSetPage={onSetPage}\n            onPerPageSelect={onPerPageSelect}\n        />\n    </React.Fragment>;\n};\n\nSigDetailsTable.propTypes = {\n    ruleName: propTypes.string,\n    affectedCount: propTypes.number,\n    isEmptyAccount: propTypes.bool\n};\n\nexport default SigDetailsTable;\n","import './Details.scss';\n\nimport { Grid, GridItem, Label } from '@patternfly/react-core';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { ExternalLinkAltIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title';\nimport Breadcrumb from '../../Components/Breadcrumb/Breadcrumb';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SIGNATURE_DETAILS_PAGE } from '../../operations/queries';\nimport Loading from '../../Components/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { useEffect } from 'react';\nimport SigDetailsTable from '../../Components/SigDetailsTable/SigDetailsTable';\nimport { isBeta } from '../../Components/Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst Details = () => {\n    const intl = useIntl();\n    const { id: sigId } = useParams();\n    const breadcrumbs = [{\n        name: intl.formatMessage(messages.malwareDetectionSignatures),\n        to: `${isBeta()}/insights/malware`\n    }, { name: sigId, to: '#' }];\n    const { data, loading } = useQuery(GET_SIGNATURE_DETAILS_PAGE, {\n        variables: { ruleName: sigId }\n    });\n    const sigDetailsData = data?.rulesList[0];\n    const sigMetadata = sigDetailsData?.metadata;\n    const isMatched = sigDetailsData?.affectedHosts?.totalCount > 0;\n    const references = sigMetadata?.references || [];\n    const xfti_references = sigMetadata?.xfti_references || [];\n    const dataNotAvailable = intl.formatMessage(messages.dataNotAvailable);\n    const detailBlock = (title, detail) => <React.Fragment>\n        <p className='ins-l-detailBlockHeader'>{title}</p>\n        <p>{detail || dataNotAvailable}</p>\n    </React.Fragment>;\n    const referenceLink = (referenceLink, referenceName) => <React.Fragment>\n        <a className='ins-l-referenceLink' rel=\"noopener noreferrer\" target=\"_blank\" href={referenceLink}>{referenceName} <ExternalLinkAltIcon /></a>\n    </React.Fragment>;\n    const chrome = useChrome();\n    useEffect(() => {\n        chrome.updateDocumentTitle(`${sigId} - Signatures - Malware | Red Hat Insights`);\n    }, [chrome, sigId]);\n\n    const matchedSystemsCount = () => {\n        return isMatched ? <React.Fragment>\n            <ExclamationCircleIcon color='var(--pf-global--danger-color--100)' />&nbsp;\n            <span style={{ color: 'var(--pf-global--danger-color--200)', fontWeight: 'bold' }}>\n                {`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}\n            </span>\n        </React.Fragment>\n            :\n            <span>{`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}</span>;\n    };\n\n    return <React.Fragment>\n        <PageHeader>\n            <Breadcrumb items={breadcrumbs} />\n            <Grid hasGutter>\n                <GridItem md={12} sm={12}>\n                    <PageHeaderTitle\n                        title={\n                            <span>\n                                {sigId}&nbsp;\n                                {sigMetadata?.threat_type &&\n                                    <Label variant=\"outline\" color=\"blue\">{sigMetadata.threat_type}</Label>\n                                }&nbsp;\n                                {isMatched &&\n                                    <Label variant=\"filled\" color=\"red\">Matched</Label>\n                                }\n                            </span>\n                        }\n                    />\n                </GridItem>\n\n                {loading ? <Loading /> :\n                    <GridItem>\n                        <Grid hasGutter>\n                            <GridItem xl2={7} md={8} sm={12}>\n                                <p className='ins-l-detailBlockHeader'>{intl.formatMessage(messages.description)}</p>\n                                <Truncate\n                                    text={sigMetadata?.description}\n                                    length={200}\n                                    inline\n                                />\n                            </GridItem>\n                            <GridItem xl2={5} md={4} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.matchedSystems), matchedSystemsCount())}\n                            </GridItem>\n                            <GridItem lg={2} md={3} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.ruleCategory), sigMetadata?.rule_category)}\n                            </GridItem>\n                            <GridItem xl2={5} lg={6} md={5} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.ruleIntendedUsage), sigMetadata?.usage)}\n                            </GridItem>\n                            <GridItem xl2={5} md={4} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.lastmatch), sigDetailsData?.lastMatchDate ?\n                                    <DateFormat date={new Date(sigDetailsData.lastMatchDate)} type=\"onlyDate\" />\n                                    : intl.formatMessage(messages.never))}\n                            </GridItem>\n                            <GridItem xl2={7} md={8} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.author), sigMetadata?.author)}\n                            </GridItem>\n                            {(references.length > 0 || xfti_references.length > 0) &&\n                                <GridItem xl2={7} md={8} sm={12}>\n                                    {xfti_references.length === 1 ?\n                                        referenceLink(xfti_references[0], intl.formatMessage(messages.ruleAuthorReference))\n                                        :\n                                        xfti_references.map((ref, i) => referenceLink(ref,\n                                            `${intl.formatMessage(messages.ruleAuthorReference)} [${i + 1}] `))}\n                                    {references.length === 1 ?\n                                        referenceLink(references[0], intl.formatMessage(messages.ruleBackgroundReference))\n                                        :\n                                        references.map((ref, i) => referenceLink(ref,\n                                            `${intl.formatMessage(messages.ruleBackgroundReference)} [${i + 1}] `))}\n                                </GridItem>\n                            }\n                        </Grid>\n                    </GridItem>\n                }\n            </Grid>\n        </PageHeader>\n        <Main>\n            <Title className='ins-l-tableBlockHeader' headingLevel='h2'>\n                {intl.formatMessage(messages.affectedHosts)}\n            </Title>\n            <SigDetailsTable\n                ruleName={sigId}\n                isEmptyAccount={data?.hosts?.totalCount === 0}\n                affectedCount={sigDetailsData?.affectedHosts?.totalCount}\n            />\n        </Main>\n    </React.Fragment>;\n};\n\nexport default Details;\n"],"names":["BreadcrumbComponent","items","last","pop","Breadcrumb","map","value","key","BreadcrumbItem","to","name","isActive","propTypes","PropTypes","CodeEditor","code","language","isReadOnly","isDownloadEnabled","isCopyEnabled","height","intl","useIntl","isLanguageLabelVisible","emptyState","className","icon","LockIcon","variant","title","formatMessage","messages","text","defaultProps","codeType","MessageState","children","iconClass","iconStyle","style","headingLevel","size","marginBottom","CubesIcon","EmptyStateVariant","EmptyAccount","message","WrenchIcon","Title","Button","component","href","target","sortIndices","orderBy","index","direction","SortByDirection","tableReducer","state","action","type","tableVars","payload","sortBy","rows","SigDetailsTable","ruleName","affectedCount","isEmptyAccount","initialState","limit","offset","displayName","useReducer","stateSet","useQuery","GET_SIGNATURE_DETAILS_TABLE","variables","data","loading","error","columns","cellFormatters","expandable","transforms","sortable","cellWidth","info","tooltip","page","filterConfigItems","label","toLowerCase","filterValues","onChange","e","placeholder","field","onSetPage","onPerPageSelect","perPage","useEffect","flatMap","host","rowId","isOpen","cells","InsightsLink","id","DateFormat","date","Date","lastScanDate","matchCount","toLocaleString","parent","hostData","fullWidth","rowBuilder","rulesList","affectedHostsList","NoResultsMatch","SearchIcon","NoAffectedHosts","CheckCircleIcon","EmptyAccountState","ErrorState","PrimaryToolbar","pagination","itemCount","affectedHosts","totalCount","isCompact","filterConfig","SkeletonTable","columnTransforms","classNames","rowSize","Table","onCollapse","rowKey","collapseRows","matches","match","source","stringOffset","stringData","stringIdentifier","scanDate","toUTCString","metadata","expandMatchMetadata","JSON","parse","length","join","onSort","undefined","isStickyHeader","Pagination","widgetId","PaginationVariant","sigId","useParams","breadcrumbs","isBeta","GET_SIGNATURE_DETAILS_PAGE","sigDetailsData","sigMetadata","isMatched","references","xfti_references","dataNotAvailable","detailBlock","detail","referenceLink","referenceName","rel","chrome","useChrome","updateDocumentTitle","PageHeader","Grid","hasGutter","GridItem","md","sm","PageHeaderTitle","threat_type","Label","color","Loading","xl2","Truncate","description","inline","fontWeight","hosts","lg","rule_category","usage","lastMatchDate","author","ref","i","Main"],"sourceRoot":""}