{"version":3,"file":"js/SigTable.405ad3fc1bda86f7a1c9.js","mappings":"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","sources":["webpack:///./src/Components/SigTable/SigTable.js","webpack:///./src/Components/SysTable/SysTable.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport './SigTable.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination/index';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    expandable,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table/index';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { gqlProps, totalMatchesTitle } from '../Common';\n\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SIGNATURE_TABLE } from '../../operations/queries';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../Components/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport StatusLabel from '../StatusLabel/StatusLabel';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport messages from '../../Messages';\nimport { sigTableFilters } from '../../store/cache';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport { useReactiveVar } from '@apollo/client';\n\nconst initialState = {\n    tableVars: {\n        limit: 10,\n        offset: 0,\n        orderBy: 'LAST_MATCH_DATE_DESC',\n        ruleName: ''\n    },\n    sortBy: {\n        index: 4,\n        direction: SortByDirection.desc\n    },\n    rows: []\n};\nconst sortIndices = { 1: 'NAME', 2: 'HAS_MATCH', 3: 'IS_DISABLED', 4: 'HOST_COUNT', 5: 'LAST_MATCH_DATE' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n    }\n\n    return state;\n};\n\nconst SigTable = () => {\n    const intl = useIntl();\n    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data: sigTableData, loading: sigTableLoading, error: sigTableError } =\n        useQuery(GET_SIGNATURE_TABLE, { variables: { ...tableVars, ...useReactiveVar(sigTableFilters) } });\n    const columns = [\n        { title: intl.formatMessage(messages.sigName), cellFormatters: [expandable], transforms: [cellWidth(45), sortable] },\n        { title: intl.formatMessage(messages.lastStatus), transforms: [cellWidth(10), sortable] },\n        { title: intl.formatMessage(messages.enablement), transforms: [cellWidth(10), sortable] },\n        { title: intl.formatMessage(messages.systems), transforms: [cellWidth(10), sortable] },\n        { title: intl.formatMessage(messages.matched), transforms: [cellWidth(10), sortable] }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const sig = collapseRows[rowKey + 1].sigData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells = [{\n            title: <Grid hasGutter>\n                <GridItem span={6}>\n                    <CodeEditor code={sig.rawRule} isReadOnly />\n                </GridItem>\n                <GridItem span={6}> <Text className='ins-l-sigtable--title' component={TextVariants.h6}>\n                    {intl.formatMessage(messages.description)}\n                </Text>{sig.metadata.description}\n                </GridItem>\n            </Grid>\n        }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    const FILTER_CATEGORIES = {\n        sig_match: {\n            type: 'radio', title: intl.formatMessage(messages.status), urlParam: 'sig_match', values: [\n                { label: intl.formatMessage(messages.all), value: 'all' },\n                { label: intl.formatMessage(messages.matched), value: 'true' },\n                { label: intl.formatMessage(messages.notMatched), value: 'false' }\n            ]\n        }\n    };\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.signature).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { ruleName: value } }),\n            value: tableVars.ruleName,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.signature).toLowerCase() })\n        }\n    }, {\n        label: FILTER_CATEGORIES.sig_match.title.toLowerCase(),\n        type: FILTER_CATEGORIES.sig_match.type,\n        id: FILTER_CATEGORIES.sig_match.urlParam,\n        value: `radio-${FILTER_CATEGORIES.sig_match.urlParam}`,\n        filterValues: {\n            key: `${FILTER_CATEGORIES.sig_match.urlParam}-filter`,\n            onChange: (e, value) => {\n                const tableFilters = sigTableFilters();\n                value === 'all' && delete tableFilters?.condition;\n                value === 'all' ? sigTableFilters({ ...tableFilters }) :\n                    sigTableFilters({ ...tableFilters, condition: { hasMatch: JSON.parse(value) } });\n            },\n            value: JSON.stringify(sigTableFilters().condition?.hasMatch) || 'all',\n            items: FILTER_CATEGORIES.sig_match.values\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const buildFilterChips = () => {\n        const chips = [];\n        const hasMatch = sigTableFilters().condition?.hasMatch !== undefined && (sigTableFilters().condition?.hasMatch ?\n            intl.formatMessage(messages.matched) : intl.formatMessage(messages.notMatched));\n        tableVars?.ruleName &&\n        chips.push({ category: intl.formatMessage(messages.signature), value: 'name',\n            chips: [{ name: tableVars?.ruleName, value: tableVars?.ruleName }] });\n        hasMatch && chips.push({ category: intl.formatMessage(messages.status), value: 'matched', chips: [{ name: hasMatch, value: hasMatch }] });\n        return chips;\n    };\n\n    const activeFiltersConfig = {\n        deleteTitle: intl.formatMessage(messages.resetFilters),\n        filters: buildFilterChips(),\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                sigTableFilters({});\n                stateSet({ type: 'setTableVars', payload: { ruleName: '' } });\n            } else {\n                itemsToRemove.map((item) => {\n                    item.value === 'name' && stateSet({ type: 'setTableVars', payload: { ruleName: '' } });\n                    item.value === 'matched' && sigTableFilters({});\n                });\n            }\n        }\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.rulesList?.flatMap((data, key) => {\n            const sig = data;\n            return [{\n                rowId: key,\n                isOpen: false,\n                cells: [\n                    { title: <Link to={`/signatures/${sig.name}`}>{sig.name}</Link> },\n                    { title: <StatusLabel isDisabled={sig.isDisabled} hasMatch={sig.hasMatch} displayMatch /> },\n                    { title: <StatusLabel isDisabled={sig.isDisabled} hasMatch={sig.hasMatch} /> },\n                    { title: <Link to={`/signatures/${sig.name}`}>{sig.hostCount?.toLocaleString()}</Link> },\n                    {\n                        title: sig.lastMatchDate ?\n                            <Tooltip content={<DateFormat date={new Date(sig.lastMatchDate)} type='exact' />}>\n                                <span><DateFormat date={new Date(sig.lastMatchDate)} type='onlyDate' /></span>\n                            </Tooltip>\n                            : <Tooltip content={intl.formatMessage(messages.noHostHas)}>\n                                <span>{intl.formatMessage(messages.never)}</span>\n                            </Tooltip>\n                    }\n                ]\n            }, {\n                parent: key * 2,\n                sigData: sig,\n                fullWidth: true,\n                cells: []\n            }];\n        });\n\n        stateSet({ type: 'setRows', payload: rowBuilder(sigTableData) });\n    }, [intl, sigTableData]);\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: sigTableData?.rules?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        <Table className='sigTable' aria-label='Signature table'\n            onCollapse={onCollapse}\n            rows={rows} cells={columns}\n            onSort={onSort} sortBy={sortBy} isStickyHeader>\n            <TableHeader />\n            <TableBody />\n        </Table>\n        {sigTableLoading && <Loading type='table' />}\n        {!sigTableLoading && !sigTableError && sigTableData?.rules?.totalCount === 0 &&\n            <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n                text={intl.formatMessage(messages.noResultsMatch)} />}\n        {sigTableError && <MessageState className='pf-c-card' variant='large' title='Error' text='error' />}\n        <Pagination\n            itemCount={sigTableData?.rules?.totalCount || 0}\n            widgetId='pagination-options-menu-bottom'\n            perPage={tableVars.limit}\n            page={page}\n            variant={PaginationVariant.bottom}\n            onSetPage={onSetPage}\n            onPerPageSelect={onPerPageSelect}\n        />\n    </React.Fragment>;\n};\n\nSigTable.propTypes = gqlProps;\n\nexport default SigTable;\n","/* eslint-disable no-unused-vars */\nimport './SysTable.scss';\n\nimport { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination/index';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table/index';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SYSTEM_TABLE } from '../../operations/queries';\nimport { Link } from 'react-router-dom';\nimport Loading from '../Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport StatusLabel from '../StatusLabel/StatusLabel';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport { gqlProps } from '../Common';\nimport messages from '../../Messages';\nimport { sysTableFilters } from '../../store/cache';\nimport { totalMatchesTitle } from '../Common';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport { useReactiveVar } from '@apollo/client';\n\nconst initialState = {\n    tableVars: {\n        limit: 10,\n        offset: 0,\n        orderBy: 'UPDATED_DESC',\n        name: ''\n    },\n    sortBy: {\n        index: 4,\n        direction: SortByDirection.desc\n    },\n    rows: []\n};\nconst sortIndices = { 0: 'DISPLAY_NAME', 1: 'HAS_MATCH', 2: 'LAST_MATCH_DATE', 3: 'TOTAL_MATCHES', 4: 'UPDATED' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n    }\n\n    return state;\n};\n\nconst SysTable = () => {\n    const intl = useIntl();\n    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data: sysTableData, loading: sysTableLoading, error: sysTableError } =\n        useQuery(GET_SYSTEM_TABLE, { variables: { ...tableVars, ...useReactiveVar(sysTableFilters) } });\n    const columns = [\n        { title: intl.formatMessage(messages.name), transforms: [cellWidth(45), sortable] },\n        { title: intl.formatMessage(messages.lastStatus), transforms: [sortable, cellWidth(10)] },\n        { title: intl.formatMessage(messages.matched), transforms: [sortable, cellWidth(10)] },\n        { title: <span>{totalMatchesTitle({ tooltip: intl.formatMessage(messages.totalMatchesNote),\n            title: intl.formatMessage(messages.totalMatches) })}</span>, transforms: [sortable, cellWidth(15)] },\n        { title: intl.formatMessage(messages.lastScan), transforms: [sortable, cellWidth(10)] }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { name: value } }),\n            value: tableVars.name,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.name).toLowerCase() })\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const buildFilterChips = () => {\n        const chips = [];\n        const hasMatch = sysTableFilters().condition?.hasMatch !== undefined && (sysTableFilters().condition?.hasMatch ?\n            intl.formatMessage(messages.matched) : intl.formatMessage(messages.notMatched));\n        tableVars?.name &&\n        chips.push({ category: intl.formatMessage(messages.name), value: 'name',\n            chips: [{ name: tableVars?.name, value: tableVars?.name }] });\n        hasMatch && chips.push({ category: intl.formatMessage(messages.status), value: 'matched', chips: [{ name: hasMatch, value: hasMatch }] });\n        return chips;\n    };\n\n    const activeFiltersConfig = {\n        deleteTitle: intl.formatMessage(messages.resetFilters),\n        filters: buildFilterChips(),\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                sysTableFilters({});\n                stateSet({ type: 'setTableVars', payload: { name: '' } });\n            } else {\n                itemsToRemove.map((item) => {\n                    item.value === 'name' && stateSet({ type: 'setTableVars', payload: { name: '' } });\n                    item.value === 'matched' && sysTableFilters({});\n                });\n            }\n        }\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.hostsList?.flatMap((data, key) => ({\n            rowId: key,\n            cells: [\n                { title: <Link to={`/systems/${data.displayName}`}>{data.displayName}</Link> },\n                { title: <StatusLabel isDisabled={data.isDisabled} hasMatch={data.hasMatch} displayMatch /> },\n                {\n                    title: data.lastMatchDate ?\n                        <Tooltip content={<DateFormat date={new Date(data.lastMatchDate)} type='exact' />}>\n                            <span><DateFormat date={new Date(data.lastMatchDate)} type='onlyDate' /></span>\n                        </Tooltip>\n                        : <Tooltip content={intl.formatMessage(messages.noHostHas)}>\n                            <span>{intl.formatMessage(messages.never)}</span>\n                        </Tooltip>\n                },\n                { title: <Link to={`/systems/${data.displayName}`}>{data.totalMatches?.toLocaleString()}</Link> },\n                { title: <Tooltip content={<DateFormat date={new Date(data.updated)} type='exact' />}>\n                    <span><DateFormat date={new Date(data.updated)} /></span>\n                </Tooltip> }\n\n            ]\n        }));\n\n        stateSet({ type: 'setRows', payload: rowBuilder(sysTableData) });\n    }, [intl, sysTableData]);\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: sysTableData?.hosts?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        <Table className='sysTable' aria-label='System table'\n            rows={rows} cells={columns}\n            onSort={onSort} sortBy={sortBy} isStickyHeader>\n            <TableHeader />\n            <TableBody />\n        </Table>\n        {sysTableLoading && <Loading type='table' />}\n        {!sysTableLoading && !sysTableError && sysTableData?.hosts?.totalCount === 0 &&\n            <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n                text={intl.formatMessage(messages.noResultsMatch)} />}\n        {sysTableError && <MessageState className='pf-c-card' variant='large' title='Error' text='error' />}\n        <Pagination\n            itemCount={sysTableData?.hosts?.totalCount || 0}\n            widgetId='pagination-options-menu-bottom'\n            perPage={tableVars.limit}\n            page={page}\n            variant={PaginationVariant.bottom}\n            onSetPage={onSetPage}\n            onPerPageSelect={onPerPageSelect}\n        />\n    </React.Fragment>;\n};\n\nSysTable.propTypes = gqlProps;\n\nexport default SysTable;\n"],"names":["initialState","tableVars","limit","offset","orderBy","ruleName","sortBy","index","direction","SortByDirection","rows","sortIndices","tableReducer","state","action","type","payload","SigTable","chips","hasMatch","intl","useIntl","useReducer","stateSet","useQuery","GET_SIGNATURE_TABLE","variables","useReactiveVar","sigTableFilters","sigTableData","data","sigTableLoading","loading","sigTableError","error","columns","title","formatMessage","messages","cellFormatters","expandable","transforms","cellWidth","sortable","page","FILTER_CATEGORIES","sig_match","urlParam","values","label","value","filterConfigItems","toLowerCase","filterValues","key","onChange","e","placeholder","field","id","tableFilters","condition","JSON","parse","stringify","items","onSetPage","onPerPageSelect","perPage","activeFiltersConfig","deleteTitle","filters","undefined","push","category","name","onDelete","event","itemsToRemove","isAll","map","item","useEffect","rulesList","flatMap","sig","rowId","isOpen","cells","Link","to","isDisabled","displayMatch","hostCount","toLocaleString","lastMatchDate","content","date","Date","parent","sigData","fullWidth","pagination","itemCount","rules","totalCount","isCompact","filterConfig","className","onCollapse","rowKey","collapseRows","hasGutter","span","code","rawRule","isReadOnly","component","TextVariants","metadata","description","onSort","isStickyHeader","icon","SearchIcon","variant","text","widgetId","PaginationVariant","propTypes","gqlProps","SysTable","GET_SYSTEM_TABLE","sysTableFilters","sysTableData","sysTableLoading","sysTableError","totalMatchesTitle","tooltip","hostsList","displayName","totalMatches","updated","hosts"],"sourceRoot":""}