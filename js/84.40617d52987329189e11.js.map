{"version":3,"sources":["webpack://malware-detection-frontend/./src/Components/CodeEditor/CodeEditor.js","webpack://malware-detection-frontend/./src/Components/StatusLabel/StatusLabel.js"],"names":["CodeEditor","code","language","isReadOnly","isDownloadEnabled","isCopyEnabled","intl","useIntl","isLineNumbersVisible","isLanguageLabelVisible","emptyState","className","icon","LockIcon","variant","title","formatMessage","messages","text","height","propTypes","PropTypes","defaultProps","codeType","StatusLabel","isDisabled","hasMatch","color"],"mappings":"0PAQMA,EAAa,SAAC,GAA8E,IAA5EC,EAA4E,EAA5EA,KAA4E,IAAtEC,gBAAsE,MAA3D,OAA2D,EAAnDC,EAAmD,EAAnDA,WAAYC,EAAuC,EAAvCA,kBAAmBC,EAAoB,EAApBA,cACpEC,GAAOC,SAEb,OAAO,kBAAC,IAAD,CACHH,kBAAmBA,EACnBC,cAAeA,EACfG,sBAAoB,EACpBL,WAAYA,EACZM,wBAAsB,EACtBR,KAAMA,EACNC,SAAUA,EACVQ,WACI,kBAAC,IAAD,CAAcC,UAAU,GAAGC,KAAMC,KAAUC,QAAQ,QAAQC,MAAOT,EAAKU,cAAcC,iBACjFC,KAAMZ,EAAKU,cAAcC,uBAEjCE,OAAO,WAIfnB,EAAWoB,UAAY,CACnBnB,KAAMoB,QACNnB,SAAUmB,WACVlB,WAAYkB,SACZhB,cAAegB,SACfjB,kBAAmBiB,UAGvBrB,EAAWsB,aAAe,CAAEC,SAAU,QAEtC,W,2HC/BMC,EAAc,SAAC,GAA6B,IAA3BC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACzBpB,GAAOC,SACb,OAAO,kBAAC,aAAD,KACFkB,IAAeC,GAAY,kBAAC,IAAD,KAAQpB,EAAKU,cAAcC,gBACrDQ,IAAeC,GAAY,kBAAC,IAAD,CAAOC,MAAM,QAAQrB,EAAKU,cAAcC,cACpES,GAAY,kBAAC,IAAD,CAAOC,MAAM,OAAOrB,EAAKU,cAAcC,gBAI5DO,EAAYJ,UAAY,CACpBK,WAAYJ,SACZK,SAAUL,UAEd","file":"js/84.40617d52987329189e11.js","sourcesContent":["import { LockIcon } from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport MessageState from '../MessageState/MessageState';\nimport { CodeEditor as PfCodeEditor } from '@patternfly/react-code-editor';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst CodeEditor = ({ code, language = 'text', isReadOnly, isDownloadEnabled, isCopyEnabled }) => {\n    const intl = useIntl();\n\n    return <PfCodeEditor\n        isDownloadEnabled={isDownloadEnabled}\n        isCopyEnabled={isCopyEnabled}\n        isLineNumbersVisible\n        isReadOnly={isReadOnly}\n        isLanguageLabelVisible\n        code={code}\n        language={language}\n        emptyState={\n            <MessageState className='' icon={LockIcon} variant='small' title={intl.formatMessage(messages.sigCompiled)}\n                text={intl.formatMessage(messages.sigCompiledBody)} />\n        }\n        height='400px'\n    />;\n};\n\nCodeEditor.propTypes = {\n    code: PropTypes.any,\n    language: PropTypes.string,\n    isReadOnly: PropTypes.bool,\n    isCopyEnabled: PropTypes.bool,\n    isDownloadEnabled: PropTypes.bool\n};\n\nCodeEditor.defaultProps = { codeType: 'Code' };\n\nexport default CodeEditor;\n","import { Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst StatusLabel = ({ isDisabled, hasMatch }) => {\n    const intl = useIntl();\n    return <React.Fragment>\n        {isDisabled && !hasMatch && <Label>{intl.formatMessage(messages.disabled)}</Label>}\n        {!isDisabled && !hasMatch && <Label color=\"blue\">{intl.formatMessage(messages.enabled)}</Label>}\n        {hasMatch && <Label color=\"red\">{intl.formatMessage(messages.matched)}</Label>}\n    </React.Fragment>;\n};\n\nStatusLabel.propTypes = {\n    isDisabled: PropTypes.bool,\n    hasMatch: PropTypes.bool\n};\nexport default StatusLabel;\n"],"sourceRoot":""}