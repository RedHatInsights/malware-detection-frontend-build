{"version":3,"file":"js/Signature Details.1697449957994.c49f65e54688ce309ff8.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumb/Breadcrumb.js","webpack:///./src/Components/CodeEditor/CodeEditor.js","webpack:///./src/Components/MessageState/MessageState.js","webpack:///./src/Components/SharedComponents/EmptyAccount.js","webpack:///./src/Components/SigDetailsTable/SigDetailsTable.js","webpack:///./src/Routes/Signatures/Details.js","webpack:///./src/operations/mutations.js"],"sourcesContent":["import { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/index';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst BreadcrumbComponent = ({ items }) => {\n    const last = items.pop();\n    return <Breadcrumb>\n        {items.map((value, key) => <BreadcrumbItem key={key} to={value.to}>{value.name}</BreadcrumbItem>)}\n        <BreadcrumbItem isActive>{last.name}</BreadcrumbItem>\n    </Breadcrumb>;\n};\n\nBreadcrumbComponent.propTypes = {\n    items: PropTypes.array\n};\n\nexport default BreadcrumbComponent;\n","import { LockIcon } from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport MessageState from '../MessageState/MessageState';\nimport { CodeEditor as PfCodeEditor } from '@patternfly/react-code-editor';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst CodeEditor = ({ code, language, isReadOnly, isDownloadEnabled, isCopyEnabled, height = '400px' }) => {\n    const intl = useIntl();\n\n    return <PfCodeEditor\n        isDownloadEnabled={isDownloadEnabled}\n        isCopyEnabled={isCopyEnabled}\n        isReadOnly={isReadOnly}\n        isLanguageLabelVisible={language}\n        code={code}\n        language={language}\n        emptyState={\n            <MessageState className='' icon={LockIcon} variant='small' title={intl.formatMessage(messages.sigCompiled)}\n                text={intl.formatMessage(messages.sigCompiledBody)} />\n        }\n        height={height}\n    />;\n};\n\nCodeEditor.propTypes = {\n    code: PropTypes.any,\n    language: PropTypes.string,\n    isReadOnly: PropTypes.bool,\n    isCopyEnabled: PropTypes.bool,\n    isDownloadEnabled: PropTypes.bool,\n    height: PropTypes.string\n};\n\nCodeEditor.defaultProps = { codeType: 'Code' };\n\nexport default CodeEditor;\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant } from '@patternfly/react-core/dist/esm/components/EmptyState/index';\n\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\n\nconst MessageState = ({ className, children, icon, iconClass, iconStyle, text, title, variant }) =>\n    <EmptyState className={className} variant={variant}>\n        {icon !== 'none' && <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />}\n        <Title headingLevel='h5' size='lg'>\n            {title}\n        </Title>\n        <EmptyStateBody style={{ marginBottom: '16px' }}>\n            {text}\n        </EmptyStateBody>\n        {children}\n    </EmptyState>;\n\nMessageState.propTypes = {\n    children: PropTypes.any,\n    icon: PropTypes.any,\n    iconClass: PropTypes.any,\n    iconStyle: PropTypes.any,\n    text: PropTypes.any,\n    title: PropTypes.string,\n    variant: PropTypes.any,\n    className: PropTypes.string\n};\n\nMessageState.defaultProps = {\n    icon: CubesIcon,\n    title: '',\n    variant: EmptyStateVariant.full\n};\n\nexport default MessageState;\n","import React from 'react';\nimport {\n    Title,\n    Button,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateBody\n} from '@patternfly/react-core';\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { documentationURL } from '../Common';\n\nconst EmptyAccount = ({ message, className }) => {\n    const intl = useIntl();\n    return (\n        <EmptyState className={className} variant='large'>\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                {intl.formatMessage(messages.emptyAccountTitle)}\n            </Title>\n            <EmptyStateBody>\n                {message}\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href={documentationURL}\n                target=\"_blank\" >\n                {intl.formatMessage(messages.emptyAccountButton)}\n            </Button>\n        </EmptyState>\n    );\n};\n\nEmptyAccount.propTypes = {\n    message: propTypes.string,\n    className: propTypes.string\n};\n\nexport default EmptyAccount;\n","import { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    expandable,\n    sortable,\n    info,\n    classNames\n} from '@patternfly/react-table/dist/esm/components/Table';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { expandMatchMetadata } from '../Common';\nimport { GET_SIGNATURE_DETAILS_TABLE } from '../../operations/queries';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport EmptyAccount from '../SharedComponents/EmptyAccount';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\n\nconst sortIndices = { 1: 'DISPLAY_NAME', 2: 'GROUPS', 3: 'OS_VERSION', 4: 'LAST_SCAN_DATE', 5: 'MATCH_COUNT' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n    }\n\n    return state;\n};\n\nconst SigDetailsTable = ({ ruleName, affectedCount, isEmptyAccount }) => {\n    const intl = useIntl();\n    const initialState = {\n        tableVars: {\n            limit: 10,\n            offset: 0,\n            orderBy: 'LAST_SCAN_DATE_DESC',\n            displayName: '',\n            ruleName\n        },\n        sortBy: {\n            index: 4,\n            direction: SortByDirection.desc\n        },\n        rows: []\n    };\n    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data, loading, error } =\n        useQuery(GET_SIGNATURE_DETAILS_TABLE, { variables: tableVars });\n    const columns = [\n        { title: intl.formatMessage(messages.name), cellFormatters: [expandable], transforms: [sortable, cellWidth(45)] },\n        { title: intl.formatMessage(messages.group), transforms: [sortable, cellWidth(15)] },\n        { title: intl.formatMessage(messages.os), key: 'osVersion', transforms: [sortable, cellWidth(10)] },\n        { title: intl.formatMessage(messages.lastMatched), transforms: [sortable, cellWidth(10)] },\n        {\n            title: intl.formatMessage(messages.totalMatches),\n            transforms: [\n                info({\n                    tooltip: intl.formatMessage(messages.totalMatchesNote)\n                }),\n                sortable, cellWidth(10)\n            ]\n        }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { displayName: value, offset: 0 } }),\n            value: tableVars.displayName,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.name).toLowerCase() })\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const host = collapseRows[rowKey + 1].hostData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells = [{\n            title: <CodeEditor height='250px' code={`${host.matches.map((match, key) => `Match Source: ${match.source}\nOffset:${match.stringOffset}\nMatch Data: ${match.stringData}\nMatch Identifier: ${match.stringIdentifier}\nMatch Scan Date: ${new Date(match.scanDate).toUTCString()}\n${match.metadata ? expandMatchMetadata(JSON.parse(match.metadata)) : ''}\n${host.matches.length > 1 && key !== host.matches.length - 1 ? `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n` : ''}`).join('')}`}\n            isDownloadEnabled isCopyEnabled />\n        }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.flatMap((data, key) => {\n            const host = data;\n            return [{\n                rowId: key,\n                isOpen: false,\n                cells: [\n                    { title: <InsightsLink to={`/systems/${host.id}`}>{host.displayName}</InsightsLink> },\n                    { title: `${host.groups?.[0]?.name || 'N/A'}` },\n                    { title: `RHEL ${host.osVersion || 'Unavailable'}` },\n                    { title: <DateFormat date={new Date(host.matches[host.matches.length - 1].scanDate)} type='onlyDate' /> },\n                    { title: <InsightsLink to={`/systems/${host.id}`}>{host.matchCount?.toLocaleString()}</InsightsLink> }\n                ]\n            }, {\n                parent: key * 2,\n                hostData: host,\n                fullWidth: true,\n                cells: []\n            }];\n        });\n\n        stateSet({ type: 'setRows', payload: rowBuilder(data?.rulesList[0]?.affectedHostsList) });\n    }, [intl, data]);\n\n    const NoResultsMatch = (\n        <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n            text={intl.formatMessage(messages.noResultsMatch)} />\n    );\n\n    const NoAffectedHosts = (\n        <MessageState className='pf-c-card' variant='large' icon={CheckCircleIcon} iconClass='ins-l-success-color'\n            title={intl.formatMessage(messages.noAffectedHosts)}\n            text={intl.formatMessage(messages.noAffectedHostsBody)} />\n    );\n\n    const EmptyAccountState = (\n        <EmptyAccount className='pf-c-card' message={intl.formatMessage(messages.emptyAccountTableBody)} />\n    );\n\n    const ErrorState = (\n        <MessageState className='pf-c-card' variant='large' title='Error' text='error' />\n    );\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: data?.rulesList[0]?.affectedHosts?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n        />\n        {loading\n            ? <SkeletonTable\n                columns={[{ title: '', columnTransforms: [classNames('skeleton-expandable-column')] }, ...columns]}\n                rowSize={tableVars.limit}\n                sortBy={sortBy}\n            />\n            : <Table\n                className='sigTable'\n                aria-label='Signature Details table'\n                rows={rows}\n                cells={columns}\n                onCollapse={onCollapse}\n                onSort={onSort}\n                sortBy={data?.rulesList[0]?.affectedHosts?.totalCount > 0 ? sortBy : undefined}\n                isStickyHeader\n            >\n                <TableHeader />\n                <TableBody />\n            </Table>}\n\n        {\n            (!error && !loading && affectedCount !== 0)\n                ? (data?.rulesList[0]?.affectedHosts?.totalCount === 0)\n                    ? NoResultsMatch : <React.Fragment />\n                : (!loading &&\n                    (isEmptyAccount ? EmptyAccountState : NoAffectedHosts)\n                )\n        }\n        {error && <ErrorState />}\n        <Pagination\n            itemCount={data?.rulesList[0]?.affectedHosts?.totalCount || 0}\n            widgetId='pagination-options-menu-bottom'\n            perPage={tableVars.limit}\n            page={page}\n            variant={PaginationVariant.bottom}\n            onSetPage={onSetPage}\n            onPerPageSelect={onPerPageSelect}\n        />\n    </React.Fragment>;\n};\n\nSigDetailsTable.propTypes = {\n    ruleName: propTypes.string,\n    affectedCount: propTypes.number,\n    isEmptyAccount: propTypes.bool\n};\n\nexport default SigDetailsTable;\n","import './Details.scss';\n\nimport { Dropdown, DropdownItem, DropdownToggle, Grid, GridItem, Label } from '@patternfly/react-core';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { ExternalLinkAltIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title';\nimport Breadcrumb from '../../Components/Breadcrumb/Breadcrumb';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SIGNATURE_DETAILS_PAGE } from '../../operations/queries';\nimport { DISABLE_SIGNATURES, ENABLE_SIGNATURES } from '../../operations/mutations';\nimport Loading from '../../Components/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { useEffect, useState } from 'react';\nimport SigDetailsTable from '../../Components/SigDetailsTable/SigDetailsTable';\nimport { isBeta, RBACPermissions } from '../../Components/Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport MessageState from '../../Components/MessageState/MessageState';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nconst Details = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const notification = (data) => dispatch(addNotification(data));\n    const hasWritePerms = usePermissions('malware-detection', RBACPermissions.write).hasAccess;\n    const { id: sigName } = useParams();\n    const breadcrumbs = [{\n        name: intl.formatMessage(messages.malwareDetectionSignatures),\n        to: `${isBeta()}/insights/malware`\n    }, { name: sigName, to: '#' }];\n    const sigDetailsQuery = { query: GET_SIGNATURE_DETAILS_PAGE, variables: { ruleName: sigName } };\n    const { data, loading } = useQuery(sigDetailsQuery.query, { variables: sigDetailsQuery.variables });\n    const sigDetailsData = data?.rulesList[0];\n    const sigMetadata = sigDetailsData?.metadata;\n    const isMatched = sigDetailsData?.affectedHosts?.totalCount > 0;\n    const isDisabled = sigDetailsData?.isDisabled;\n    const references = sigMetadata?.references || [];\n    const xfti_references = sigMetadata?.xfti_references || [];\n    const dataNotAvailable = intl.formatMessage(messages.dataNotAvailable);\n    const chrome = useChrome();\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const [showTable, setShowTable] = useState(false);\n    const mutationVars = {\n        variables: { input: { id: sigDetailsData?.id } },\n        refetchQueries: [sigDetailsQuery],\n        onCompleted: () => { setDropdownOpen(false); setShowTable(false); },\n        onError: ({ networkError: error }) => {\n            setDropdownOpen(false); setShowTable(true);\n            const errorMsg = `${error.response.statusText} - ${error.bodyText}`;\n            notification({ variant: 'danger', dismissable: true, title: intl.formatMessage(messages.error), description: `${errorMsg}` });\n        }\n    };\n    const [enableSignature, { loading: enableSigLoading }] = useMutation(ENABLE_SIGNATURES, mutationVars);\n    const [disableSignature, { loading: disableSigLoading }] = useMutation(DISABLE_SIGNATURES, mutationVars);\n\n    const detailBlock = (title, detail) => (\n        <React.Fragment>\n            <p className='ins-l-detailBlockHeader'>{title}</p>\n            <p>{detail || dataNotAvailable}</p>\n        </React.Fragment>\n    );\n\n    const referenceLink = (referenceLink, referenceName) => (\n        <a className='ins-l-referenceLink' rel=\"noopener noreferrer\" target=\"_blank\" href={referenceLink}>\n            {referenceName} <ExternalLinkAltIcon />\n        </a>\n    );\n\n    useEffect(() => {\n        chrome.updateDocumentTitle(`${sigName} - Signatures - Malware | Red Hat Insights`);\n    }, [chrome, sigName]);\n\n    useEffect(() => {\n        // only show the table when the data loads / changes\n        setShowTable(true);\n    }, [data]);\n\n    const DisabledFromMalwareAnalysis = (\n        <MessageState variant='large' icon={ExclamationTriangleIcon} iconClass='ins-l-custom-color'\n            title={intl.formatMessage(messages.disabledFromAnalysis)}\n            text={intl.formatMessage(messages.disabledFromAnalysisBody, {\n                disabledBy: sigDetailsData?.disabledBy || 'Unknown',\n                disabledAt: <DateFormat date={sigDetailsData?.disabledAt || new Date()} type=\"onlyDate\" />\n            })}>\n            {hasWritePerms &&\n                <Button variant=\"primary\" isLoading={enableSigLoading} onClick={() => enableSignature(mutationVars)}>\n                    {intl.formatMessage(enableSigLoading ? messages.enablingSignature : messages.enableSignatureForAnalysis)}\n                </Button>\n            }\n        </MessageState>\n    );\n\n    const ActionsDropdown = (\n        <Dropdown\n            ouiaId='actions'\n            toggle={\n                <DropdownToggle onToggle={() => setDropdownOpen(!dropdownOpen)} isExpanded={dropdownOpen}>\n                    {intl.formatMessage(messages.actions)}\n                </DropdownToggle>\n            }\n            isOpen={dropdownOpen}\n            dropdownItems={isDisabled ?\n                [<DropdownItem key=\"action\" ouiaId=\"enable\" onClick={() => { enableSignature(mutationVars); setShowTable(false); }}>\n                    {intl.formatMessage(enableSigLoading ? messages.enablingSignature : messages.enableSignatureForAnalysis)}\n                </DropdownItem>]\n                :\n                [<DropdownItem key=\"action\" ouiaId=\"disable\" onClick={() => { disableSignature(mutationVars); setShowTable(false); }}>\n                    {intl.formatMessage(disableSigLoading ? messages.disablingSignature : messages.disableSignatureFromAnalysis)}\n                </DropdownItem>]\n            }\n            style={{ paddingBottom: 0 }}\n        />\n    );\n\n    const matchedSystemsCount = () => {\n        return isMatched ? <React.Fragment>\n            <ExclamationCircleIcon color='var(--pf-global--danger-color--100)' />&nbsp;\n            <span style={{ color: 'var(--pf-global--danger-color--200)', fontWeight: 'bold' }}>\n                {`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}\n            </span>\n        </React.Fragment>\n            :\n            <span>{`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}</span>;\n    };\n\n    return <React.Fragment>\n        <PageHeader>\n            <Breadcrumb items={breadcrumbs} />\n            <Grid hasGutter>\n                <GridItem md={9} sm={9}>\n                    <PageHeaderTitle\n                        title={\n                            <span>\n                                {sigName}&nbsp;\n                                {sigMetadata?.threat_type &&\n                                    <Label variant=\"outline\" color=\"blue\">{sigMetadata.threat_type}</Label>\n                                }&nbsp;\n                                {(isDisabled || isMatched) &&\n                                    <Label variant=\"filled\" color=\"red\">{isDisabled ? 'Disabled' : 'Matched'}</Label>}\n                            </span>\n                        }\n                    />\n                </GridItem>\n                {hasWritePerms &&\n                    <GridItem md={3} sm={3}>\n                        {ActionsDropdown}\n                    </GridItem>\n                }\n\n                {loading ? <Loading /> :\n                    <GridItem>\n                        <Grid hasGutter>\n                            <GridItem xl2={7} md={8} sm={12}>\n                                <p className='ins-l-detailBlockHeader'>{intl.formatMessage(messages.description)}</p>\n                                <Truncate\n                                    text={sigMetadata?.description}\n                                    length={200}\n                                    inline\n                                />\n                            </GridItem>\n                            <GridItem xl2={5} md={4} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.matchedSystems),\n                                    isDisabled ? intl.formatMessage(messages.notApplicable) : matchedSystemsCount())\n                                }\n                            </GridItem>\n                            <GridItem lg={2} md={3} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.ruleCategory), sigMetadata?.rule_category)}\n                            </GridItem>\n                            <GridItem xl2={5} lg={6} md={5} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.ruleIntendedUsage), sigMetadata?.usage)}\n                            </GridItem>\n                            <GridItem xl2={5} md={4} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.lastmatch),\n                                    isDisabled ? intl.formatMessage(messages.notApplicable) :\n                                        sigDetailsData?.lastMatchDate ?\n                                            <DateFormat date={new Date(sigDetailsData.lastMatchDate)} type=\"onlyDate\" /> :\n                                            intl.formatMessage(messages.never))\n                                }\n                            </GridItem>\n                            <GridItem xl2={7} md={8} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.author), sigMetadata?.author)}\n                            </GridItem>\n                            {(references.length > 0 || xfti_references.length > 0) &&\n                                <GridItem xl2={7} md={8} sm={12}>\n                                    {xfti_references.length === 1 ?\n                                        referenceLink(xfti_references[0], intl.formatMessage(messages.ruleAuthorReference))\n                                        :\n                                        xfti_references.map((ref, i) => referenceLink(ref,\n                                            `${intl.formatMessage(messages.ruleAuthorReference)} [${i + 1}] `))}\n                                    {references.length === 1 ?\n                                        referenceLink(references[0], intl.formatMessage(messages.ruleBackgroundReference))\n                                        :\n                                        references.map((ref, i) => referenceLink(ref,\n                                            `${intl.formatMessage(messages.ruleBackgroundReference)} [${i + 1}] `))}\n                                </GridItem>\n                            }\n                        </Grid>\n                    </GridItem>\n                }\n            </Grid>\n        </PageHeader>\n        <Main>\n            {!showTable ? <Loading /> :\n                isDisabled ? DisabledFromMalwareAnalysis :\n                    <React.Fragment>\n                        <Title className='ins-l-tableBlockHeader' headingLevel='h2'>\n                            {intl.formatMessage(messages.affectedHosts)}\n                        </Title>\n                        <SigDetailsTable\n                            ruleName={sigName}\n                            isEmptyAccount={data?.hosts?.totalCount === 0}\n                            affectedCount={sigDetailsData?.affectedHosts?.totalCount}\n                        />\n                    </React.Fragment>\n            }\n        </Main>\n    </React.Fragment>;\n};\n\nexport default Details;\n","import { gql } from '@apollo/client';\n\nexport const DISABLE_SIGNATURES = gql`mutation DisableRule ($input: DisableRuleInput = {}) {\n  disableRule(input: $input) {\n    clientMutationId\n  }\n}`;\n\nexport const ENABLE_SIGNATURES = gql`mutation EnableRule ($input: EnableRuleInput = {}) {\n  enableRule(input: $input) {\n    clientMutationId\n  }\n}`;\n\n"],"names":["BreadcrumbComponent","items","last","pop","Breadcrumb","map","value","key","BreadcrumbItem","to","name","isActive","propTypes","PropTypes","CodeEditor","code","language","isReadOnly","isDownloadEnabled","isCopyEnabled","height","intl","useIntl","isLanguageLabelVisible","emptyState","className","icon","LockIcon","variant","title","formatMessage","messages","text","defaultProps","codeType","MessageState","children","iconClass","iconStyle","style","headingLevel","size","marginBottom","CubesIcon","EmptyStateVariant","EmptyAccount","message","WrenchIcon","Title","Button","component","href","documentationURL","target","sortIndices","orderBy","index","direction","SortByDirection","tableReducer","state","action","type","tableVars","payload","sortBy","rows","SigDetailsTable","ruleName","affectedCount","isEmptyAccount","initialState","limit","offset","displayName","useReducer","stateSet","useQuery","GET_SIGNATURE_DETAILS_TABLE","variables","data","loading","error","columns","cellFormatters","expandable","transforms","sortable","cellWidth","info","tooltip","page","filterConfigItems","label","toLowerCase","filterValues","onChange","e","placeholder","field","onSetPage","onPerPageSelect","perPage","useEffect","flatMap","host","rowId","isOpen","cells","InsightsLink","id","groups","osVersion","DateFormat","date","Date","matches","length","scanDate","matchCount","toLocaleString","parent","hostData","fullWidth","rowBuilder","rulesList","affectedHostsList","NoResultsMatch","SearchIcon","NoAffectedHosts","CheckCircleIcon","EmptyAccountState","ErrorState","PrimaryToolbar","pagination","itemCount","affectedHosts","totalCount","isCompact","filterConfig","SkeletonTable","columnTransforms","classNames","rowSize","Table","onCollapse","rowKey","collapseRows","match","source","stringOffset","stringData","stringIdentifier","toUTCString","metadata","expandMatchMetadata","JSON","parse","join","onSort","undefined","isStickyHeader","Pagination","widgetId","PaginationVariant","dispatch","useDispatch","hasWritePerms","usePermissions","RBACPermissions","hasAccess","sigName","useParams","breadcrumbs","isBeta","sigDetailsQuery","query","GET_SIGNATURE_DETAILS_PAGE","sigDetailsData","sigMetadata","isMatched","isDisabled","references","xfti_references","dataNotAvailable","chrome","useChrome","useState","dropdownOpen","setDropdownOpen","showTable","setShowTable","mutationVars","input","refetchQueries","onCompleted","onError","networkError","errorMsg","response","statusText","bodyText","addNotification","notification","dismissable","description","useMutation","ENABLE_SIGNATURES","enableSignature","enableSigLoading","DISABLE_SIGNATURES","disableSignature","disableSigLoading","detailBlock","detail","referenceLink","referenceName","rel","updateDocumentTitle","DisabledFromMalwareAnalysis","ExclamationTriangleIcon","disabledBy","disabledAt","isLoading","onClick","ActionsDropdown","Dropdown","ouiaId","toggle","DropdownToggle","onToggle","isExpanded","dropdownItems","DropdownItem","paddingBottom","PageHeader","Grid","hasGutter","GridItem","md","sm","PageHeaderTitle","threat_type","Label","color","Loading","xl2","Truncate","inline","fontWeight","hosts","lg","rule_category","usage","lastMatchDate","author","ref","i","Main","gql"],"sourceRoot":""}