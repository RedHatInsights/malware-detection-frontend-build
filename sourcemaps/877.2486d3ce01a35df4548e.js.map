{"version":3,"sources":["webpack:///./src/Routes/Signatures/Routes.js","webpack:///./src/Routes/Systems/Routes.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/Components/Loading/Loading.js","webpack:///./src/Messages.js","webpack:///./src/operations/queries.js","webpack:///./src/store/cache.js","webpack:///./src/store/client.js","webpack:///./src/store/index.js"],"names":["List","lazy","Details","Switch","Route","exact","path","component","Suspense","fallback","Loading","Oops","Noperms","paths","Routes","Bullseye","Spinner","size","key","rootClass","SigRoutes","SysRoutes","Redirect","to","push","getRegistry","register","notifications","withRouter","props","useQuery","GET_MALWARE_COUNT","data","loading","intl","useIntl","useEffect","insights","chrome","init","identifyApp","hideGlobalFilter","hasMalware","Number","ruleStats","matchedCount","Banner","variant","className","formatMessage","messages","childProps","type","width","screenreaderText","Array","map","value","role","headingLevel","propTypes","defineMessages","malwareDetection","id","description","defaultMessage","sigName","sig","systems","added","matched","matchedSignatures","enabledSignatures","disabledSignatures","analysisRunAcross","noFound","noAnalysisRun","hostsProtected","activeFound","hostsVulnerable","lastCheck","lastSeen","uuid","never","malwareDetectionSigs","affectedHosts","lastmatch","hostmatch","status","author","enabled","enablement","disabled","noHostHas","signature","filterBy","weDetected","name","noMatches","hostsNotAffected","noResults","noResultsMatch","all","notMatched","sigCompiled","sigCompiledBody","totalMatches","noAffectedHosts","noAffectedHostsBody","resetFilters","Signatures","makeVar","RuleDetails","gql","ExtraRuleDetails","GET_SIGNATURE_PAGE","GET_SIGNATURE_TABLE","GET_SIGNATURE_DETAILS_PAGE","GET_SIGNATURE_DETAILS_TABLE","GET_SYSTEM_TABLE","GET_SYSTEMS_DETAILS_PAGE","GET_SYSTEMS_DETAILS_TABLE_PAGE","sigTableFilters","sysTableFilters","cache","InMemoryCache","typePolicies","Query","fields","client","ApolloClient","uri","registry","Error","middleware","ReducerRegistry","promiseMiddleware"],"mappings":"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","file":"js/877.1aae50604febd6678cc2.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Loading from '../../Components/Loading/Loading';\n\nconst List = lazy(() => import(/* webpackChunkName: 'Signature List' */ './Signatures'));\nconst Details = lazy(() => import(/* webpackChunkName: \"Signature Details\" */ './Details'));\n\nconst SigRoutes = () => <React.Fragment>\n    <Switch>\n        <Route exact path='/signatures' component={() => <Suspense fallback={<Loading />}> <List /> </Suspense>} />\n        <Route exact path='/signatures/:id' component={() => <Suspense fallback={<Loading />}> <Details /> </Suspense>} />\n    </Switch>\n</React.Fragment>;\n\nexport default SigRoutes;\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Loading from '../../Components/Loading/Loading';\n\nconst List = lazy(() => import(/* webpackChunkName: 'System List' */ './Systems'));\nconst Details = lazy(() => import(/* webpackChunkName: \"System Details\" */ './Details'));\n\nconst SysRoutes = () => <React.Fragment>\n    <Switch>\n        <Route exact path='/systems' component={() => <Suspense fallback={<Loading />}> <List /> </Suspense>} />\n        <Route exact path='/systems/:id' component={() => <Suspense fallback={<Loading />}> <Details /> </Suspense>} />\n    </Switch>\n</React.Fragment>;\n\nexport default SysRoutes;\n","import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Bullseye } from '@patternfly/react-core/dist/esm/layouts/Bullseye';\nimport Loading from './Components/Loading/Loading';\nimport SigRoutes from './Routes/Signatures/Routes';\nimport { Spinner } from '@patternfly/react-core/dist/esm/components/Spinner';\nimport SysRoutes from './Routes/Systems/Routes';\n\nconst Oops = lazy(() => import(/* webpackChunkName: 'Oops' */ './Routes/OopsPage/OopsPage'));\nconst Noperms = lazy(() => import(/* webpackChunkName: 'Noperms' */ './Routes/NoPermissionsPage/NoPermissionsPage'));\n\nconst paths = { sigRoutes: '/signatures', sysRoutes: '/systems', oops: '/oops', noperms: '/nopermissions' };\n\nexport const Routes = () => <Suspense fallback={<Bullseye><Spinner size=\"xl\" /></Bullseye>}>\n    <Switch>\n        <Route key='signatures' path={paths.sigRoutes} rootClass='Insights'\n            component={SigRoutes} />\n        <Route key='signatures' path={paths.sysRoutes} rootClass='Insights'\n            component={SysRoutes} />\n        <Route key='noperms' exact path={paths.noperms} rootClass='Insights'\n            component={() => <Suspense fallback={<Loading />}> <Noperms /> </Suspense>} />\n        <Route key='oops' exact path={paths.oops} rootClass='Insights'\n            component={() => <Suspense fallback={<Loading />}> <Oops /> </Suspense>} />\n        <Redirect path='*' to={paths.sigRoutes} push />\n    </Switch>\n</Suspense >;\n","import './App.scss';\n\nimport { NotificationsPortal, notifications } from '@redhat-cloud-services/frontend-components-notifications/';\nimport React, { useEffect } from 'react';\n\nimport { Banner } from '@patternfly/react-core/dist/esm/components/Banner/index';\nimport { GET_MALWARE_COUNT } from './operations/queries';\nimport { Routes } from './Routes';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { hasMalware } from './store/cache';\nimport messages from './Messages';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport { withRouter } from 'react-router-dom';\n\nconst registry = getRegistry();\nregistry.register({ notifications });\nconst App = (props) => {\n    const { data, loading } = useQuery(GET_MALWARE_COUNT);\n    const intl = useIntl();\n\n    useEffect(() => {\n        insights.chrome.init();\n        insights.chrome.identifyApp('malware');\n        insights.chrome.hideGlobalFilter?.();\n    }, []);\n\n    !loading && hasMalware(Number(data?.ruleStats?.matchedCount) !== 0);\n\n    return <React.Fragment>\n        <NotificationsPortal />\n        { !loading && hasMalware() && <Banner variant=\"danger\" className='ins-l-malwareBanner'>{intl.formatMessage(messages.weDetected)}</Banner>}\n        <Routes childProps={props} />\n    </React.Fragment>;\n};\n\nexport default withRouter(App);\n","import {\n    EmptyState,\n    EmptyStateIcon,\n    Skeleton,\n    Title\n} from '@patternfly/react-core/dist/esm/components';\n\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nconst Loading = ({ type }) => {\n    const Spinner = () => (\n        <span className=\"pf-c-spinner\" role=\"progressbar\" aria-valuetext=\"Loading...\">\n            <span className=\"pf-c-spinner__clipper\" />\n            <span className=\"pf-c-spinner__lead-ball\" />\n            <span className=\"pf-c-spinner__tail-ball\" />\n        </span>\n    );\n\n    switch (type) {\n        case 'table': return <div className='ins-l-common--BackgroundColor'>\n            <br />\n            <Skeleton width=\"75%\" screenreaderText=\"Loading contents\" />\n            {[...Array(9)].map((value, key) => <React.Fragment key={key}><br /><Skeleton width=\"75%\" /><br /></React.Fragment>)}\n        </div>;\n\n        default: return <EmptyState>\n            <EmptyStateIcon variant=\"container\" component={Spinner} />\n            <Title size=\"lg\" headingLevel=\"h4\">\n                Loading\n            </Title>\n        </EmptyState>;\n    }\n\n};\n\nLoading.propTypes = { type: propTypes.string };\n\nexport default Loading;\n","/* eslint-disable max-len */\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n    malwareDetection: {\n        id: 'malwareDetection',\n        description: 'Title',\n        defaultMessage: 'Malware detection'\n    },\n    sigName: {\n        id: 'sigNameId',\n        description: 'Sig table column title',\n        defaultMessage: 'Signature name'\n    },\n    sig: {\n        id: 'sig',\n        description: 'Signature',\n        defaultMessage: 'Signature'\n    },\n    systems: {\n        id: 'systems',\n        description: 'Sig table column title',\n        defaultMessage: 'Systems'\n    },\n    added: {\n        id: 'added',\n        description: 'Sig table column title',\n        defaultMessage: 'Added'\n    },\n    matched: {\n        id: 'matched',\n        description: 'Sig table column title',\n        defaultMessage: 'Matched'\n    },\n    matchedSignatures: {\n        id: 'matchedSignatures',\n        description: 'Sig status card heading',\n        defaultMessage: 'Matched Signatures'\n    },\n    enabledSignatures: {\n        id: 'enabledSignatures',\n        description: 'Sig status card heading',\n        defaultMessage: 'Enabled Signatures'\n    },\n    disabledSignatures: {\n        id: 'disabledSignatures',\n        description: 'Sig status card heading',\n        defaultMessage: 'Disabled Signatures'\n    },\n    analysisRunAcross: {\n        id: 'analysisRunAcross',\n        description: 'Chart card heading',\n        defaultMessage: 'analysis run across {hosts, plural, one {# system} other {# systems}} with {matches, plural, one {# match} other {# matches}}'\n    },\n    noFound: {\n        id: 'noFound',\n        description: 'Sig status card heading',\n        defaultMessage: 'No active malware matches found'\n    },\n    noAnalysisRun: {\n        id: 'noFnoAnalysisRunound',\n        description: 'No host analysis run',\n        defaultMessage: 'No system analysis run'\n    },\n    hostsProtected: {\n        id: 'hostsProtected',\n        description: 'Sig status card sub heading',\n        defaultMessage: 'Your systems are protected.'\n    },\n    activeFound: {\n        id: 'activeFound',\n        description: 'Sig status card heading',\n        defaultMessage: 'Active malware matches found!'\n    },\n    hostsVulnerable: {\n        id: 'hostsVulnerable',\n        description: 'Sig status card sub heading',\n        defaultMessage: 'Your systems may be at risk.'\n    },\n    lastCheck: {\n        id: 'lastCheck',\n        description: 'Sig status card',\n        defaultMessage: 'Last check:'\n    },\n    lastSeen: {\n        id: 'lastSeen',\n        description: 'Last seen',\n        defaultMessage: 'Last seen'\n    },\n    uuid: {\n        id: 'uuid',\n        description: 'UUID',\n        defaultMessage: 'UUID'\n    },\n    description: {\n        id: 'description',\n        description: 'description',\n        defaultMessage: 'Description'\n    },\n    never: {\n        id: 'never',\n        description: 'never',\n        defaultMessage: 'Never'\n    },\n    malwareDetectionSigs: {\n        id: 'malwareDetectionSigs',\n        description: 'Maleware detection signatures',\n        defaultMessage: 'Maleware detection signatures'\n    },\n    affectedHosts: {\n        id: 'affectedHosts',\n        description: 'Affected hosts',\n        defaultMessage: 'Affected systems'\n    },\n    lastmatch: {\n        id: 'lastmatch',\n        description: 'Last match',\n        defaultMessage: 'Last match'\n    },\n    hostmatch: {\n        id: 'hostmatch',\n        description: 'Host match',\n        defaultMessage: 'System match'\n    },\n    status: {\n        id: 'status',\n        description: 'Status',\n        defaultMessage: 'Status'\n    },\n    author: {\n        id: 'author',\n        description: 'Author',\n        defaultMessage: 'Author'\n    },\n    enabled: {\n        id: 'enabled',\n        description: 'Enabled',\n        defaultMessage: 'Enabled'\n    },\n    enablement: {\n        id: 'enablement',\n        description: 'Enablement',\n        defaultMessage: 'Enablement'\n    },\n    disabled: {\n        id: 'disabled',\n        description: 'Disabled',\n        defaultMessage: 'Disabled'\n    },\n    noHostHas: {\n        id: 'noHostHas',\n        description: 'No host has been affectyed by this signature.',\n        defaultMessage: 'No system has been affectyed by this signature.'\n    },\n    signature: {\n        id: 'signature',\n        description: 'Signature',\n        defaultMessage: 'Signature'\n    },\n    filterBy: {\n        id: 'filterBy',\n        description: 'Filter by {what?}',\n        defaultMessage: 'Filter by {field}'\n    },\n    weDetected: {\n        id: 'weDetected',\n        description: 'Malware detected on your system. Contact your corporate information security team for more information.',\n        defaultMessage: 'Malware detected on your system. Contact your corporate information security team for more information.'\n    },\n    name: {\n        id: 'name',\n        description: 'Name',\n        defaultMessage: 'Name'\n    },\n    noMatches: {\n        id: 'noMatches',\n        description: 'No matches found',\n        defaultMessage: 'No matches found'\n    },\n    hostsNotAffected: {\n        id: 'hostsNotAffected',\n        description: 'Hosts are not affected by any signatures. Your hosts are protected!',\n        defaultMessage: 'Systems are not affected by any signatures. Your systems are protected!'\n    },\n    noResults: {\n        id: 'noResults',\n        description: 'No results found',\n        defaultMessage: 'No results found'\n    },\n    noResultsMatch: {\n        id: 'noResultsMatch',\n        description: 'No results match this filter criteria. Remove all filters or clear all filters to show results.',\n        defaultMessage: 'No results match this filter criteria. Remove all filters or clear all filters to show results.'\n    },\n    all: {\n        id: 'all',\n        description: 'all',\n        defaultMessage: 'All'\n    },\n    notMatched: {\n        id: 'notMatched',\n        description: 'not matched',\n        defaultMessage: 'Not matched'\n    },\n    sigCompiled: {\n        id: 'sigCompiled',\n        description: 'Signature is compiled',\n        defaultMessage: 'Signature is compiled'\n    },\n    sigCompiledBody: {\n        id: 'sigCompiledBody',\n        description: 'We couldnt display',\n        defaultMessage: 'We couldn\\'t display this signature because it\\'s compiled.'\n    },\n    totalMatches: {\n        id: 'totalMatches',\n        description: 'Total matches',\n        defaultMessage: 'Total matches'\n    },\n    noAffectedHosts: {\n        id: 'noAffectedHosts',\n        description: 'No affected hosts',\n        defaultMessage: 'No affected systems'\n    },\n    noAffectedHostsBody: {\n        id: 'noAffectedHostsBody',\n        description: 'This signature doesn\\'t affect any hosts. Your hosts are protected!',\n        defaultMessage: 'This signature doesn\\'t affect any systems. Your systems are protected!'\n    },\n    resetFilters: {\n        id: 'resetFilters',\n        description: 'Reset filters',\n        defaultMessage: 'Reset filters'\n    }\n});\n","import { gql, makeVar } from '@apollo/client';\n\nexport const test = makeVar(false);\n\nconst Signatures = {\n    RuleDetails: gql` fragment RuleDetails on Rule {\n      hasMatch\n      id\n      lastMatchDate\n      name\n      rawRule\n      metadata\n      isDisabled\n      hostCount\n    }`,\n    ExtraRuleDetails: gql` fragment ExtraRuleDetails on Rule {\n      affectedHosts {\n          totalCount\n        }\n}` };\n\nexport const GET_SIGNATURE_PAGE = gql`query QuerySigPage {\n  ruleStats {\n    matchedCount\n    enabledCount\n    disabledCount\n  }\n  hostScans(first: 1, orderBy: CREATED_AT_DESC) {\n    nodes {\n      createdAt\n    }\n    totalCount\n  }\n  hosts {\n    totalCount\n  }\n}`;\n\nexport const GET_SIGNATURE_TABLE = gql`query\nQuerySigPage($offset: Int = 0, $limit: Int = 10, $orderBy: [RulesOrderBy!], $ruleName: String, $condition: RuleCondition = {})  {\n  rulesList(offset: $offset, first: $limit, orderBy: $orderBy, ruleName: $ruleName, condition: $condition)  {\n      ...RuleDetails\n  }\n  rules(offset: $offset, first: $limit, orderBy: $orderBy, ruleName: $ruleName, condition: $condition) {\n    totalCount\n  }\n}${Signatures.RuleDetails}`;\n\nexport const GET_SIGNATURE_DETAILS_PAGE = gql`query QuerySigDetailsPage($ruleName: String)  {\n  rulesList(ruleName: $ruleName)  {\n      ...RuleDetails\n      ...ExtraRuleDetails\n  }\n  hosts {\n    totalCount\n  }\n}${Signatures.RuleDetails}${Signatures.ExtraRuleDetails}`;\n\nexport const GET_MALWARE_COUNT = gql`query QuerySigPage {\n  ruleStats {\n    matchedCount\n  }\n}`;\n\nexport const GET_SIGNATURE_DETAILS_TABLE = gql`query QuerySigPage($offset: Int = 0, $limit: Int = 10, $orderBy: [HostWithMatchesOrderBy!],\n$ruleName: String, $displayName: String)  {\n  rulesList(ruleName: $ruleName)  {\n    affectedHostsList (offset: $offset, first: $limit, orderBy: $orderBy, displayName: $displayName) {\n      displayName\n        lastScanDate\n        matchCount\n        matches {\n          stringOffset\n          stringIdentifier\n          stringData\n          source\n          scanDate\n          ruleScanId\n          ruleId\n          hostId\n          id\n          metadata\n      }\n      }\n      affectedHosts(offset: $offset, first: $limit, orderBy: $orderBy, displayName: $displayName) {\n        totalCount\n      }\n    }\n}`;\n\nexport const GET_SYSTEM_TABLE = gql`query\nQuerySysPage($offset: Int = 0, $limit: Int = 10, $orderBy: [HostsOrderBy!], $name: String)  {\n  hostsList(offset: $offset, first: $limit, orderBy: $orderBy, displayName: $name)  {\n    displayName\n    hasMatch\n    lastScanDate\n    lastMatchDate\n    totalMatches\n    hostScans {\n      totalCount\n    }\n    updated\n    }\n    hosts(offset: $offset, first: $limit, orderBy: $orderBy, displayName: $name){\n    totalCount\n  }\n}`;\n\nexport const GET_SYSTEMS_DETAILS_PAGE = gql`query QuerySysDetailsPage($name: String)  {\n  hosts(condition: {displayName: $name})  {\n    nodes {\n      updated\n      displayName\n      id\n      lastMatchDate\n      totalMatches\n  }\n}\n}`;\n\nexport const GET_SYSTEMS_DETAILS_TABLE_PAGE = gql`query QuerySysDetailsPage(\n  $systemId: UUID!, $offset: Int = 0, $limit: Int = 10, $orderBy: [RuleWithMatchesOrderBy!], $ruleName: String) {\n  host(id: $systemId) {\n    id\n    updated\n    lastMatchDate\n    affectedRules(\n      first: $limit\n      offset: $offset\n      orderBy: $orderBy\n      ruleName: $ruleName\n    ) {\n      totalCount\n    }\n    affectedRulesList(\n      first: $limit\n      offset: $offset\n      orderBy: $orderBy\n      ruleName: $ruleName\n    ) {\n      matchCount\n      createdAt\n      matches {\n        stringOffset\n        stringIdentifier\n        stringData\n        source\n        scanDate\n      }\n      name\n      metadata\n      rawRule\n    }\n  }\n}\n\n`;\n","import { InMemoryCache, makeVar } from '@apollo/client';\n// import { offsetLimitPagination } from '@apollo/client/utilities';\n\nexport const hasMalware = makeVar(false);\nexport const sigTableFilters = makeVar({});\nexport const sysTableFilters = makeVar({});\n\nexport const cache = new InMemoryCache({\n    typePolicies: {\n        Query: {\n            fields: {\n                // rulesList: { ...offsetLimitPagination(),\n                //     read(existing, { variables }) {\n\n                //         need to have the variables stored/updated as cache var, then we can compare exisitng to what we see in the read\n\n                //         console.error(existing, variables);\n                //         if (!existing) {return;} //We have no data at all\n\n                //         if (existing.length < (variables.offset + variables.limit)) {return;} //We don't have enough data\n\n                //         const sliced = existing.slice(variables.offset, variables.offset + variables.limit);\n\n                //         if (sliced.includes(undefined)) {return;} //Some of our data is null\n\n                //         return sliced;\n                //     }\n                // }\n            }\n        }\n    }\n});\n","import { ApolloClient } from '@apollo/client';\nimport { cache } from './cache';\n\nconst uri = `/api/malware-detection/v1/graphql`;\n\nconst client = props => new ApolloClient({ cache, uri, ...props });\n\nexport { client };\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet registry;\n\nexport function init (...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n"],"sourceRoot":""}