{"version":3,"file":"js/Signature Details.b4245d3ef05a6a62ec7a.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumb/Breadcrumb.js","webpack:///./src/Components/CodeEditor/CodeEditor.js","webpack:///./src/Components/MessageState/MessageState.js","webpack:///./src/Components/SharedComponents/EmptyAccount.js","webpack:///./src/Components/SigDetailsTable/SigDetailsTable.js","webpack:///./src/Routes/Signatures/Details.js","webpack:///./src/operations/mutations.js"],"sourcesContent":["import { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/index';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst BreadcrumbComponent = ({ items }) => {\n    const last = items.pop();\n    return <Breadcrumb>\n        {items.map((value, key) => <BreadcrumbItem key={key} to={value.to}>{value.name}</BreadcrumbItem>)}\n        <BreadcrumbItem isActive>{last.name}</BreadcrumbItem>\n    </Breadcrumb>;\n};\n\nBreadcrumbComponent.propTypes = {\n    items: PropTypes.array\n};\n\nexport default BreadcrumbComponent;\n","import { LockIcon } from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport MessageState from '../MessageState/MessageState';\nimport { CodeEditor as PfCodeEditor } from '@patternfly/react-code-editor';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst CodeEditor = ({ code, language, isReadOnly, isDownloadEnabled, isCopyEnabled, height = '400px' }) => {\n    const intl = useIntl();\n\n    return <PfCodeEditor\n        isDownloadEnabled={isDownloadEnabled}\n        isCopyEnabled={isCopyEnabled}\n        isReadOnly={isReadOnly}\n        isLanguageLabelVisible={language}\n        code={code}\n        language={language}\n        emptyState={\n            <MessageState className='' icon={LockIcon} variant='small' title={intl.formatMessage(messages.sigCompiled)}\n                text={intl.formatMessage(messages.sigCompiledBody)} />\n        }\n        height={height}\n    />;\n};\n\nCodeEditor.propTypes = {\n    code: PropTypes.any,\n    language: PropTypes.string,\n    isReadOnly: PropTypes.bool,\n    isCopyEnabled: PropTypes.bool,\n    isDownloadEnabled: PropTypes.bool,\n    height: PropTypes.string\n};\n\nCodeEditor.defaultProps = { codeType: 'Code' };\n\nexport default CodeEditor;\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant } from '@patternfly/react-core/dist/esm/components/EmptyState/index';\n\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\n\nconst MessageState = ({ className, children, icon, iconClass, iconStyle, text, title, variant }) =>\n    <EmptyState className={className} variant={variant}>\n        {icon !== 'none' && <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />}\n        <Title headingLevel='h5' size='lg'>\n            {title}\n        </Title>\n        <EmptyStateBody style={{ marginBottom: '16px' }}>\n            {text}\n        </EmptyStateBody>\n        {children}\n    </EmptyState>;\n\nMessageState.propTypes = {\n    children: PropTypes.any,\n    icon: PropTypes.any,\n    iconClass: PropTypes.any,\n    iconStyle: PropTypes.any,\n    text: PropTypes.any,\n    title: PropTypes.string,\n    variant: PropTypes.any,\n    className: PropTypes.string\n};\n\nMessageState.defaultProps = {\n    icon: CubesIcon,\n    title: '',\n    variant: EmptyStateVariant.full\n};\n\nexport default MessageState;\n","import React from 'react';\nimport {\n    Title,\n    Button,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateBody\n} from '@patternfly/react-core';\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { documentationURL } from '../Common';\n\nconst EmptyAccount = ({ message, className }) => {\n    const intl = useIntl();\n    return (\n        <EmptyState className={className} variant='large'>\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n                {intl.formatMessage(messages.emptyAccountTitle)}\n            </Title>\n            <EmptyStateBody>\n                {message}\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href={documentationURL}\n                target=\"_blank\" >\n                {intl.formatMessage(messages.emptyAccountButton)}\n            </Button>\n        </EmptyState>\n    );\n};\n\nEmptyAccount.propTypes = {\n    message: propTypes.string,\n    className: propTypes.string\n};\n\nexport default EmptyAccount;\n","import './SigDetailsTable.scss';\n\nimport { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    expandable,\n    sortable,\n    info,\n    classNames\n} from '@patternfly/react-table/dist/esm/components/Table';\nimport TableToolbar from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { expandMatchMetadata } from '../Common';\nimport { GET_SIGNATURE_DETAILS_TABLE, GET_SIGNATURE_DETAILS_TABLE_GROUPS } from '../../operations/queries';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport EmptyAccount from '../SharedComponents/EmptyAccount';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { isEmpty, uniqWith } from 'lodash';\n\nconst sortIndices = { 1: 'DISPLAY_NAME', 2: 'GROUP_NAME', 3: 'OS_VERSION', 4: 'LAST_SCAN_DATE', 5: 'MATCH_COUNT' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n        case 'setGroups':\n            return { ...state, groups: action.payload };\n    }\n\n    return state;\n};\n\nconst SigDetailsTable = ({ ruleName, affectedCount, isEmptyAccount }) => {\n    const intl = useIntl();\n    const initialState = {\n        tableVars: {\n            limit: 10,\n            offset: 0,\n            orderBy: 'LAST_SCAN_DATE_DESC',\n            displayName: '',\n            hostGroupFilter: undefined,\n            ruleName\n        },\n        sortBy: {\n            index: 4,\n            direction: SortByDirection.desc\n        },\n        rows: [],\n        groups: []\n    };\n    const [{ tableVars, sortBy, rows, groups }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data, loading, error } =\n        useQuery(GET_SIGNATURE_DETAILS_TABLE, { variables: tableVars });\n    const { data: groupsData, loading: groupsLoading } =\n        useQuery(GET_SIGNATURE_DETAILS_TABLE_GROUPS, { variables: tableVars });\n    const columns = [\n        { title: intl.formatMessage(messages.name), cellFormatters: [expandable], transforms: [sortable, cellWidth(45)] },\n        { title: intl.formatMessage(messages.group), transforms: [sortable, cellWidth(15)] },\n        { title: intl.formatMessage(messages.os), key: 'osVersion', transforms: [sortable, cellWidth(10)] },\n        { title: intl.formatMessage(messages.lastMatched), transforms: [sortable, cellWidth(10)] },\n        {\n            title: intl.formatMessage(messages.totalMatches),\n            transforms: [\n                info({\n                    tooltip: intl.formatMessage(messages.totalMatchesNote)\n                }),\n                sortable, cellWidth(10)\n            ]\n        }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { displayName: value, offset: 0 } }),\n            value: tableVars.displayName,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.name).toLowerCase() })\n        }\n    }, {\n        label: intl.formatMessage(messages.group).toLowerCase(),\n        type: isEmpty(groups) ? 'group' : 'checkbox',  // display checkboxes only if there are groups to choose from\n        filterValues: {\n            key: 'group-filter',\n            onChange: (e, value) => {\n                // Populates hostGroupFilter used in the GET_SIGNATURE_DETAILS_TABLE query\n                stateSet({ type: 'setTableVars', payload: { hostGroupFilter: value }, offset: 0 });\n            },\n            items: groupsLoading ? []  // display an empty box whilst the groups are loading\n                : isEmpty(groups) ? [{ isDisabled: true, label: intl.formatMessage(messages.noGroups) }]  // message if no groups\n                    : groups,\n            value: tableVars.hostGroupFilter,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.group).toLowerCase() })\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const host = collapseRows[rowKey + 1].hostData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells = [{\n            title: <CodeEditor height='250px' code={`${host.matches.map((match, key) => `Match Source: ${match.source}\nOffset:${match.stringOffset}\nMatch Data: ${match.stringData}\nMatch Identifier: ${match.stringIdentifier}\nMatch Scan Date: ${new Date(match.scanDate).toUTCString()}\n${match.metadata ? expandMatchMetadata(JSON.parse(match.metadata)) : ''}\n${host.matches.length > 1 && key !== host.matches.length - 1 ? `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n` : ''}`).join('')}`}\n            isDownloadEnabled isCopyEnabled />\n        }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.flatMap((data, key) => {\n            const host = data;\n            return [{\n                rowId: key,\n                isOpen: false,\n                cells: [\n                    { title: <InsightsLink to={`/systems/${host.id}`}>{host.displayName}</InsightsLink> },\n                    { title: `${host.groups?.[0]?.name || intl.formatMessage(messages.notApplicable)}` },\n                    { title: host.osVersion ? `RHEL ${host.osVersion}` : intl.formatMessage(messages.dataNotAvailable) },\n                    { title: <DateFormat date={new Date(host.matches[host.matches.length - 1].scanDate)} type='onlyDate' /> },\n                    { title: <InsightsLink to={`/systems/${host.id}`}>{host.matchCount?.toLocaleString()}</InsightsLink> }\n                ]\n            }, {\n                parent: key * 2,\n                hostData: host,\n                fullWidth: true,\n                cells: []\n            }];\n        });\n\n        stateSet({ type: 'setRows', payload: rowBuilder(data?.rulesList[0]?.affectedHostsList) });\n    }, [intl, data]);\n\n    useEffect(() => {\n        // populates the Group name filter dropdown\n        const getGroupList = groupsData => {\n            return groupsData?.filter(host => !isEmpty(host.groups)).map(host => (\n                { label: host.groups[0].name, value: host.groups[0].name })\n            );\n        };\n\n        let groupsList = getGroupList(groupsData?.rulesList[0]?.affectedHostsList) || [];\n        groupsList = uniqWith(groupsList, (group1, group2) => group1.label === group2.label); // remove duplicate group names\n        stateSet({ type: 'setGroups', payload: groupsList });\n    }, [groupsData]);\n\n    const NoResultsMatch = (\n        <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n            text={intl.formatMessage(messages.noResultsMatch)} />\n    );\n\n    const NoAffectedHosts = (\n        <MessageState className='pf-c-card' variant='large' icon={CheckCircleIcon} iconClass='ins-l-success-color'\n            title={intl.formatMessage(messages.noAffectedHosts)}\n            text={intl.formatMessage(messages.noAffectedHostsBody)} />\n    );\n\n    const EmptyAccountState = (\n        <EmptyAccount className='pf-c-card' message={intl.formatMessage(messages.emptyAccountTableBody)} />\n    );\n\n    const ErrorState = (\n        <MessageState className='pf-c-card' variant='large' title='Error' text='error' />\n    );\n\n    const buildFilterChips = () => {\n        const chips = [];\n        tableVars?.displayName &&\n            chips.push({\n                category: intl.formatMessage(messages.name), value: 'name',\n                chips: [{ name: tableVars?.displayName, value: tableVars?.displayName }]\n            });\n        tableVars?.hostGroupFilter &&\n            chips.push({\n                category: intl.formatMessage(messages.group), value: 'groups',\n                chips: tableVars.hostGroupFilter.map(group => ({ name: group, value: group }))\n            });\n        return chips;\n    };\n\n    const activeFiltersConfig = {\n        deleteTitle: intl.formatMessage(messages.resetFilters),\n        filters: buildFilterChips(),\n        showDeleteButton: tableVars?.displayName !== '' || tableVars?.hostGroupFilter !== undefined,\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                stateSet({ type: 'setTableVars', payload: { displayName: '', hostGroupFilter: undefined, offset: 0 } });\n            } else {\n                itemsToRemove.map((item) => {\n                    item.value === 'name' && stateSet({ type: 'setTableVars', payload: { displayName: '' } });\n                    if (item.value === 'groups') {\n                        const groupChips = tableVars.hostGroupFilter.filter(group => group !== item.chips[0].name);\n                        const payload = { hostGroupFilter: groupChips.length ? groupChips : undefined, offset: 0 };\n                        stateSet({ type: 'setTableVars', payload });\n                    }\n                });\n            }\n        }\n    };\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: data?.rulesList[0]?.affectedHosts?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        {loading\n            ? <SkeletonTable\n                columns={[{ title: '', columnTransforms: [classNames('skeleton-expandable-column')] }, ...columns]}\n                rowSize={tableVars.limit}\n                sortBy={sortBy}\n            />\n            : <Table\n                className='sigTable'\n                aria-label='Signature Details table'\n                rows={rows}\n                cells={columns}\n                onCollapse={onCollapse}\n                onSort={onSort}\n                sortBy={data?.rulesList[0]?.affectedHosts?.totalCount > 0 ? sortBy : undefined}\n                isStickyHeader\n            >\n                <TableHeader />\n                <TableBody />\n            </Table>}\n\n        {\n            (!error && !loading && affectedCount !== 0)\n                ? (data?.rulesList[0]?.affectedHosts?.totalCount === 0)\n                    ? NoResultsMatch : <React.Fragment />\n                : (!loading &&\n                    (isEmptyAccount ? EmptyAccountState : NoAffectedHosts)\n                )\n        }\n        {error && <ErrorState />}\n        <TableToolbar isFooter>\n            <Pagination\n                itemCount={data?.rulesList[0]?.affectedHosts?.totalCount || 0}\n                widgetId='pagination-options-menu-bottom'\n                perPage={tableVars.limit}\n                page={page}\n                variant={PaginationVariant.bottom}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n            />\n        </TableToolbar>\n    </React.Fragment>;\n};\n\nSigDetailsTable.propTypes = {\n    ruleName: propTypes.string,\n    affectedCount: propTypes.number,\n    isEmptyAccount: propTypes.bool\n};\n\nexport default SigDetailsTable;\n","import './Details.scss';\n\nimport { Dropdown, DropdownItem, DropdownToggle, Grid, GridItem, Label } from '@patternfly/react-core';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { ExternalLinkAltIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title';\nimport Breadcrumb from '../../Components/Breadcrumb/Breadcrumb';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SIGNATURE_DETAILS_PAGE } from '../../operations/queries';\nimport { DISABLE_SIGNATURES, ENABLE_SIGNATURES } from '../../operations/mutations';\nimport Loading from '../../Components/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { useEffect, useState } from 'react';\nimport SigDetailsTable from '../../Components/SigDetailsTable/SigDetailsTable';\nimport { isBeta, RBACPermissions } from '../../Components/Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport MessageState from '../../Components/MessageState/MessageState';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nconst Details = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const notification = (data) => dispatch(addNotification(data));\n    const hasWritePerms = usePermissions('malware-detection', RBACPermissions.write).hasAccess;\n    const { id: sigName } = useParams();\n    const breadcrumbs = [{\n        name: intl.formatMessage(messages.malwareDetectionSignatures),\n        to: `${isBeta()}/insights/malware`\n    }, { name: sigName, to: '#' }];\n    const sigDetailsQuery = { query: GET_SIGNATURE_DETAILS_PAGE, variables: { ruleName: sigName } };\n    const { data, loading } = useQuery(sigDetailsQuery.query, { variables: sigDetailsQuery.variables });\n    const sigDetailsData = data?.rulesList[0];\n    const sigMetadata = sigDetailsData?.metadata;\n    const isMatched = sigDetailsData?.affectedHosts?.totalCount > 0;\n    const isDisabled = sigDetailsData?.isDisabled;\n    const references = sigMetadata?.references || [];\n    const xfti_references = sigMetadata?.xfti_references || [];\n    const dataNotAvailable = intl.formatMessage(messages.dataNotAvailable);\n    const chrome = useChrome();\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const [showTable, setShowTable] = useState(false);\n    const mutationVars = {\n        variables: { input: { id: sigDetailsData?.id } },\n        refetchQueries: [sigDetailsQuery],\n        onCompleted: () => { setDropdownOpen(false); setShowTable(false); },\n        onError: ({ networkError: error }) => {\n            setDropdownOpen(false); setShowTable(true);\n            const errorMsg = `${error.response.statusText} - ${error.bodyText}`;\n            notification({ variant: 'danger', dismissable: true, title: intl.formatMessage(messages.error), description: `${errorMsg}` });\n        }\n    };\n    const [enableSignature, { loading: enableSigLoading }] = useMutation(ENABLE_SIGNATURES, mutationVars);\n    const [disableSignature, { loading: disableSigLoading }] = useMutation(DISABLE_SIGNATURES, mutationVars);\n\n    const detailBlock = (title, detail) => (\n        <React.Fragment>\n            <p className='ins-l-detailBlockHeader'>{title}</p>\n            <p>{detail || dataNotAvailable}</p>\n        </React.Fragment>\n    );\n\n    const referenceLink = (referenceLink, referenceName) => (\n        <a className='ins-l-referenceLink' rel=\"noopener noreferrer\" target=\"_blank\" href={referenceLink}>\n            {referenceName} <ExternalLinkAltIcon />\n        </a>\n    );\n\n    useEffect(() => {\n        chrome.updateDocumentTitle(`${sigName} - Signatures - Malware | Red Hat Insights`);\n    }, [chrome, sigName]);\n\n    useEffect(() => {\n        // only show the table when the data loads / changes\n        setShowTable(true);\n    }, [data]);\n\n    const DisabledFromMalwareAnalysis = (\n        <MessageState variant='large' icon={ExclamationTriangleIcon} iconClass='ins-l-custom-color'\n            title={intl.formatMessage(messages.disabledFromAnalysis)}\n            text={intl.formatMessage(messages.disabledFromAnalysisBody, {\n                disabledBy: sigDetailsData?.disabledBy || 'Unknown',\n                disabledAt: <DateFormat date={sigDetailsData?.disabledAt || new Date()} type=\"onlyDate\" />\n            })}>\n            {hasWritePerms &&\n                <Button variant=\"primary\" isLoading={enableSigLoading} onClick={() => enableSignature(mutationVars)}>\n                    {intl.formatMessage(enableSigLoading ? messages.enablingSignature : messages.enableSignatureForAnalysis)}\n                </Button>\n            }\n        </MessageState>\n    );\n\n    const ActionsDropdown = (\n        <Dropdown\n            ouiaId='actions'\n            toggle={\n                <DropdownToggle onToggle={() => setDropdownOpen(!dropdownOpen)} isExpanded={dropdownOpen}>\n                    {intl.formatMessage(messages.actions)}\n                </DropdownToggle>\n            }\n            isOpen={dropdownOpen}\n            dropdownItems={isDisabled ?\n                [<DropdownItem key=\"action\" ouiaId=\"enable\" onClick={() => { enableSignature(mutationVars); setShowTable(false); }}>\n                    {intl.formatMessage(enableSigLoading ? messages.enablingSignature : messages.enableSignatureForAnalysis)}\n                </DropdownItem>]\n                :\n                [<DropdownItem key=\"action\" ouiaId=\"disable\" onClick={() => { disableSignature(mutationVars); setShowTable(false); }}>\n                    {intl.formatMessage(disableSigLoading ? messages.disablingSignature : messages.disableSignatureFromAnalysis)}\n                </DropdownItem>]\n            }\n            style={{ paddingBottom: 0 }}\n        />\n    );\n\n    const matchedSystemsCount = () => {\n        return isMatched ? <React.Fragment>\n            <ExclamationCircleIcon color='var(--pf-global--danger-color--100)' />&nbsp;\n            <span style={{ color: 'var(--pf-global--danger-color--200)', fontWeight: 'bold' }}>\n                {`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}\n            </span>\n        </React.Fragment>\n            :\n            <span>{`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}</span>;\n    };\n\n    return <React.Fragment>\n        <PageHeader>\n            <Breadcrumb items={breadcrumbs} />\n            <Grid hasGutter>\n                <GridItem md={9} sm={9}>\n                    <PageHeaderTitle\n                        title={\n                            <span>\n                                {sigName}&nbsp;\n                                {sigMetadata?.threat_type &&\n                                    <Label variant=\"outline\" color=\"blue\">{sigMetadata.threat_type}</Label>\n                                }&nbsp;\n                                {(isDisabled || isMatched) &&\n                                    <Label variant=\"filled\" color=\"red\">{isDisabled ? 'Disabled' : 'Matched'}</Label>}\n                            </span>\n                        }\n                    />\n                </GridItem>\n                {hasWritePerms &&\n                    <GridItem md={3} sm={3}>\n                        {ActionsDropdown}\n                    </GridItem>\n                }\n\n                {loading ? <Loading /> :\n                    <GridItem>\n                        <Grid hasGutter>\n                            <GridItem xl2={7} md={8} sm={12}>\n                                <p className='ins-l-detailBlockHeader'>{intl.formatMessage(messages.description)}</p>\n                                <Truncate\n                                    text={sigMetadata?.description}\n                                    length={200}\n                                    inline\n                                />\n                            </GridItem>\n                            <GridItem xl2={5} md={4} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.matchedSystems),\n                                    isDisabled ? intl.formatMessage(messages.notApplicable) : matchedSystemsCount())\n                                }\n                            </GridItem>\n                            <GridItem lg={2} md={3} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.ruleCategory), sigMetadata?.rule_category)}\n                            </GridItem>\n                            <GridItem xl2={5} lg={6} md={5} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.ruleIntendedUsage), sigMetadata?.usage)}\n                            </GridItem>\n                            <GridItem xl2={5} md={4} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.lastmatch),\n                                    isDisabled ? intl.formatMessage(messages.notApplicable) :\n                                        sigDetailsData?.lastMatchDate ?\n                                            <DateFormat date={new Date(sigDetailsData.lastMatchDate)} type=\"onlyDate\" /> :\n                                            intl.formatMessage(messages.never))\n                                }\n                            </GridItem>\n                            <GridItem xl2={7} md={8} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.author), sigMetadata?.author)}\n                            </GridItem>\n                            {(references.length > 0 || xfti_references.length > 0) &&\n                                <GridItem xl2={7} md={8} sm={12}>\n                                    {xfti_references.length === 1 ?\n                                        referenceLink(xfti_references[0], intl.formatMessage(messages.ruleAuthorReference))\n                                        :\n                                        xfti_references.map((ref, i) => referenceLink(ref,\n                                            `${intl.formatMessage(messages.ruleAuthorReference)} [${i + 1}] `))}\n                                    {references.length === 1 ?\n                                        referenceLink(references[0], intl.formatMessage(messages.ruleBackgroundReference))\n                                        :\n                                        references.map((ref, i) => referenceLink(ref,\n                                            `${intl.formatMessage(messages.ruleBackgroundReference)} [${i + 1}] `))}\n                                </GridItem>\n                            }\n                        </Grid>\n                    </GridItem>\n                }\n            </Grid>\n        </PageHeader>\n        <Main>\n            {!showTable ? <Loading /> :\n                isDisabled ? DisabledFromMalwareAnalysis :\n                    <React.Fragment>\n                        <Title className='ins-l-tableBlockHeader' headingLevel='h2'>\n                            {intl.formatMessage(messages.affectedHosts)}\n                        </Title>\n                        <SigDetailsTable\n                            ruleName={sigName}\n                            isEmptyAccount={data?.hosts?.totalCount === 0}\n                            affectedCount={sigDetailsData?.affectedHosts?.totalCount}\n                        />\n                    </React.Fragment>\n            }\n        </Main>\n    </React.Fragment>;\n};\n\nexport default Details;\n","import { gql } from '@apollo/client';\n\nexport const DISABLE_SIGNATURES = gql`mutation DisableRule ($input: DisableRuleInput = {}) {\n  disableRule(input: $input) {\n    clientMutationId\n  }\n}`;\n\nexport const ENABLE_SIGNATURES = gql`mutation EnableRule ($input: EnableRuleInput = {}) {\n  enableRule(input: $input) {\n    clientMutationId\n  }\n}`;\n\n"],"names":["BreadcrumbComponent","items","last","pop","Breadcrumb","map","value","key","BreadcrumbItem","to","name","isActive","propTypes","PropTypes","CodeEditor","code","language","isReadOnly","isDownloadEnabled","isCopyEnabled","height","intl","useIntl","isLanguageLabelVisible","emptyState","className","icon","LockIcon","variant","title","formatMessage","messages","sigCompiled","text","sigCompiledBody","defaultProps","codeType","MessageState","children","iconClass","iconStyle","style","headingLevel","size","marginBottom","CubesIcon","EmptyStateVariant","full","EmptyAccount","message","WrenchIcon","Title","emptyAccountTitle","Button","component","href","documentationURL","target","emptyAccountButton","sortIndices","orderBy","index","direction","SortByDirection","asc","tableReducer","state","action","type","tableVars","payload","sortBy","rows","groups","SigDetailsTable","ruleName","affectedCount","isEmptyAccount","initialState","limit","offset","displayName","hostGroupFilter","undefined","desc","useReducer","stateSet","useQuery","GET_SIGNATURE_DETAILS_TABLE","variables","data","loading","error","GET_SIGNATURE_DETAILS_TABLE_GROUPS","groupsData","groupsLoading","columns","cellFormatters","expandable","transforms","sortable","cellWidth","group","os","lastMatched","totalMatches","info","tooltip","totalMatchesNote","page","filterConfigItems","label","toLowerCase","filterValues","onChange","e","placeholder","filterBy","field","isEmpty","isDisabled","noGroups","onSetPage","onPerPageSelect","perPage","useEffect","flatMap","host","rowId","isOpen","cells","InsightsLink","id","notApplicable","osVersion","dataNotAvailable","DateFormat","date","Date","matches","length","scanDate","matchCount","toLocaleString","parent","hostData","fullWidth","rowBuilder","rulesList","affectedHostsList","groupsList","filter","getGroupList","uniqWith","group1","group2","chips","NoResultsMatch","SearchIcon","noResults","noResultsMatch","NoAffectedHosts","CheckCircleIcon","noAffectedHosts","noAffectedHostsBody","EmptyAccountState","emptyAccountTableBody","ErrorState","activeFiltersConfig","deleteTitle","resetFilters","filters","push","category","showDeleteButton","onDelete","event","itemsToRemove","isAll","item","groupChips","PrimaryToolbar","pagination","itemCount","affectedHosts","totalCount","isCompact","filterConfig","SkeletonTable","columnTransforms","classNames","rowSize","Table","onCollapse","rowKey","collapseRows","match","source","stringOffset","stringData","stringIdentifier","toUTCString","metadata","expandMatchMetadata","JSON","parse","join","onSort","isStickyHeader","TableToolbar","isFooter","Pagination","widgetId","PaginationVariant","bottom","dispatch","useDispatch","hasWritePerms","usePermissions","RBACPermissions","write","hasAccess","sigName","useParams","breadcrumbs","malwareDetectionSignatures","isBeta","sigDetailsQuery","query","GET_SIGNATURE_DETAILS_PAGE","sigDetailsData","sigMetadata","isMatched","references","xfti_references","chrome","useChrome","useState","dropdownOpen","setDropdownOpen","showTable","setShowTable","mutationVars","input","refetchQueries","onCompleted","onError","networkError","errorMsg","response","statusText","bodyText","addNotification","notification","dismissable","description","useMutation","ENABLE_SIGNATURES","enableSignature","enableSigLoading","DISABLE_SIGNATURES","disableSignature","disableSigLoading","detailBlock","detail","referenceLink","referenceName","rel","updateDocumentTitle","DisabledFromMalwareAnalysis","ExclamationTriangleIcon","disabledFromAnalysis","disabledFromAnalysisBody","disabledBy","disabledAt","isLoading","onClick","enablingSignature","enableSignatureForAnalysis","ActionsDropdown","Dropdown","ouiaId","toggle","DropdownToggle","onToggle","isExpanded","actions","dropdownItems","DropdownItem","disablingSignature","disableSignatureFromAnalysis","paddingBottom","PageHeader","Grid","hasGutter","GridItem","md","sm","PageHeaderTitle","threat_type","Label","color","Loading","xl2","Truncate","inline","matchedSystems","fontWeight","hosts","lg","ruleCategory","rule_category","ruleIntendedUsage","usage","lastmatch","lastMatchDate","never","author","ruleAuthorReference","ref","i","ruleBackgroundReference","Main","gql"],"sourceRoot":""}