{"version":3,"file":"js/Signature Details.d447894c99bb9108dff1.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumb/Breadcrumb.js","webpack:///./src/Components/SigTable/helper.js","webpack:///./src/Components/CodeEditor/CodeEditor.js","webpack:///./src/Components/MessageState/MessageState.js","webpack:///./src/Components/SharedComponents/EmptyAccount.js","webpack:///./src/Components/SigDetailsTable/SigDetailsTable.js","webpack:///./src/Routes/Signatures/Details.js","webpack:///./src/operations/mutations.js"],"sourcesContent":["import { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/index';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst BreadcrumbComponent = ({ items }) => {\n    const last = items.pop();\n    return <Breadcrumb>\n        {items.map((value, key) => <BreadcrumbItem key={key} to={value.to}>{value.name}</BreadcrumbItem>)}\n        <BreadcrumbItem isActive>{last.name}</BreadcrumbItem>\n    </Breadcrumb>;\n};\n\nBreadcrumbComponent.propTypes = {\n    items: PropTypes.array\n};\n\nexport default BreadcrumbComponent;\n","import isEqual from 'lodash/isEqual';\n\nexport const isFilterInDefaultState = (currentFilters) => {\n    const defaultfilter = { condition: { hasMatch: true } };\n\n    return isEqual(defaultfilter, currentFilters);\n};\n\nexport function formatDate(date = new Date()) {\n    const pad = (number) => `${`${number}`.length === 1 ? '0' : ''}${number}`;\n    const toFormat = new Date(date);\n\n    if (toFormat instanceof Date && !isNaN(toFormat)) {\n        const year = toFormat.getFullYear();\n        const month = toFormat.getMonth() + 1; // month is zero indexed\n        const day = toFormat.getDate();\n        const hour = toFormat.getUTCHours();\n        const minute = toFormat.getUTCMinutes();\n        const second = toFormat.getUTCSeconds();\n\n        return `${year}-${pad(month)}-${pad(day)}_${pad(hour)}-${pad(minute)}-${pad(second)}-UTC`;\n    }\n\n    return toFormat;\n}\n","import { LockIcon } from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport MessageState from '../MessageState/MessageState';\nimport { CodeEditor as PfCodeEditor } from '@patternfly/react-code-editor';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { formatDate } from '../SigTable/helper';\n\nconst CodeEditor = ({ code, language, isReadOnly, isDownloadEnabled, isCopyEnabled, height = '400px' }) => {\n    const intl = useIntl();\n\n    return <PfCodeEditor\n        isDownloadEnabled={isDownloadEnabled}\n        downloadFileName={`malware-detection_signature--${formatDate(Date.now())}`}\n        isCopyEnabled={isCopyEnabled}\n        isReadOnly={isReadOnly}\n        isLanguageLabelVisible={language}\n        code={code}\n        language={language}\n        emptyState={\n            <MessageState className='' icon={LockIcon} variant='small' title={intl.formatMessage(messages.sigCompiled)}\n                text={intl.formatMessage(messages.sigCompiledBody)} />\n        }\n        height={height}\n    />;\n};\n\nCodeEditor.propTypes = {\n    code: PropTypes.any,\n    language: PropTypes.string,\n    isReadOnly: PropTypes.bool,\n    isCopyEnabled: PropTypes.bool,\n    isDownloadEnabled: PropTypes.bool,\n    height: PropTypes.string\n};\n\nCodeEditor.defaultProps = { codeType: 'Code' };\n\nexport default CodeEditor;\n","import {\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    EmptyStateHeader,\n    EmptyStateFooter\n} from '@patternfly/react-core/dist/esm/components/EmptyState/index';\n\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst MessageState = ({ className, children, icon, iconClass, iconStyle, text, title, variant }) =>\n    <EmptyState className={className} variant={variant}>\n        <EmptyStateHeader\n            titleText={title}\n            headingLevel='h5'\n            icon={icon !== 'none' && <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />}\n        />\n        <EmptyStateBody style={{ marginBottom: '16px' }}>\n            {text}\n        </EmptyStateBody>\n        <EmptyStateFooter>\n            {children}\n        </EmptyStateFooter>\n    </EmptyState>;\n\nMessageState.propTypes = {\n    children: PropTypes.any,\n    icon: PropTypes.any,\n    iconClass: PropTypes.any,\n    iconStyle: PropTypes.any,\n    text: PropTypes.any,\n    title: PropTypes.string,\n    variant: PropTypes.any,\n    className: PropTypes.string\n};\n\nMessageState.defaultProps = {\n    icon: CubesIcon,\n    title: '',\n    variant: EmptyStateVariant.full\n};\n\nexport default MessageState;\n","import React from 'react';\nimport {\n    Button,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateBody,\n    EmptyStateHeader,\n    EmptyStateFooter\n} from '@patternfly/react-core';\nimport WrenchIcon from '@patternfly/react-icons/dist/esm/icons/wrench-icon';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { documentationURL } from '../Common';\n\nconst EmptyAccount = ({ message, className }) => {\n    const intl = useIntl();\n    return (\n        <EmptyState className={className} variant=\"lg\">\n            <EmptyStateHeader\n                titleText={intl.formatMessage(messages.emptyAccountTitle)}\n                headingLevel=\"h4\"\n                icon={<EmptyStateIcon icon={WrenchIcon} />}\n            />\n            <EmptyStateBody>\n                {message}\n            </EmptyStateBody>\n            <EmptyStateFooter>\n                <Button\n                    variant=\"primary\"\n                    component=\"a\"\n                    href={documentationURL}\n                    target=\"_blank\"\n                >\n                    {intl.formatMessage(messages.emptyAccountButton)}\n                </Button>\n            </EmptyStateFooter>\n        </EmptyState>\n    );\n};\n\nEmptyAccount.propTypes = {\n    message: propTypes.string,\n    className: propTypes.string\n};\n\nexport default EmptyAccount;\n","import './SigDetailsTable.scss';\n\nimport { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    cellWidth,\n    expandable,\n    sortable,\n    info\n} from '@patternfly/react-table/dist/esm/components/Table';\nimport {\n    Table,\n    TableBody,\n    TableHeader\n} from '@patternfly/react-table/dist/esm/deprecated/components/Table';\nimport TableToolbar from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { expandMatchMetadata } from '../Common';\nimport { GET_SIGNATURE_DETAILS_TABLE, GET_SIGNATURE_DETAILS_TABLE_GROUPS } from '../../operations/queries';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport EmptyAccount from '../SharedComponents/EmptyAccount';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { isEmpty, uniqWith } from 'lodash';\nimport SkeletonTable from '@patternfly/react-component-groups/dist/esm/SkeletonTable';\n\nconst sortIndices = { 1: 'DISPLAY_NAME', 2: 'GROUP_NAME', 3: 'OS_VERSION', 4: 'LAST_SCAN_DATE', 5: 'MATCH_COUNT' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n        case 'setGroups':\n            return { ...state, groups: action.payload };\n    }\n\n    return state;\n};\n\nconst SigDetailsTable = ({ ruleName, affectedCount, isEmptyAccount }) => {\n    const intl = useIntl();\n    const initialState = {\n        tableVars: {\n            limit: 10,\n            offset: 0,\n            orderBy: 'LAST_SCAN_DATE_DESC',\n            displayName: '',\n            hostGroupFilter: undefined,\n            ruleName\n        },\n        sortBy: {\n            index: 4,\n            direction: SortByDirection.desc\n        },\n        rows: [],\n        groups: []\n    };\n    const [{ tableVars, sortBy, rows, groups }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data, loading, error } =\n        useQuery(GET_SIGNATURE_DETAILS_TABLE, { variables: tableVars });\n    const { data: groupsData, loading: groupsLoading } =\n        useQuery(GET_SIGNATURE_DETAILS_TABLE_GROUPS, { variables: tableVars });\n    const columns = [\n        { title: intl.formatMessage(messages.name), cellFormatters: [expandable], transforms: [sortable, cellWidth(45)] },\n        { title: intl.formatMessage(messages.group), transforms: [sortable, cellWidth(15)] },\n        { title: intl.formatMessage(messages.os), key: 'osVersion', transforms: [sortable, cellWidth(10)] },\n        { title: intl.formatMessage(messages.lastMatched), transforms: [sortable, cellWidth(10)] },\n        {\n            title: intl.formatMessage(messages.totalMatches),\n            transforms: [\n                info({\n                    tooltip: intl.formatMessage(messages.totalMatchesNote)\n                }),\n                sortable, cellWidth(10)\n            ]\n        }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name).toLowerCase(),\n        type: 'text',\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { displayName: value, offset: 0 } }),\n            value: tableVars.displayName,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.name).toLowerCase() })\n        }\n    }, {\n        label: intl.formatMessage(messages.group).toLowerCase(),\n        type: isEmpty(groups) ? 'group' : 'checkbox',  // display checkboxes only if there are groups to choose from\n        filterValues: {\n            key: 'group-filter',\n            onChange: (e, value) => {\n                // Populates hostGroupFilter used in the GET_SIGNATURE_DETAILS_TABLE query\n                stateSet({ type: 'setTableVars', payload: { hostGroupFilter: value }, offset: 0 });\n            },\n            items: groupsLoading ? []  // display an empty box whilst the groups are loading\n                : isEmpty(groups) ? [{ isDisabled: true, label: intl.formatMessage(messages.noGroups) }]  // message if no groups\n                    : groups,\n            value: tableVars.hostGroupFilter,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.group).toLowerCase() })\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const host = collapseRows[rowKey + 1].hostData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells = [{\n            title: <CodeEditor height='250px' code={`${host.matches.map((match, key) => `Match Source: ${match.source}\nOffset:${match.stringOffset}\nMatch Data: ${match.stringData}\nMatch Identifier: ${match.stringIdentifier}\nMatch Scan Date: ${new Date(match.scanDate).toUTCString()}\n${match.metadata ? expandMatchMetadata(JSON.parse(match.metadata)) : ''}\n${host.matches.length > 1 && key !== host.matches.length - 1 ? `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n` : ''}`).join('')}`}\n            isDownloadEnabled isCopyEnabled />\n        }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.flatMap((data, key) => {\n            const host = data;\n            return [{\n                rowId: key,\n                isOpen: false,\n                cells: [\n                    { title: <InsightsLink to={`/systems/${host.id}`}>{host.displayName}</InsightsLink> },\n                    { title: `${host.groups?.[0]?.name || intl.formatMessage(messages.notApplicable)}` },\n                    { title: host.osVersion ? `RHEL ${host.osVersion}` : intl.formatMessage(messages.dataNotAvailable) },\n                    { title: <DateFormat date={new Date(host.matches[host.matches.length - 1].scanDate)} type='onlyDate' /> },\n                    { title: <InsightsLink to={`/systems/${host.id}`}>{host.matchCount?.toLocaleString()}</InsightsLink> }\n                ]\n            }, {\n                parent: key * 2,\n                hostData: host,\n                fullWidth: true,\n                cells: []\n            }];\n        });\n\n        stateSet({ type: 'setRows', payload: rowBuilder(data?.rulesList[0]?.affectedHostsList) });\n    }, [intl, data]);\n\n    useEffect(() => {\n        // populates the Group name filter dropdown\n        const getGroupList = groupsData => {\n            return groupsData?.filter(host => !isEmpty(host.groups)).map(host => (\n                { label: host.groups[0].name, value: host.groups[0].name })\n            );\n        };\n\n        let groupsList = getGroupList(groupsData?.rulesList[0]?.affectedHostsList) || [];\n        groupsList = uniqWith(groupsList, (group1, group2) => group1.label === group2.label); // remove duplicate group names\n        stateSet({ type: 'setGroups', payload: groupsList });\n    }, [groupsData]);\n\n    const NoResultsMatch = (\n        <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n            text={intl.formatMessage(messages.noResultsMatch)} />\n    );\n\n    const NoAffectedHosts = (\n        <MessageState className='pf-c-card' variant='large' icon={CheckCircleIcon} iconClass='ins-l-success-color'\n            title={intl.formatMessage(messages.noAffectedHosts)}\n            text={intl.formatMessage(messages.noAffectedHostsBody)} />\n    );\n\n    const EmptyAccountState = (\n        <EmptyAccount className='pf-c-card' message={intl.formatMessage(messages.emptyAccountTableBody)} />\n    );\n\n    const ErrorState = (\n        <MessageState className='pf-c-card' variant='large' title='Error' text='error' />\n    );\n\n    const buildFilterChips = () => {\n        const chips = [];\n        tableVars?.displayName &&\n            chips.push({\n                category: intl.formatMessage(messages.name), value: 'name',\n                chips: [{ name: tableVars?.displayName, value: tableVars?.displayName }]\n            });\n        tableVars?.hostGroupFilter &&\n            chips.push({\n                category: intl.formatMessage(messages.group), value: 'groups',\n                chips: tableVars.hostGroupFilter.map(group => ({ name: group, value: group }))\n            });\n        return chips;\n    };\n\n    const activeFiltersConfig = {\n        deleteTitle: intl.formatMessage(messages.resetFilters),\n        filters: buildFilterChips(),\n        showDeleteButton: tableVars?.displayName !== '' || tableVars?.hostGroupFilter !== undefined,\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                stateSet({ type: 'setTableVars', payload: { displayName: '', hostGroupFilter: undefined, offset: 0 } });\n            } else {\n                itemsToRemove.map((item) => {\n                    item.value === 'name' && stateSet({ type: 'setTableVars', payload: { displayName: '' } });\n                    if (item.value === 'groups') {\n                        const groupChips = tableVars.hostGroupFilter.filter(group => group !== item.chips[0].name);\n                        const payload = { hostGroupFilter: groupChips.length ? groupChips : undefined, offset: 0 };\n                        stateSet({ type: 'setTableVars', payload });\n                    }\n                });\n            }\n        }\n    };\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: data?.rulesList[0]?.affectedHosts?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        {loading\n            ? <SkeletonTable\n                rows={tableVars.limit}\n                columns={columns.map(column => column.title)}\n            />\n            : <Table\n                className='sigTable'\n                aria-label='Signature Details table'\n                rows={rows}\n                cells={columns}\n                onCollapse={onCollapse}\n                onSort={onSort}\n                sortBy={data?.rulesList[0]?.affectedHosts?.totalCount > 0 ? sortBy : undefined}\n                isStickyHeader\n            >\n                <TableHeader />\n                <TableBody />\n            </Table>}\n\n        {\n            (!error && !loading && affectedCount !== 0)\n                ? (data?.rulesList[0]?.affectedHosts?.totalCount === 0)\n                    ? NoResultsMatch : <React.Fragment />\n                : (!loading &&\n                    (isEmptyAccount ? EmptyAccountState : NoAffectedHosts)\n                )\n        }\n        {error && <ErrorState />}\n        <TableToolbar isFooter>\n            <Pagination\n                itemCount={data?.rulesList[0]?.affectedHosts?.totalCount || 0}\n                widgetId='pagination-options-menu-bottom'\n                perPage={tableVars.limit}\n                page={page}\n                variant={PaginationVariant.bottom}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n            />\n        </TableToolbar>\n    </React.Fragment>;\n};\n\nSigDetailsTable.propTypes = {\n    ruleName: propTypes.string,\n    affectedCount: propTypes.number,\n    isEmptyAccount: propTypes.bool\n};\n\nexport default SigDetailsTable;\n","import './Details.scss';\n\nimport {\n    Grid,\n    GridItem,\n    Label\n} from '@patternfly/react-core';\nimport {\n    Dropdown,\n    DropdownItem,\n    DropdownToggle\n} from '@patternfly/react-core/deprecated';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { ExternalLinkAltIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title';\nimport Breadcrumb from '../../Components/Breadcrumb/Breadcrumb';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SIGNATURE_DETAILS_PAGE } from '../../operations/queries';\nimport { DISABLE_SIGNATURES, ENABLE_SIGNATURES } from '../../operations/mutations';\nimport Loading from '../../Components/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { useEffect, useState } from 'react';\nimport SigDetailsTable from '../../Components/SigDetailsTable/SigDetailsTable';\nimport { isBeta, RBACPermissions } from '../../Components/Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport MessageState from '../../Components/MessageState/MessageState';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nconst Details = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const notification = (data) => dispatch(addNotification(data));\n    const hasWritePerms = usePermissions('malware-detection', RBACPermissions.write).hasAccess;\n    const { id: sigName } = useParams();\n    const breadcrumbs = [{\n        name: intl.formatMessage(messages.malwareDetectionSignatures),\n        to: `${isBeta()}/insights/malware`\n    }, { name: sigName, to: '#' }];\n    const sigDetailsQuery = { query: GET_SIGNATURE_DETAILS_PAGE, variables: { ruleName: sigName } };\n    const { data, loading } = useQuery(sigDetailsQuery.query, { variables: sigDetailsQuery.variables });\n    const sigDetailsData = data?.rulesList[0];\n    const sigMetadata = sigDetailsData?.metadata;\n    const isMatched = sigDetailsData?.affectedHosts?.totalCount > 0;\n    const isDisabled = sigDetailsData?.isDisabled;\n    const references = sigMetadata?.references || [];\n    const xfti_references = sigMetadata?.xfti_references || [];\n    const dataNotAvailable = intl.formatMessage(messages.dataNotAvailable);\n    const chrome = useChrome();\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const [showTable, setShowTable] = useState(false);\n    const mutationVars = {\n        variables: { input: { id: sigDetailsData?.id } },\n        refetchQueries: [sigDetailsQuery],\n        onCompleted: () => { setDropdownOpen(false); setShowTable(false); },\n        onError: ({ networkError: error }) => {\n            setDropdownOpen(false); setShowTable(true);\n            const errorMsg = `${error.response.statusText} - ${error.bodyText}`;\n            notification({ variant: 'danger', dismissable: true, title: intl.formatMessage(messages.error), description: `${errorMsg}` });\n        }\n    };\n    const [enableSignature, { loading: enableSigLoading }] = useMutation(ENABLE_SIGNATURES, mutationVars);\n    const [disableSignature, { loading: disableSigLoading }] = useMutation(DISABLE_SIGNATURES, mutationVars);\n\n    const detailBlock = (title, detail) => (\n        <React.Fragment>\n            <p className='ins-l-detailBlockHeader'>{title}</p>\n            <p>{detail || dataNotAvailable}</p>\n        </React.Fragment>\n    );\n\n    const referenceLink = (referenceLink, referenceName) => (\n        <a className='ins-l-referenceLink' rel=\"noopener noreferrer\" target=\"_blank\" href={referenceLink}>\n            {referenceName} <ExternalLinkAltIcon />\n        </a>\n    );\n\n    useEffect(() => {\n        chrome.updateDocumentTitle(`${sigName} - Signatures - Malware | Red Hat Insights`);\n    }, [chrome, sigName]);\n\n    useEffect(() => {\n        // only show the table when the data loads / changes\n        setShowTable(true);\n    }, [data]);\n\n    const DisabledFromMalwareAnalysis = (\n        <MessageState variant='large' icon={ExclamationTriangleIcon} iconClass='ins-l-custom-color'\n            title={intl.formatMessage(messages.disabledFromAnalysis)}\n            text={intl.formatMessage(messages.disabledFromAnalysisBody, {\n                disabledBy: sigDetailsData?.disabledBy || 'Unknown',\n                disabledAt: <DateFormat date={sigDetailsData?.disabledAt || new Date()} type=\"onlyDate\" />\n            })}>\n            {hasWritePerms &&\n                <Button variant=\"primary\" isLoading={enableSigLoading} onClick={() => enableSignature(mutationVars)}>\n                    {intl.formatMessage(enableSigLoading ? messages.enablingSignature : messages.enableSignatureForAnalysis)}\n                </Button>\n            }\n        </MessageState>\n    );\n\n    const ActionsDropdown = (\n        <Dropdown\n            ouiaId='actions'\n            toggle={\n                <DropdownToggle onToggle={() => setDropdownOpen(!dropdownOpen)} isExpanded={dropdownOpen}>\n                    {intl.formatMessage(messages.actions)}\n                </DropdownToggle>\n            }\n            isOpen={dropdownOpen}\n            dropdownItems={isDisabled ?\n                [<DropdownItem key=\"action\" ouiaId=\"enable\" onClick={() => { enableSignature(mutationVars); setShowTable(false); }}>\n                    {intl.formatMessage(enableSigLoading ? messages.enablingSignature : messages.enableSignatureForAnalysis)}\n                </DropdownItem>]\n                :\n                [<DropdownItem key=\"action\" ouiaId=\"disable\" onClick={() => { disableSignature(mutationVars); setShowTable(false); }}>\n                    {intl.formatMessage(disableSigLoading ? messages.disablingSignature : messages.disableSignatureFromAnalysis)}\n                </DropdownItem>]\n            }\n            style={{ paddingBottom: 0 }}\n        />\n    );\n\n    const matchedSystemsCount = () => {\n        return isMatched ? <React.Fragment>\n            <ExclamationCircleIcon color='var(--pf-global--danger-color--100)' />&nbsp;\n            <span style={{ color: 'var(--pf-global--danger-color--200)', fontWeight: 'bold' }}>\n                {`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}\n            </span>\n        </React.Fragment>\n            :\n            <span>{`${sigDetailsData?.affectedHosts?.totalCount}/${data?.hosts?.totalCount}`}</span>;\n    };\n\n    return <React.Fragment>\n        <PageHeader>\n            <Breadcrumb items={breadcrumbs} />\n            <Grid hasGutter>\n                <GridItem md={9} sm={9}>\n                    <PageHeaderTitle\n                        title={\n                            <span>\n                                {sigName}&nbsp;\n                                {sigMetadata?.threat_type &&\n                                    <Label variant=\"outline\" color=\"blue\">{sigMetadata.threat_type}</Label>\n                                }&nbsp;\n                                {(isDisabled || isMatched) &&\n                                    <Label variant=\"filled\" color=\"red\">{isDisabled ? 'Disabled' : 'Matched'}</Label>}\n                            </span>\n                        }\n                    />\n                </GridItem>\n                {hasWritePerms &&\n                    <GridItem md={3} sm={3}>\n                        {ActionsDropdown}\n                    </GridItem>\n                }\n\n                {loading ? <Loading /> :\n                    <GridItem>\n                        <Grid hasGutter>\n                            <GridItem xl2={7} md={8} sm={12}>\n                                <p className='ins-l-detailBlockHeader'>{intl.formatMessage(messages.description)}</p>\n                                <Truncate\n                                    text={sigMetadata?.description}\n                                    length={200}\n                                    inline\n                                />\n                            </GridItem>\n                            <GridItem xl2={5} md={4} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.matchedSystems),\n                                    isDisabled ? intl.formatMessage(messages.notApplicable) : matchedSystemsCount())\n                                }\n                            </GridItem>\n                            <GridItem lg={2} md={3} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.ruleCategory), sigMetadata?.rule_category)}\n                            </GridItem>\n                            <GridItem xl2={5} lg={6} md={5} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.ruleIntendedUsage), sigMetadata?.usage)}\n                            </GridItem>\n                            <GridItem xl2={5} md={4} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.lastmatch),\n                                    isDisabled ? intl.formatMessage(messages.notApplicable) :\n                                        sigDetailsData?.lastMatchDate ?\n                                            <DateFormat date={new Date(sigDetailsData.lastMatchDate)} type=\"onlyDate\" /> :\n                                            intl.formatMessage(messages.never))\n                                }\n                            </GridItem>\n                            <GridItem xl2={7} md={8} sm={12}>\n                                {detailBlock(intl.formatMessage(messages.author), sigMetadata?.author)}\n                            </GridItem>\n                            {(references.length > 0 || xfti_references.length > 0) &&\n                                <GridItem xl2={7} md={8} sm={12}>\n                                    {xfti_references.length === 1 ?\n                                        referenceLink(xfti_references[0], intl.formatMessage(messages.ruleAuthorReference))\n                                        :\n                                        xfti_references.map((ref, i) => referenceLink(ref,\n                                            `${intl.formatMessage(messages.ruleAuthorReference)} [${i + 1}] `))}\n                                    {references.length === 1 ?\n                                        referenceLink(references[0], intl.formatMessage(messages.ruleBackgroundReference))\n                                        :\n                                        references.map((ref, i) => referenceLink(ref,\n                                            `${intl.formatMessage(messages.ruleBackgroundReference)} [${i + 1}] `))}\n                                </GridItem>\n                            }\n                        </Grid>\n                    </GridItem>\n                }\n            </Grid>\n        </PageHeader>\n        <Main>\n            {!showTable ? <Loading /> :\n                isDisabled ? DisabledFromMalwareAnalysis :\n                    <React.Fragment>\n                        <Title className='ins-l-tableBlockHeader' headingLevel='h2'>\n                            {intl.formatMessage(messages.affectedHosts)}\n                        </Title>\n                        <SigDetailsTable\n                            ruleName={sigName}\n                            isEmptyAccount={data?.hosts?.totalCount === 0}\n                            affectedCount={sigDetailsData?.affectedHosts?.totalCount}\n                        />\n                    </React.Fragment>\n            }\n        </Main>\n    </React.Fragment>;\n};\n\nexport default Details;\n","import { gql } from '@apollo/client';\n\nexport const DISABLE_SIGNATURES = gql`mutation DisableRule ($input: DisableRuleInput = {}) {\n  disableRule(input: $input) {\n    clientMutationId\n  }\n}`;\n\nexport const ENABLE_SIGNATURES = gql`mutation EnableRule ($input: EnableRuleInput = {}) {\n  enableRule(input: $input) {\n    clientMutationId\n  }\n}`;\n\n"],"names":["BreadcrumbComponent","items","last","pop","Breadcrumb","map","value","key","BreadcrumbItem","to","name","isActive","propTypes","formatDate","date","Date","pad","number","length","toFormat","isNaN","year","getFullYear","month","getMonth","day","getDate","hour","getUTCHours","minute","getUTCMinutes","second","getUTCSeconds","code","language","isReadOnly","isDownloadEnabled","isCopyEnabled","height","intl","useIntl","downloadFileName","now","isLanguageLabelVisible","emptyState","MessageState","className","icon","LockIcon","variant","title","formatMessage","sigCompiled","text","sigCompiledBody","defaultProps","codeType","children","iconClass","iconStyle","titleText","headingLevel","style","marginBottom","full","EmptyAccount","message","EmptyState","EmptyStateHeader","emptyAccountTitle","EmptyStateIcon","EmptyStateBody","EmptyStateFooter","Button","component","href","target","emptyAccountButton","sortIndices","orderBy","index","direction","asc","tableReducer","state","action","type","tableVars","payload","sortBy","rows","groups","SigDetailsTable","ruleName","affectedCount","isEmptyAccount","initialState","limit","offset","displayName","hostGroupFilter","undefined","desc","stateSet","useReducer","data","loading","error","useQuery","variables","groupsData","groupsLoading","columns","cellFormatters","transforms","sortable","cellWidth","group","os","lastMatched","totalMatches","info","tooltip","totalMatchesNote","page","filterConfigItems","label","toLowerCase","filterValues","onChange","e","placeholder","filterBy","field","isEmpty","isDisabled","noGroups","onSetPage","onPerPageSelect","perPage","useEffect","flatMap","host","rowId","isOpen","cells","InsightsLink","id","notApplicable","osVersion","dataNotAvailable","DateFormat","matches","scanDate","matchCount","toLocaleString","parent","hostData","fullWidth","rowBuilder","rulesList","affectedHostsList","groupsList","filter","getGroupList","uniqWith","group1","group2","NoResultsMatch","SearchIcon","noResults","noResultsMatch","NoAffectedHosts","noAffectedHosts","noAffectedHostsBody","EmptyAccountState","emptyAccountTableBody","ErrorState","activeFiltersConfig","deleteTitle","resetFilters","filters","chips","push","category","buildFilterChips","showDeleteButton","onDelete","event","itemsToRemove","isAll","item","groupChips","PrimaryToolbar","pagination","itemCount","affectedHosts","totalCount","isCompact","filterConfig","SkeletonTable","column","Table","onCollapse","rowKey","collapseRows","CodeEditor","match","source","stringOffset","stringData","stringIdentifier","toUTCString","metadata","JSON","parse","join","onSort","isStickyHeader","TableToolbar","isFooter","Pagination","widgetId","bottom","dispatch","hasWritePerms","write","hasAccess","sigName","useParams","breadcrumbs","malwareDetectionSignatures","sigDetailsQuery","query","sigDetailsData","sigMetadata","isMatched","references","xfti_references","chrome","useChrome","dropdownOpen","setDropdownOpen","useState","showTable","setShowTable","mutationVars","input","refetchQueries","onCompleted","onError","networkError","errorMsg","response","statusText","bodyText","addNotification","notification","dismissable","description","enableSignature","enableSigLoading","useMutation","E","disableSignature","disableSigLoading","detailBlock","detail","referenceLink","referenceName","rel","updateDocumentTitle","DisabledFromMalwareAnalysis","disabledFromAnalysis","disabledFromAnalysisBody","disabledBy","disabledAt","isLoading","onClick","enablingSignature","enableSignatureForAnalysis","ActionsDropdown","Dropdown","ouiaId","toggle","DropdownToggle","onToggle","isExpanded","actions","dropdownItems","DropdownItem","disablingSignature","disableSignatureFromAnalysis","paddingBottom","PageHeader","Grid","hasGutter","GridItem","md","sm","PageHeaderTitle","threat_type","Label","color","Loading","xl2","Truncate","inline","matchedSystems","fontWeight","hosts","lg","ruleCategory","rule_category","ruleIntendedUsage","usage","lastmatch","lastMatchDate","never","author","ruleAuthorReference","ref","i","ruleBackgroundReference","Main","Title","DISABLE_SIGNATURES","ENABLE_SIGNATURES"],"sourceRoot":""}