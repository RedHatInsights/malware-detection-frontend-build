{"version":3,"file":"js/StatusCard.a533a43f662c17264c7d.js","mappings":"k7BAkBA,IAAMA,EAAa,SAAC,GAAgE,sBAAxDC,EAAwD,EAA9DC,KAA6BC,EAAiC,EAA1CC,QAA0BC,EAAgB,EAAhBA,UAC1DC,GAAOC,EAAAA,EAAAA,KAEPC,EACF,kBAAC,IAAD,CAAcC,QAASH,EAAKI,cAAcC,EAAAA,EAAAA,wBAGxCC,EACF,kBAAC,IAAD,CAAUC,KAAOR,EAAgB,GAAJ,GACzB,kBAAC,IAAD,CAAcS,UAAU,GAAGC,QAAQ,QAC/BC,MAAMC,EAAAA,EAAAA,MAAeC,EAAAA,GAAwBC,EAAAA,GAC7CC,WAAWH,EAAAA,EAAAA,MAAe,qBAAuB,sBACjDI,OAAOJ,EAAAA,EAAAA,MACHX,EAAKI,cAAcC,EAAAA,EAAAA,aAAwBL,EAAKI,cAAcC,EAAAA,EAAAA,SAClEW,MAAML,EAAAA,EAAAA,OAAgBX,EAAKI,cAAcC,EAAAA,EAAAA,kBACzC,8BAAOL,EAAKI,cAAcC,EAAAA,EAAAA,WAA1B,KACCV,MAAAA,GAAA,UAAAA,EAAcsB,iBAAd,SAAyBC,MAAM,GAC1B,kBAAC,IAAD,CAAYC,KAAM,IAAIC,KAAKzB,MAAAA,GAAT,UAASA,EAAcsB,iBAAvB,aAAS,EAAyBC,MAAM,GAAGG,WAAYC,KAAK,aAChFtB,EAAKI,cAAcC,EAAAA,EAAAA,iBAKnC,OAAO,kBAAC,IAAD,CAAMG,UAAU,cACnB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACKX,EAAkB,kBAAC,IAAD,MAAkD,KAAnC,UAAAF,EAAa4B,aAAb,eAAoBC,aAAoBtB,GAAqBI,GAE7FP,GAAa,kBAAC,aAAD,KACX,kBAAC,IAAD,CAAUQ,KAAM,EACZC,UAAU,2GACbX,EAAkB,kBAAC,IAAD,MACb,kBAAC,IAAD,CAAUW,UAAU,oBAAoBD,KAAM,GAC5C,kBAAC,IAAD,CAAUC,UAAU,gBAAgBD,KAAM,IACtC,kBAAC,aAAD,KACI,iCAASZ,MAAAA,GAAA,UAAAA,EAAc8B,iBAAd,mBAAyBC,oBAAzB,eAAuCC,mBAAoB,GACpE,6BACA,kBAAC,KAAD,CAAQnB,UAAU,mBAAmBC,QAAQ,OACzCmB,QAAS,kBAAMC,EAAAA,EAAAA,IAAgB,EAAD,MAAMA,EAAAA,EAAAA,OAAN,IAAyBC,UAAW,CAAEC,UAAU,QAC7E/B,EAAKI,cAAcC,EAAAA,EAAAA,sBAIhC,kBAAC,IAAD,CAAUG,UAAU,gBAAgBD,KAAM,IACtC,iCAASZ,MAAAA,GAAA,UAAAA,EAAc8B,iBAAd,mBAAyBO,oBAAzB,eAAuCL,mBAAoB,GACpE,2BAAI3B,EAAKI,cAAcC,EAAAA,EAAAA,qBAC3B,kBAAC,IAAD,CAAUG,UAAU,gBAAgBD,KAAM,IACtC,iCAASZ,MAAAA,GAAA,UAAAA,EAAc8B,iBAAd,mBAAyBQ,qBAAzB,eAAwCN,mBAAoB,GACrE,2BAAI3B,EAAKI,cAAcC,EAAAA,EAAAA,4BASvDX,EAAWwC,UAAYC,EAAAA,GAEvB","sources":["webpack:///./src/Components/StatusCard/StatusCard.js"],"sourcesContent":["import './StatusCard.scss';\n\nimport { Card, CardBody } from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport { hasMalware, sigTableFilters } from '../../store/cache';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport Loading from '../../Components/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport React from 'react';\nimport { gqlProps } from '../Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport EmptyAccount from '../SharedComponents/EmptyAccount';\n\nconst StatusCard = ({ data: sigStatsData, loading: sigStatsLoading, noSigData }) => {\n    const intl = useIntl();\n\n    const EmptyAccountState = (\n        <EmptyAccount message={intl.formatMessage(messages.emptyAccountCardBody)} />\n    );\n\n    const FilterResultState = (\n        <GridItem span={!noSigData ? 7 : 12}>\n            <MessageState className='' variant='large'\n                icon={hasMalware() ? ExclamationCircleIcon : CheckCircleIcon}\n                iconClass={hasMalware() ? 'ins-l-danger-color' : 'ins-l-success-color'}\n                title={hasMalware() ?\n                    intl.formatMessage(messages.activeFound) : intl.formatMessage(messages.noFound)}\n                text={hasMalware() && intl.formatMessage(messages.hostsVulnerable)} >\n                <span>{intl.formatMessage(messages.lastCheck)} </span>\n                {sigStatsData?.hostScans?.nodes[0]\n                    ? <DateFormat date={new Date(sigStatsData?.hostScans?.nodes[0].createdAt)} type='onlyDate' /> :\n                    intl.formatMessage(messages.noAnalysisRun)}\n            </MessageState>\n        </GridItem>\n    );\n\n    return <Card className='ins-l-card'>\n        <CardBody>\n            <Grid>\n                {sigStatsLoading ? <Loading /> : (sigStatsData.hosts?.totalCount === 0 && EmptyAccountState || FilterResultState)\n                }\n                {!noSigData && <React.Fragment>\n                    <GridItem span={1}\n                        className='pf-c-divider pf-m-vertical pf-m-inset-md pf-m-inset-none-on-md pf-m-inset-sm-on-lg pf-m-inset-xs-on-xl' />\n                    {sigStatsLoading ? <Loading />\n                        : <GridItem className='ins-l-sigStatCard' span={3}>\n                            <GridItem className='ins-l-sigStat' span={12}>\n                                <React.Fragment>\n                                    <strong>{sigStatsData?.ruleStats?.matchedCount?.toLocaleString() || 0}</strong>\n                                    <br />\n                                    <Button className='ins-l-sigStatNum' variant='link'\n                                        onClick={() => sigTableFilters({ ...sigTableFilters(), condition: { hasMatch: true } })}>\n                                        {intl.formatMessage(messages.matchedSignatures)}\n                                    </Button>\n                                </React.Fragment>\n                            </GridItem>\n                            <GridItem className='ins-l-sigStat' span={12}>\n                                <strong>{sigStatsData?.ruleStats?.enabledCount?.toLocaleString() || 0}</strong>\n                                <p>{intl.formatMessage(messages.enabledSignatures)}</p></GridItem>\n                            <GridItem className='ins-l-sigStat' span={12}>\n                                <strong>{sigStatsData?.ruleStats?.disabledCount?.toLocaleString() || 0}</strong>\n                                <p>{intl.formatMessage(messages.disabledSignatures)}</p></GridItem>\n                        </GridItem>\n                    }\n                </React.Fragment>}\n            </Grid>\n        </CardBody>\n    </Card >;\n};\n\nStatusCard.propTypes = gqlProps;\n\nexport default StatusCard;\n"],"names":["StatusCard","sigStatsData","data","sigStatsLoading","loading","noSigData","intl","useIntl","EmptyAccountState","message","formatMessage","messages","FilterResultState","span","className","variant","icon","hasMalware","ExclamationCircleIcon","CheckCircleIcon","iconClass","title","text","hostScans","nodes","date","Date","createdAt","type","hosts","totalCount","ruleStats","matchedCount","toLocaleString","onClick","sigTableFilters","condition","hasMatch","enabledCount","disabledCount","propTypes","gqlProps"],"sourceRoot":""}