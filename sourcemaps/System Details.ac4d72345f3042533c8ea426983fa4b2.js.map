{"version":3,"file":"js/System Details.95cccce76060a0cfbc40.js","mappings":"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","sources":["webpack:///./src/Components/Breadcrumb/Breadcrumb.js","webpack:///./src/Components/SysDetailsTable/SysDetailsTable.js","webpack:///./src/Routes/Systems/Details.js"],"sourcesContent":["import { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core/dist/js/components/Breadcrumb/index';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst BreadcrumbComponent = ({ items }) => {\n    const last = items.pop();\n    return <Breadcrumb>\n        {items.map((value, key) => <BreadcrumbItem key={key} to={value.to}>{value.name}</BreadcrumbItem>)}\n        <BreadcrumbItem isActive>{last.name}</BreadcrumbItem>\n    </Breadcrumb>;\n};\n\nBreadcrumbComponent.propTypes = {\n    items: PropTypes.array\n};\n\nexport default BreadcrumbComponent;\n","import { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    cellWidth,\n    expandable,\n    sortable,\n    info\n} from '@patternfly/react-table/dist/esm/components/Table';\nimport {\n    Table,\n    TableBody,\n    TableHeader\n} from '@patternfly/react-table/dist/esm/deprecated/components/Table';\nimport TableToolbar from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { expandMatchMetadata } from '../Common';\nimport { GET_SYSTEMS_DETAILS_TABLE_PAGE } from '../../operations/queries';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport StatusLabel from '../StatusLabel/StatusLabel';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport SkeletonTable from '@patternfly/react-component-groups/dist/esm/SkeletonTable';\n\nconst sortIndices = { 1: 'NAME', 2: 'LAST_STATUS', 3: 'LAST_MATCH_DATE', 4: 'MATCH_COUNT' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n    }\n\n    return state;\n};\n\nconst SysDetailsTable = ({ systemId }) => {\n    const intl = useIntl();\n    const initialState = {\n        tableVars: {\n            limit: 10,\n            offset: 0,\n            orderBy: 'LAST_MATCH_DATE_ASC',\n            ruleName: '',\n            systemId\n        },\n        sortBy: {\n            index: 2,\n            direction: SortByDirection.asc\n        },\n        rows: []\n    };\n    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data, loading, error } =\n        useQuery(GET_SYSTEMS_DETAILS_TABLE_PAGE, { variables: tableVars });\n    const columns = [\n        { title: intl.formatMessage(messages.sigName), cellFormatters: [expandable], transforms: [sortable, cellWidth(55)] },\n        { title: intl.formatMessage(messages.lastStatus), transforms: [cellWidth(10), sortable] },\n        { title: intl.formatMessage(messages.matched), transforms: [sortable, cellWidth(10)] },\n        {\n            title: intl.formatMessage(messages.totalMatches),\n            transforms: [\n                cellWidth(15),\n                info({\n                    tooltip: intl.formatMessage(messages.totalMatchesNote)\n                }),\n                sortable\n            ]\n        }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.sig).toLowerCase(),\n        type: 'text',\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { ruleName: value, offset: 0 } }),\n            value: tableVars.ruleName,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.sig).toLowerCase() })\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const host = collapseRows[rowKey + 1].hostData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells = [{\n            title: <CodeEditor height='250px' code={`${host.matches.map((match, key) => `Match Source: ${match.source}\nOffset:${match.stringOffset}\nMatch Data: ${match.stringData}\nMatch Identifier: ${match.stringIdentifier}\nMatch Scan Date: ${new Date(match.scanDate).toUTCString()}\n${match.metadata ? expandMatchMetadata(JSON.parse(match.metadata.replaceAll('\\n', ''))) : ''}\n${host.matches.length > 1 && key !== host.matches.length - 1 ? `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n` : ''}`).join('')}`}\n            isDownloadEnabled isCopyEnabled />\n        }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.host.affectedRulesList.flatMap((data, key) => ([{\n            rowId: key,\n            isOpen: false,\n            cells: [\n                { title: <InsightsLink to={`/signatures/${data.name}`}>{data.name}</InsightsLink> },\n                { title: <StatusLabel isDisabled={data.isDisabled} hasMatch={data.lastStatus} displayMatch /> },\n                { title: <DateFormat date={new Date(data.lastMatchDate)} type='onlyDate' /> },\n                { title: <InsightsLink to={`/signatures/${data.name}`}>{data.matchCount?.toLocaleString()}</InsightsLink> }\n\n            ]\n        }, {\n            parent: key * 2,\n            hostData: data,\n            fullWidth: true,\n            cells: []\n        }]\n        ));\n\n        !loading && stateSet({ type: 'setRows', payload: rowBuilder(data) });\n    }, [intl, data, loading]);\n\n    const buildFilterChips = () => {\n        return tableVars?.ruleName ? [{\n            category: intl.formatMessage(messages.signature), value: 'signature',\n            chips: [{ name: tableVars.ruleName, value: tableVars.ruleName }]\n        }] : [];\n    };\n\n    const activeFiltersConfig = {\n        deleteTitle: intl.formatMessage(messages.resetFilters),\n        filters: buildFilterChips(),\n        showDeleteButton: tableVars?.ruleName !== '',\n        onDelete: () => stateSet({ type: 'setTableVars', payload: { ruleName: '', offset: 0 } })\n    };\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: data?.host?.affectedRules?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        {!loading && <Table\n            className='sigTable'\n            aria-label='Signature Details table'\n            rows={rows}\n            cells={columns}\n            onCollapse={onCollapse}\n            onSort={onSort}\n            sortBy={data?.host?.affectedRules?.totalCount > 0 ? sortBy : undefined}\n            isStickyHeader\n        >\n            <TableHeader />\n            <TableBody />\n        </Table>\n        }\n\n        {loading\n            ? <SkeletonTable\n                rows={tableVars.limit}\n                columns={columns.map(column => column.title)}\n            />\n            : !error ?\n                data?.host?.lastMatchDate ?\n                    data?.host?.affectedRules?.totalCount === 0 ?\n                        <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n                            text={intl.formatMessage(messages.noResultsMatch)} /> : <React.Fragment />\n                    : <MessageState className='pf-c-card' variant='large' icon={CheckCircleIcon} iconClass='ins-l-success-color'\n                        title={intl.formatMessage(messages.notMatched)}\n                        text={intl.formatMessage(messages.notMatchedBody)} />\n                : <MessageState className='pf-c-card' variant='large' title='Error' text='error' />}\n        <TableToolbar isFooter>\n            <Pagination\n                itemCount={data?.host?.affectedRules?.totalCount || 0}\n                widgetId='pagination-options-menu-bottom'\n                perPage={tableVars.limit}\n                page={page}\n                variant={PaginationVariant.bottom}\n                onSetPage={onSetPage}\n                onPerPageSelect={onPerPageSelect}\n            />\n        </TableToolbar>\n    </React.Fragment>;\n};\n\nSysDetailsTable.propTypes = { systemId: propTypes.string };\n\nexport default SysDetailsTable;\n","import './Details.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title';\n\nimport Breadcrumb from '../../Components/Breadcrumb/Breadcrumb';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SYSTEMS_DETAILS_PAGE } from '../../operations/queries';\nimport Loading from '../../Components/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React, { useEffect } from 'react';\nimport SysDetailsTable from '../../Components/SysDetailsTable/SysDetailsTable';\nimport { isBeta } from '../../Components/Common';\nimport messages from '../../Messages';\nimport { totalMatchesTitle } from '../../Components/Common';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport PropTypes from 'prop-types';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst Details = () => {\n    const intl = useIntl();\n    const { id: sysId } = useParams();\n    const { data, loading } = useQuery(GET_SYSTEMS_DETAILS_PAGE, {\n        variables: { id: sysId }\n    });\n    const sysData = data?.hosts?.nodes[0];\n    const breadcrumbs = [{\n        name: intl.formatMessage(messages.malwareDetectionSys),\n        to: `${isBeta()}/insights/malware/systems`\n    }, { name: sysData?.displayName, to: '#' }];\n    const detailBlock = (title, detail) => <React.Fragment>\n        <p>{title}</p>\n        <p>{detail}</p>\n    </React.Fragment>;\n\n    const chrome = useChrome();\n    //Need to wait for sysData to grab variable\n    useEffect(() => {\n        sysData && chrome.updateDocumentTitle(`${sysData.displayName} - Systems - Malware | Red Hat Insights`);\n    }, [chrome, sysData]);\n    return <React.Fragment>\n        <PageHeader>\n            <Breadcrumb items={breadcrumbs} />\n            <PageHeaderTitle title={sysData?.displayName} className=\"pf-u-mb-md\" />\n            <Grid hasGutter>\n                {loading ? <Loading /> :\n                    <GridItem xl={5} lg={12} md={12} sm={12}>\n                        <Grid hasGutter>\n                            <GridItem span={12}>\n                                {<p>{`${intl.formatMessage(messages.uuid)}: ${sysData.id}`}</p>}\n                            </GridItem>\n                            <GridItem span={4}>\n                                {detailBlock(intl.formatMessage(messages.lastmatch), sysData?.lastMatchDate ?\n                                    <DateFormat date={new Date(sysData.lastMatchDate)} type=\"onlyDate\" />\n                                    : intl.formatMessage(messages.never))}\n                            </GridItem>\n                            <GridItem span={4}>\n                                {detailBlock(intl.formatMessage(messages.lastScan),\n                                    <DateFormat date={new Date(sysData.lastScanDate)} type=\"exact\" />)}\n                            </GridItem>\n                            <GridItem span={4}>\n                                {detailBlock(totalMatchesTitle({\n                                    tooltip: intl.formatMessage(messages.totalMatchesNote),\n                                    title: intl.formatMessage(messages.totalMatches)\n                                }), sysData?.totalMatches)}\n                            </GridItem>\n                        </Grid>\n                    </GridItem>}\n                <GridItem md={7} sm={0}>\n                </GridItem>\n            </Grid>\n        </PageHeader>\n        <Main>\n            <Title className='ins-l-tableBlockHeader' headingLevel='h2'>\n                {intl.formatMessage(messages.matchedSignaturesCount, {\n                    matchedCount: sysData?.totalMatches\n                })}\n            </Title>\n            {loading ? <Loading /> : <SysDetailsTable systemId={sysData.id} />}\n        </Main>\n    </React.Fragment>;\n};\n\nDetails.propTypes = {\n    title: PropTypes.string\n};\nexport default Details;\n"],"names":["BreadcrumbComponent","items","last","pop","Breadcrumb","map","value","key","BreadcrumbItem","to","name","isActive","propTypes","sortIndices","orderBy","index","direction","asc","tableReducer","state","action","type","tableVars","payload","sortBy","rows","SysDetailsTable","systemId","intl","useIntl","initialState","limit","offset","ruleName","stateSet","useReducer","data","loading","error","useQuery","variables","columns","title","formatMessage","sigName","cellFormatters","transforms","sortable","cellWidth","lastStatus","matched","totalMatches","info","tooltip","totalMatchesNote","page","filterConfigItems","label","sig","toLowerCase","filterValues","onChange","e","placeholder","filterBy","field","onSetPage","onPerPageSelect","perPage","useEffect","host","affectedRulesList","flatMap","rowId","isOpen","cells","InsightsLink","StatusLabel","isDisabled","hasMatch","displayMatch","DateFormat","date","Date","lastMatchDate","matchCount","toLocaleString","parent","hostData","fullWidth","rowBuilder","activeFiltersConfig","deleteTitle","resetFilters","filters","category","signature","chips","showDeleteButton","onDelete","PrimaryToolbar","pagination","itemCount","affectedRules","totalCount","isCompact","filterConfig","Table","className","onCollapse","rowKey","collapseRows","CodeEditor","height","code","matches","match","source","stringOffset","stringData","stringIdentifier","scanDate","toUTCString","metadata","JSON","parse","replaceAll","length","join","isDownloadEnabled","isCopyEnabled","onSort","undefined","isStickyHeader","SkeletonTable","column","MessageState","variant","text","icon","SearchIcon","noResults","noResultsMatch","iconClass","notMatched","notMatchedBody","TableToolbar","isFooter","Pagination","widgetId","bottom","Details","id","sysId","useParams","sysData","hosts","nodes","breadcrumbs","malwareDetectionSys","displayName","detailBlock","detail","chrome","useChrome","updateDocumentTitle","PageHeader","PageHeaderTitle","Grid","hasGutter","Loading","GridItem","xl","lg","md","sm","span","uuid","lastmatch","never","lastScan","lastScanDate","Main","Title","headingLevel","matchedSignaturesCount","matchedCount"],"sourceRoot":""}