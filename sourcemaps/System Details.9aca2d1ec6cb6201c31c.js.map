{"version":3,"sources":["webpack:///./src/Components/SysDetailsTable/SysDetailsTable.js","webpack:///./src/Routes/Systems/Details.js"],"names":["sortIndices","orderBy","index","direction","SortByDirection","tableReducer","state","action","type","tableVars","payload","sortBy","rows","SysDetailsTable","systemId","intl","useIntl","initialState","limit","offset","ruleName","useReducer","stateSet","useQuery","GET_SYSTEMS_DETAILS_TABLE_PAGE","variables","data","loading","error","columns","title","formatMessage","messages","cellFormatters","expandable","transforms","sortable","cellWidth","page","filterConfigItems","label","toLowerCase","filterValues","key","onChange","e","value","placeholder","field","onSetPage","onPerPageSelect","perPage","useEffect","host","affectedRulesList","flatMap","rowId","isOpen","cells","name","DateFormat","date","Date","createdAt","matchCount","toLocaleString","parent","hostData","fullWidth","rowBuilder","PrimaryToolbar","pagination","itemCount","affectedRules","totalCount","isCompact","filterConfig","items","Table","className","onCollapse","rowKey","collapseRows","CodeEditor","height","code","matches","map","match","source","stringOffset","stringData","stringIdentifier","scanDate","metadata","length","join","isDownloadEnabled","isCopyEnabled","onSort","isStickyHeader","Loading","MessageState","variant","text","lastMatchDate","icon","SearchIcon","CheckCircleIcon","iconClass","Pagination","widgetId","PaginationVariant","propTypes","sysId","useParams","id","breadcrumbs","to","isBeta","GET_SYSTEMS_DETAILS_PAGE","sysData","hosts","nodes","detailBlock","detail","PageHeader","Breadcrumb","Title","headingLevel","size","TitleSizes","Grid","hasGutter","GridItem","md","sm","span","updated","totalMatches","Main"],"mappings":"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","file":"js/System Details.42666302d00b0e69d447.js","sourcesContent":["import { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    expandable,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table';\n\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SYSTEMS_DETAILS_TABLE_PAGE } from '../../operations/queries';\nimport Loading from '../Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport messages from '../../Messages';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\n\nconst sortIndices = { 1: 'NAME', 2: 'CREATED_AT', 3: 'MATCH_COUNT' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n    }\n\n    return state;\n};\n\nconst SysDetailsTable = ({ systemId }) => {\n    const intl = useIntl();\n    const initialState = {\n        tableVars: {\n            limit: 10,\n            offset: 0,\n            orderBy: 'CREATED_AT_ASC',\n            ruleName: '',\n            systemId\n        },\n        sortBy: {\n            index: 2,\n            direction: SortByDirection.asc\n        },\n        rows: []\n    };\n    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data, loading, error } =\n        useQuery(GET_SYSTEMS_DETAILS_TABLE_PAGE, { variables: tableVars });\n    const columns = [\n        { title: intl.formatMessage(messages.sigName), cellFormatters: [expandable], transforms: [sortable, cellWidth(45)] },\n        { title: intl.formatMessage(messages.lastmatch), transforms: [sortable] },\n        { title: intl.formatMessage(messages.totalMatches), transforms: [sortable] }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.sig).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { ruleName: value } }),\n            value: tableVars.ruleName,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.sig).toLowerCase() })\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const host = collapseRows[rowKey + 1].hostData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells =  [{\n            title: <CodeEditor height='250px' code={`${host.matches.map((match, key) => `Match Source: ${match.source}\nOffset:${match.stringOffset}\nMatch Data: ${match.stringData}\nMatch Identifier: ${match.stringIdentifier}\nMatch Scan Date: ${new Date(match.scanDate)}\n${match.metadata ? `Metadata:${match.metadata}` : ''}\n${host.matches.length > 1 && key !== host.matches.length - 1 ? `~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n` : ''}`).join('')}`}\n            isDownloadEnabled isCopyEnabled/> }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.host.affectedRulesList.flatMap((data, key) => ([{\n            rowId: key,\n            isOpen: false,\n            cells: [\n                { title: <span>{data.name}</span> },\n                { title: <DateFormat date={new Date(data.createdAt)} type='onlyDate' /> },\n                { title: <span>{data.matchCount?.toLocaleString()}</span> }\n\n            ]\n        }, {\n            parent: key * 2,\n            hostData: data,\n            fullWidth: true,\n            cells: []\n        }]\n        ));\n\n        !loading && stateSet({ type: 'setRows', payload: rowBuilder(data) });\n    }, [intl, data, loading]);\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: data?.host?.affectedRules?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n        />\n        <Table className='sigTable' aria-label='Signature Details table'\n            rows={rows} cells={columns} onCollapse={onCollapse}\n            onSort={onSort} sortBy={sortBy} isStickyHeader>\n            <TableHeader />\n            <TableBody />\n        </Table>\n        {loading ? <Loading type='table' /> :\n            !error ?\n                data?.host?.lastMatchDate ?\n                    data?.host?.affectedRules?.totalCount === 0 ?\n                        <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n                            text={intl.formatMessage(messages.noResultsMatch)} /> : <React.Fragment />\n                    :  <MessageState className='pf-c-card' variant='large' icon={CheckCircleIcon} iconClass='ins-l-success-color'\n                        title={intl.formatMessage(messages.noAffectedHosts)}\n                        text={intl.formatMessage(messages.noAffectedHostsBody)} />\n                : <MessageState className='pf-c-card' variant='large' title='Error' text='error' />}\n        <Pagination\n            itemCount={data?.host?.affectedRules?.totalCount || 0}\n            widgetId='pagination-options-menu-bottom'\n            perPage={tableVars.limit}\n            page={page}\n            variant={PaginationVariant.bottom}\n            onSetPage={onSetPage}\n            onPerPageSelect={onPerPageSelect}\n        />\n    </React.Fragment>;\n};\n\nSysDetailsTable.propTypes = { systemId: propTypes.string };\n\nexport default SysDetailsTable;\n","import './Details.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport { Title, TitleSizes } from '@patternfly/react-core/dist/esm/components/Title';\n\nimport Breadcrumb from '../../Components/Breadcrumb/Breadcrumb';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SYSTEMS_DETAILS_PAGE } from '../../operations/queries';\nimport Loading from '../../Components/Loading/Loading';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport React from 'react';\nimport SysDetailsTable from '../../Components/SysDetailsTable/SysDetailsTable';\nimport { isBeta } from '../../Components/Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nconst Details = () => {\n    const intl = useIntl();\n    const { id: sysId } = useParams();\n    const breadcrumbs = [{ name: intl.formatMessage(messages.malwareDetectionSigs),\n        to: `${isBeta()}/insights/malware/systems` }, { name: sysId, to: '#' }];\n    const { data, loading } = useQuery(GET_SYSTEMS_DETAILS_PAGE, {\n        variables: { name: sysId  }\n    });\n    const sysData = data?.hosts?.nodes[0];\n    const detailBlock = (title, detail) => <React.Fragment>\n        <p className='ins-l-detailBlockHeader'>{title}</p>\n        <p>{detail}</p>\n    </React.Fragment>;\n\n    return <React.Fragment>\n        <PageHeader>\n            <Breadcrumb items={breadcrumbs} />\n            <Title headingLevel='h1' size={TitleSizes['3xl']}>{sysId}</Title>\n            <Grid hasGutter>\n                {loading ? <Loading /> :\n                    <GridItem md={5} sm={12}>\n                        <Grid hasGutter>\n                            <GridItem span={12}>\n                                {<p className='ins-l-detailBlockHeader'>{`${intl.formatMessage(messages.uuid)}: ${sysData.id}`}</p>}\n                            </GridItem>\n                            <GridItem span={4}>\n                                {detailBlock(intl.formatMessage(messages.lastmatch), sysData?.lastMatchDate ?\n                                    <DateFormat date={new Date(sysData.lastMatchDate)} type=\"onlyDate\" />\n                                    : intl.formatMessage(messages.never))}\n                            </GridItem>\n                            <GridItem span={4}>\n                                {detailBlock(intl.formatMessage(messages.lastSeen),\n                                    <DateFormat date={new Date(sysData.updated)} type=\"exact\" />)}\n                            </GridItem>\n                            <GridItem span={4}>\n                                {detailBlock(intl.formatMessage(messages.totalMatches), sysData?.totalMatches)}\n                            </GridItem>\n                        </Grid>\n                    </GridItem>}\n                <GridItem md={7} sm={0}>\n                </GridItem>\n            </Grid>\n        </PageHeader>\n        <Main>\n            <Title className='ins-l-tableBlockHeader' headingLevel='h1' size={TitleSizes['3xl']}>\n                {intl.formatMessage(messages.matchedSignatures)}\n            </Title>\n            {loading ? <Loading /> : <SysDetailsTable systemId={sysData.id} />}\n        </Main>\n    </React.Fragment>;\n};\n\nexport default Details;\n"],"sourceRoot":""}