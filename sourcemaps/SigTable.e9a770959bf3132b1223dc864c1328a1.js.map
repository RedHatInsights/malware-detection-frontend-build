{"version":3,"file":"js/SigTable.1696464658616.c703c49f24e11357efe6.js","mappings":"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","sources":["webpack:///./src/Components/CodeEditor/CodeEditor.js","webpack:///./src/Components/MessageState/MessageState.js","webpack:///./src/Components/SigTable/SignatureDescription.js","webpack:///./src/Components/SigTable/SigTable.js","webpack:///./src/Components/StatusLabel/StatusLabel.js","webpack:///./src/Components/SysTable/hooks.js","webpack:///./src/Components/SysTable/constants.js","webpack:///./src/Components/SysTable/matchFilter.js","webpack:///./src/Components/SysTable/Helpers.js","webpack:///./src/Components/SysTable/SysTable.js","webpack:///./src/operations/mutations.js"],"sourcesContent":["import { LockIcon } from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport MessageState from '../MessageState/MessageState';\nimport { CodeEditor as PfCodeEditor } from '@patternfly/react-code-editor';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst CodeEditor = ({ code, language, isReadOnly, isDownloadEnabled, isCopyEnabled, height = '400px' }) => {\n    const intl = useIntl();\n\n    return <PfCodeEditor\n        isDownloadEnabled={isDownloadEnabled}\n        isCopyEnabled={isCopyEnabled}\n        isReadOnly={isReadOnly}\n        isLanguageLabelVisible={language}\n        code={code}\n        language={language}\n        emptyState={\n            <MessageState className='' icon={LockIcon} variant='small' title={intl.formatMessage(messages.sigCompiled)}\n                text={intl.formatMessage(messages.sigCompiledBody)} />\n        }\n        height={height}\n    />;\n};\n\nCodeEditor.propTypes = {\n    code: PropTypes.any,\n    language: PropTypes.string,\n    isReadOnly: PropTypes.bool,\n    isCopyEnabled: PropTypes.bool,\n    isDownloadEnabled: PropTypes.bool,\n    height: PropTypes.string\n};\n\nCodeEditor.defaultProps = { codeType: 'Code' };\n\nexport default CodeEditor;\n","import { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant } from '@patternfly/react-core/dist/esm/components/EmptyState/index';\n\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Title } from '@patternfly/react-core/dist/esm/components/Title/Title';\n\nconst MessageState = ({ className, children, icon, iconClass, iconStyle, text, title, variant }) =>\n    <EmptyState className={className} variant={variant}>\n        {icon !== 'none' && <EmptyStateIcon className={iconClass} style={iconStyle} icon={icon} />}\n        <Title headingLevel='h5' size='lg'>\n            {title}\n        </Title>\n        <EmptyStateBody style={{ marginBottom: '16px' }}>\n            {text}\n        </EmptyStateBody>\n        {children}\n    </EmptyState>;\n\nMessageState.propTypes = {\n    children: PropTypes.any,\n    icon: PropTypes.any,\n    iconClass: PropTypes.any,\n    iconStyle: PropTypes.any,\n    text: PropTypes.any,\n    title: PropTypes.string,\n    variant: PropTypes.any,\n    className: PropTypes.string\n};\n\nMessageState.defaultProps = {\n    icon: CubesIcon,\n    title: '',\n    variant: EmptyStateVariant.full\n};\n\nexport default MessageState;\n","import React, { useState } from 'react';\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst SignatureDesctiprion = ({ signature }) => {\n    const intl = useIntl();\n    const [isCodeEditorEnabled] = useState(false);\n    return (\n        <Grid hasGutter>\n            {isCodeEditorEnabled && (\n                <GridItem span={6}>\n                    <CodeEditor code={signature.rawRule} isReadOnly />\n                </GridItem>\n            )}\n            <GridItem span={isCodeEditorEnabled && 6 || 12}> <Text className='ins-l-sigtable--title' component={TextVariants.h6}>\n                {intl.formatMessage(messages.description)}\n            </Text>{signature.metadata.description}\n            </GridItem>\n        </Grid>\n    );\n};\n\nSignatureDesctiprion.propTypes = {\n    signature: PropTypes.object\n};\nexport default SignatureDesctiprion;\n","/* eslint-disable no-unused-vars */\nimport './SigTable.scss';\n\nimport { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination/index';\nimport React, { useEffect, useReducer, useState } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    classNames,\n    expandable,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table/index';\nimport { gqlProps } from '../Common';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SIGNATURE_TABLE } from '../../operations/queries';\nimport { DISABLE_SIGNATURES, ENABLE_SIGNATURES } from '../../operations/mutations';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport StatusLabel from '../StatusLabel/StatusLabel';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport { Label } from '@patternfly/react-core/dist/esm/components/Label';\nimport messages from '../../Messages';\nimport { sigTableFilters } from '../../store/cache';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { useReactiveVar } from '@apollo/client';\nimport SignatureDescription from './SignatureDescription';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\n\nconst initialState = {\n    tableVars: {\n        limit: 10,\n        offset: 0,\n        orderBy: ['LAST_MATCH_DATE_NULLS_LAST_DESC', 'NAME_ASC'],\n        ruleName: ''\n    },\n    sortBy: {\n        index: 5,\n        direction: SortByDirection.desc\n    },\n    rows: [],\n    selectedSigs: []\n};\nconst sortIndices = { 2: 'NAME', 3: 'HAS_MATCH', 4: 'HOST_COUNT', 5: 'LAST_MATCH_DATE_NULLS_LAST' };\nconst orderBy = ({ index, direction }) => {\n    const orderByVariable = `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n    // Additionally orderBy signature name to add more determinism to the order of the table rows\n    return sortIndices[index] !== 'NAME' ? [orderByVariable, 'NAME_ASC'] : orderByVariable;\n};\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n        case 'setSelectedSigs':\n            return { ...state, selectedSigs: action.payload };\n    }\n\n    return state;\n};\n\nconst SigTable = ({ refetchSigPageData }) => {\n    const intl = useIntl();\n    const [{ tableVars, sortBy, rows, selectedSigs }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const [showTable, setShowTable] = useState(false);\n    const { data: sigTableData, loading: sigTableLoading, error: sigTableError, client } =\n        useQuery(GET_SIGNATURE_TABLE, { variables: { ...tableVars, ...useReactiveVar(sigTableFilters) } });\n    const mutationVars = {\n        variables: { input: { id: selectedSigs.map(sig => sig.id) } },\n        onCompleted: () => {\n            setShowTable(false);  // don't display the sig table rows whilst we are refetching the data\n            client.resetStore();  // clear the query cache so we must refetch all new data\n            refetchSigPageData(); // updates the StatusCard component and hasMalware flag (on the same page as SigTable)\n            stateSet({ type: 'setSelectedSigs', payload: [] }); // unselect any sigs that were selected\n        }\n    };\n    const [enableSignature, { loading: enableSigLoading }] = useMutation(ENABLE_SIGNATURES, mutationVars);\n    const [disableSignature, { loading: disableSigLoading }] = useMutation(DISABLE_SIGNATURES, mutationVars);\n\n    const columns = [\n        { title: intl.formatMessage(messages.sigName), cellFormatters: [expandable], transforms: [sortable, cellWidth(45)] },\n        { title: intl.formatMessage(messages.lastStatus), transforms: [cellWidth(10), sortable] },\n        { title: intl.formatMessage(messages.systems), transforms: [cellWidth(10), sortable] },\n        { title: intl.formatMessage(messages.lastMatched), transforms: [cellWidth(10), sortable] }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n    const sigTableFiltersInitialState =  {\n        items: { hasMatch: 'true', isDisabled: [] },\n        condition: { hasMatch: true, isDisabled: undefined }\n    };\n\n    const updateSelectedSigs = ((selectedRows, selected) => {\n        // This function handles adding/removing sigs to/from the selectedSigs when rows are selected/unselected\n        const rowSigIds = selectedRows.map(row => row.sigData.id);\n        // remove sigs from the list when unselecting, but also prevents duplicate selectedSigs when adding\n        const filteredSigs = selectedSigs.filter(sig => !rowSigIds.includes(sig.id));\n        if (selected) {\n            // add the new selected sigs to the existing list of selectedSigs\n            return [...filteredSigs, ...selectedRows.map(sig =>\n                ({ id: sig.sigData.id, name: sig.sigData.name, isDisabled: sig.sigData.isDisabled }))];\n        } else {\n            return filteredSigs;\n        }\n    });\n\n    const onSelect = (event, selected, rowKey) => {\n        let selectedRows = [...rows];\n        let updatedSelectedSigs;\n        if (rowKey === -1) {\n            // All the rows were selected\n            // However rows are actually in groups of 2 - row 1: rule match details, row 2: rule description (hidden by default),\n            // So only set the first row in each group to selected (not the hidden row too)\n            selectedRows = selectedRows.map((item, key) => key % 2 === 0 ? { ... item, selected } : { ...item });\n            updatedSelectedSigs = updateSelectedSigs(selectedRows.filter((item, key) => key % 2 === 0), selected);\n        } else {\n            selectedRows[rowKey] = { ...selectedRows[rowKey], selected };\n            updatedSelectedSigs = updateSelectedSigs([selectedRows[rowKey]], selected);\n        }\n\n        stateSet({ type: 'setRows', payload: selectedRows });\n        stateSet({ type: 'setSelectedSigs', payload: updatedSelectedSigs });\n    };\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const sig = collapseRows[rowKey].sigData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells = [{\n            title: <SignatureDescription signature={sig} />\n        }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    const actionResolver = (rowData, { rowIndex }) => {\n        const sig = rows[rowIndex].sigData || null;\n        if (sig) {\n            const newMutationVars = { ...mutationVars, variables: { input: { id: sig.id } } };\n            return sig.isDisabled ?\n                [{\n                    title: intl.formatMessage(messages.enableSignatureForAnalysis),\n                    onClick: () => enableSignature(newMutationVars)\n                }] : [{\n                    title: intl.formatMessage(messages.disableSignatureFromAnalysis),\n                    onClick: () => disableSignature(newMutationVars)\n                }];\n        }\n    };\n\n    const toolbarActions = [\n        '', // intentionally left blank so a button isn't displayed next to the kebab on the toolbar\n        {\n            label: intl.formatMessage(messages.enableSignaturesForAnalysis),\n            onClick: () => enableSignature(mutationVars),\n            props: { isDisabled: selectedSigs.filter((sig) => sig.isDisabled).length === 0 }\n        }, {\n            label: intl.formatMessage(messages.disableSignaturesFromAnalysis),\n            onClick: () => disableSignature(mutationVars),\n            props: { isDisabled: selectedSigs.filter((sig) => !sig.isDisabled).length === 0 }\n        }];\n\n    const FILTER_CATEGORIES = {\n        sig_match: {\n            type: 'radio', title: intl.formatMessage(messages.status), urlParam: 'sig_match', values: [\n                { label: intl.formatMessage(messages.all), value: 'all' },\n                { label: intl.formatMessage(messages.matched), value: 'true' },\n                { label: intl.formatMessage(messages.notMatched), value: 'false' }\n            ]\n        },\n        sigs_included: {\n            type: 'checkbox', title: intl.formatMessage(messages.signaturesIncludedFilter), urlParam: 'sigs_included', values: [\n                { label: intl.formatMessage(messages.enabledSignatures), value: 'false' },  // isDisabled: false\n                { label: intl.formatMessage(messages.disabledSignatures), value: 'true' }   // isDisabled: true\n            ]\n        }\n    };\n    const filterConfigItems = [{\n        label: FILTER_CATEGORIES.sigs_included.title.toLowerCase(),\n        type: FILTER_CATEGORIES.sigs_included.type,\n        id: FILTER_CATEGORIES.sigs_included.urlParam,\n        filterValues: {\n            key: `${FILTER_CATEGORIES.sigs_included.urlParam}-filter`,\n            onChange: (e, value) => {\n                const tableFilters = sigTableFilters();\n                sigTableFilters({\n                    items: { ...tableFilters.items, isDisabled: value },\n                    condition: { ...tableFilters.condition, isDisabled: (value.length !== 1) ? undefined : JSON.parse(value[0]) }\n                });\n            },\n            value: sigTableFilters().items?.isDisabled || ['false'],\n            items: FILTER_CATEGORIES.sigs_included.values\n        }\n    }, {\n        label: intl.formatMessage(messages.signature).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { ruleName: value, offset: 0 } }),\n            value: tableVars.ruleName,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.signature).toLowerCase() })\n        }\n    }, {\n        label: FILTER_CATEGORIES.sig_match.title.toLowerCase(),\n        type: FILTER_CATEGORIES.sig_match.type,\n        id: FILTER_CATEGORIES.sig_match.urlParam,\n        value: `radio-${FILTER_CATEGORIES.sig_match.urlParam}`,\n        filterValues: {\n            key: `${FILTER_CATEGORIES.sig_match.urlParam}-filter`,\n            onChange: (e, value) => {\n                const tableFilters = sigTableFilters();\n                sigTableFilters({\n                    items: { ...tableFilters.items, hasMatch: value },\n                    condition: { ...tableFilters.condition, hasMatch: (value === 'all') ? undefined : JSON.parse(value) }\n                });\n            },\n            value: sigTableFilters().items?.hasMatch || 'true',\n            items: FILTER_CATEGORIES.sig_match.values\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const setMatchedFilterChips = ({ event, chips = [] }) => {\n        // Add/remove chips for the Status filter & set the radio button value and API query variable accordingly\n        const tableFilters = sigTableFilters();\n        if (event === 'add') {\n            let matchedMessage = intl.formatMessage(messages.all);\n            if (tableFilters.items?.hasMatch === 'true') {\n                matchedMessage = intl.formatMessage(messages.matched);\n            } else if (tableFilters.items?.hasMatch === 'false') {\n                matchedMessage = intl.formatMessage(messages.notMatched);\n            }\n\n            chips.push({\n                category: intl.formatMessage(messages.status), value: 'matched',\n                chips: [{ name: matchedMessage, value: matchedMessage }]\n            });\n        } else if (event === 'remove') {\n            const [newValue, newCondition] = (tableFilters.items?.hasMatch === 'all') ?\n                ['true', true] : ['all', undefined];\n            sigTableFilters({\n                items: { ...tableFilters.items, hasMatch: newValue },\n                condition: { ...tableFilters.condition, hasMatch: newCondition }\n            });\n        }\n    };\n\n    const setIncludedFilterChips = ({ event, chips = [], item = '' }) => {\n        // Add/remove chips for the Signatures included filter & set the checkbox values and API query variable accordingly\n        const tableFilters = sigTableFilters();\n        if (event === 'add') {\n            const includedFilters = [];\n            tableFilters.items?.isDisabled.map((val) => {\n                const includedMessage = intl.formatMessage(val === 'true' ? messages.disabledSignatures : messages.enabledSignatures);\n                includedFilters.push({ name: includedMessage, value: includedMessage });\n            });\n            chips.push({ category: intl.formatMessage(messages.signaturesIncludedFilter), chips: includedFilters });\n\n        } else if (event === 'remove') {\n            let [newValue, newCondition] = [[], undefined];\n            if (tableFilters.items?.isDisabled.length !== 1) {\n                [newValue, newCondition] = (item.value === intl.formatMessage(messages.enabledSignatures)) ?\n                    [['true'], true] : [['false'], false];\n            }\n\n            sigTableFilters({\n                items: { ...tableFilters.items, isDisabled: newValue },\n                condition: { ...tableFilters.condition, isDisabled: newCondition }\n            });\n        }\n    };\n\n    const buildFilterChips = () => {\n        const chips = [];\n        tableVars?.ruleName &&\n            chips.push({\n                category: intl.formatMessage(messages.signature), value: 'name',\n                chips: [{ name: tableVars?.ruleName, value: tableVars?.ruleName }]\n            });\n        setMatchedFilterChips({ event: 'add', chips });\n        setIncludedFilterChips({ event: 'add', chips });\n        return chips;\n    };\n\n    const activeFiltersConfig = {\n        deleteTitle: intl.formatMessage(messages.resetFilters),\n        filters: buildFilterChips(),\n        showDeleteButton: true,\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                sigTableFilters(sigTableFiltersInitialState);\n                stateSet({ type: 'setTableVars', payload: { ruleName: '' } });\n            } else {\n                itemsToRemove.map((item) => {\n                    item.value === 'name' && stateSet({ type: 'setTableVars', payload: { ruleName: '' } });\n                    item.value === 'matched' && setMatchedFilterChips({ event: 'remove' });\n                    !(item.value === 'name' || item.value === 'matched') && setIncludedFilterChips({ event: 'remove', item });\n                });\n            }\n        }\n    };\n\n    useEffect(() => {\n        sigTableFilters(sigTableFiltersInitialState);\n    }, []);\n\n    useEffect(() => {\n        // A hack to reset the SigTable page offset to the first page whenever the filters change\n        // This is because clicking on the StatusCard links doesn't refresh the pagination start page in the SigTable\n        // There may be a better way to handle this, but this is all I could come up with\n        stateSet({ type: 'setTableVars', payload: { offset: 0 } });\n    }, [sigTableFilters().condition]);\n\n    useEffect(() => {\n        const selectedSigIds = selectedSigs.map(sig => sig.id);\n        const rowBuilder = data => data?.rulesList?.flatMap((data, key) => {\n            const sig = data;\n            return [{\n                rowId: key,\n                isOpen: false,\n                sigData: sig,\n                selected: selectedSigIds.includes(sig.id),\n                cells: [\n                    { title:\n                        <React.Fragment>\n                            <InsightsLink to={`/signatures/${sig.name}`}>{sig.name}</InsightsLink>\n                            {sig.isDisabled &&\n                                <React.Fragment>\n                                    <br />\n                                    <Label color='red' isCompact>{intl.formatMessage(messages.disabled)}</Label>\n                                </React.Fragment>\n                            }\n                        </React.Fragment>\n                    },\n                    { title: sig.isDisabled ? intl.formatMessage(messages.notApplicable) :\n                        <StatusLabel isDisabled={sig.isDisabled} hasMatch={sig.hasMatch} displayMatch/>\n                    },\n                    { title: sig.isDisabled ? intl.formatMessage(messages.notApplicable) :\n                        <InsightsLink to={`/signatures/${sig.name}`}>{sig.hostCount?.toLocaleString()}</InsightsLink>\n                    },\n                    { title: sig.isDisabled ? intl.formatMessage(messages.notApplicable) :\n                        sig.lastMatchDate ?\n                            <Tooltip content={<DateFormat date={new Date(sig.lastMatchDate)} type='exact' />}>\n                                <span><DateFormat date={new Date(sig.lastMatchDate)} /></span>\n                            </Tooltip>\n                            : <Tooltip content={intl.formatMessage(messages.noHostHas)}>\n                                <span>{intl.formatMessage(messages.never)}</span>\n                            </Tooltip>\n                    }\n                ]\n            }, {\n                parent: key * 2,\n                fullWidth: true,\n                cells: []\n            }];\n        });\n\n        stateSet({ type: 'setRows', payload: rowBuilder(sigTableData) });\n        setShowTable(true);\n    }, [intl, sigTableData]);\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: sigTableData?.rules?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n            actionsConfig={{\n                actions: toolbarActions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n        />\n        {enableSigLoading || disableSigLoading || !showTable\n            ? <SkeletonTable\n                columns={[{ title: '', columnTransforms: [classNames('skeleton-expandable-column')] }, ...columns]}\n                rowSize={tableVars.limit}\n                sortBy={sortBy}\n                isSelectable={true}\n            />\n            : <Table\n                className='sigTable'\n                aria-label='Signature table'\n                onCollapse={onCollapse}\n                rows={rows}\n                cells={columns}\n                onSort={onSort}\n                sortBy={sigTableData?.rulesList?.length > 0 ? sortBy : undefined}\n                isStickyHeader\n                canSelectAll={true}\n                onSelect={onSelect}\n                actionResolver={actionResolver}\n            >\n                <TableHeader />\n                <TableBody />\n            </Table>\n        }\n\n        {!sigTableLoading && !sigTableError && sigTableData?.rules?.totalCount === 0 &&\n            <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n                text={intl.formatMessage(messages.noResultsMatch)} />}\n        {sigTableError && <MessageState className='pf-c-card' variant='large' title='Error' text='error' />}\n        <Pagination\n            itemCount={sigTableData?.rules?.totalCount || 0}\n            widgetId='pagination-options-menu-bottom'\n            perPage={tableVars.limit}\n            page={page}\n            variant={PaginationVariant.bottom}\n            onSetPage={onSetPage}\n            onPerPageSelect={onPerPageSelect}\n        />\n    </React.Fragment>;\n};\n\nSigTable.propTypes = gqlProps;\n\nexport default SigTable;\n","import { Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst StatusLabel = ({ isDisabled, hasMatch, displayMatch = false }) => {\n    const intl = useIntl();\n    return displayMatch ? <div>\n        {hasMatch && <Label color='red'>{intl.formatMessage(messages.matched)}</Label>}\n        {!hasMatch && <Label color='blue'>{intl.formatMessage(messages.notMatched)}</Label>}\n    </div> : <div>\n        {isDisabled && <Label>{intl.formatMessage(messages.disabled)}</Label>}\n        {!isDisabled && <Label color='blue'>{intl.formatMessage(messages.enabled)}</Label>}\n    </div>;\n};\n\nStatusLabel.propTypes = {\n    isDisabled: PropTypes.bool,\n    hasMatch: PropTypes.bool,\n    displayMatch: PropTypes.bool\n};\nexport default StatusLabel;\n","import { useApolloClient } from '@apollo/client';\nimport isEmpty from 'lodash/isEmpty';\n\nexport const buildApiFilters = (filters = {}) => {\n    const { tagFilters, ...otherFilters } = filters;\n    // remove hostGroupFilter/osFilter if they are [], otherwise no results are returned from the API\n    isEmpty(otherFilters.hostGroupFilter) && delete otherFilters.hostGroupFilter;\n    isEmpty(otherFilters.osFilter) && delete otherFilters.osFilter;\n    const tagsApiFilter = tagFilters\n        ? {\n            tags: tagFilters.flatMap((tagFilter) =>\n                tagFilter.values.map(\n                    (tag) => ({\n                        namespace: tagFilter.key,\n                        key: tag.tagKey,\n                        value: tag.value\n                    })\n                )\n            )\n        }\n        : {};\n\n    return {\n        ...otherFilters,\n        ...tagsApiFilter\n    };\n};\n\nexport const useFetchSystems = ({\n    query,\n    onComplete,\n    onError\n}) => {\n    const client = useApolloClient();\n\n    return (limit, offset, requestVariables = {}) =>\n        client\n        .query({\n            query,\n            fetchResults: true,\n            fetchPolicy: 'no-cache',\n            variables: {\n                limit,\n                offset,\n                ...requestVariables\n            }\n        })\n        .then(({ data }) => {\n            const entities = data?.hostsList || [];\n            const result = {\n                entities,\n                meta: {\n                    ...(requestVariables.tags && { tags: requestVariables.tags }),\n                    totalCount: data?.hosts?.totalCount || 0\n                }\n            };\n\n            onComplete?.(result);\n            return result;\n        })\n        .catch((error) => {\n            if (onError) {\n                onError(error);\n                return { entities: [], meta: { totalCount: 0 } };\n            } else {\n                throw error;\n            }\n        });\n};\n","import React from 'react';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport { entitiesReducer } from '../../store/index';\nimport {\n    cellWidth,\n    info\n} from '@patternfly/react-table/dist/esm/components/Table/index';\nimport messages from '../../Messages';\nimport StatusLabel from '../StatusLabel/StatusLabel';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { InsightsLink } from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\n\nexport const intl = createIntl({\n    locale\n}, cache);\n\nexport const intlSettings = { locale };\nexport const defaultOnLoad =\n  (columns, getRegistry) =>\n      ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n          getRegistry().register({\n              ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns),\n                  {\n                      page: 1,\n                      perPage: 10,\n                      sortBy: {\n                          key: 'totalMatches',\n                          direction: 'desc'\n                      }\n                  })\n          });\n\nexport const columns = [\n    {\n        title: intl.formatMessage(messages.name),\n        transforms: [cellWidth(30)],\n        key: 'displayName',\n        sortBy: ['DISPLAY_NAME'],\n        renderFunc: (displayName, id) => <InsightsLink to={`/systems/${id}`}>{displayName}</InsightsLink>\n    },\n    {\n        title: 'Group',\n        key: 'groups',\n        sortBy: ['GROUP_NAME'],\n        requiresDefault: true,\n        props: { isStatic: false }\n    },\n    {\n        title: 'Tags',\n        key: 'tags',\n        props: { width: 10, isStatic: true }\n    },\n    {\n        title: 'OS',\n        key: 'osVersion',\n        sortBy: ['OS_VERSION'],\n        props: { width: 10 },\n        renderFunc: (osVersion) => osVersion ? `RHEL ${osVersion}` : intl.formatMessage(messages.dataNotAvailable)\n    },\n    {\n        title: intl.formatMessage(messages.lastStatus),\n        transforms: [cellWidth(10)],\n        key: 'hasMatch',\n        sortBy: ['HAS_MATCH'],\n        renderFunc: (hasMatch, _, { isDisabled }) => <StatusLabel isDisabled={isDisabled} hasMatch={hasMatch} displayMatch />\n    },\n    {\n        title: intl.formatMessage(messages.lastMatched),\n        transforms: [cellWidth(10)],\n        key: 'lastMatchDate',\n        sortBy: ['LAST_MATCH_DATE'],\n        renderFunc: (lastMatchDate) =>\n            lastMatchDate ?\n                <Tooltip content={<DateFormat date={new Date(lastMatchDate)} type='exact' />}>\n                    <span><DateFormat date={new Date(lastMatchDate)} /></span>\n                </Tooltip>\n                : <Tooltip content={intl.formatMessage(messages.noHostHas)}>\n                    <span>{intl.formatMessage(messages.never)}</span>\n                </Tooltip>\n    },\n    {\n        title: intl.formatMessage(messages.totalMatches),\n        transforms: [\n            cellWidth(10),\n            info({\n                tooltip: intl.formatMessage(messages.totalMatchesNote)\n            })\n        ],\n        key: 'totalMatches',\n        sortBy: ['TOTAL_MATCHES'],\n        renderFunc: (totalMatches, _, { id }) => <InsightsLink to={`/systems/${id}`}>{totalMatches?.toLocaleString()}</InsightsLink>\n    },\n    {\n        title: intl.formatMessage(messages.lastScan),\n        key: 'lastScanDate',\n        sortBy: ['LAST_SCAN_DATE'],\n        renderFunc: (lastScanDate) =>\n            <Tooltip content={<DateFormat date={new Date(lastScanDate)} type='exact' />}>\n                <span><DateFormat date={new Date(lastScanDate)} /></span>\n            </Tooltip>\n\n    }\n];\n\nexport const mergedColumns = (defaultColumns) => {\n    return columns.map((column) => {\n        const isStringCol = typeof column === 'string';\n\n        const defaultColumn = defaultColumns.find(\n            (defaultCol) => defaultCol.key === column.key\n        );\n        //this step is necessary so we could compare the default columns from column object at the top of the file\n        //with the columns that come from the inventory, so if inventory hide a column behind feature flag\n        //it will not appear when the flag is turned off\n        return column.requiresDefault && defaultColumn === undefined ?\n            undefined : {\n                ...(isStringCol ? { key: column } : column),\n                ...defaultColumn,\n                props: {\n                    ...defaultColumn?.props,\n                    ...column?.props\n                }\n            };\n    }).filter(Boolean);\n};\n\nexport const appendDirection = (attributes, direction) =>\n    attributes?.map((attribute) => `${attribute}_${direction}`);\n\nexport const findColumnByKey = (key) =>\n    (columns || []).find((column) => column.key === key);\n\nexport const matchOptions = [\n    { label: 'All', value: 'All' },\n    { label: 'Matched', value: true },\n    { label: 'Not Matched', value: false }\n];\n","import {  matchOptions } from './constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nconst matchFilter = (matchStateValue, setStateValue) => {\n    return {\n        label: 'Status',\n        type: conditionalFilterType.radio,\n        filterValues: {\n            //Inventory table brings a string of the index for the False value of matchOptions\n            onChange: (event, value) => {\n                let index = parseInt(value);\n                setStateValue(value === '2' ? matchOptions[index].value : value);\n            },\n            items: matchOptions,\n            value: matchStateValue,\n            placeholder: 'Filter by status'\n        }\n    };\n\n};\n\nexport default matchFilter;\n","import { matchOptions } from './constants';\n\nexport const buildFilterChips = (filters) => {\n    let filterConfig = [];\n    const buildChips = () => {\n        {\n            const match = matchOptions.find(\n                ({ value }) => value === filters.filterValues.value\n            );\n            const results = match\n                ? [\n                    {\n                        name: match.label,\n                        value: filters.filterValues.value,\n                        id: match.value\n                    }\n                ]\n                : [];\n            return results;\n        }\n    };\n\n    const processFilters = () => {\n        filterConfig = filterConfig.concat([\n            {\n                category: 'Status',\n                id: 'Status',\n                chips: buildChips()\n            }\n        ]);\n    };\n\n    filters && processFilters();\n\n    return filterConfig;\n};\n\nexport const buildActiveFiltersConfig = (filter, setStateValue) => ({\n    filters: buildFilterChips(filter),\n    onDelete: (event, itemsToRemove, isAll) => {\n        if (isAll) {\n            setStateValue(true);\n        } else {\n            itemsToRemove.map((item) => {\n                item.category === 'Status' && setStateValue('All') ;\n            });\n        }\n    },\n    showDeleteButton: true\n});\n","/* eslint-disable no-unused-vars */\nimport './SysTable.scss';\n\nimport React, { useContext, useEffect, useCallback, useRef, useState } from 'react';\n\nimport {\n    useFetchSystems,\n    buildApiFilters\n} from './hooks';\nimport { defaultOnLoad, columns, mergedColumns, appendDirection, findColumnByKey } from './constants';\n\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { GET_SYSTEM_TABLE } from '../../operations/queries';\nimport MessageState from '../MessageState/MessageState';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { gqlProps } from '../Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\nimport { RegistryContext } from '../../store';\nimport { globalFilters } from '../../store/cache';\nimport { useDispatch } from 'react-redux';\nimport  matchFilter  from './matchFilter';\nimport { buildActiveFiltersConfig } from './Helpers';\n\nconst SysTable = () => {\n    const inventory = useRef(null);\n    const intl = useIntl();\n    const { getRegistry } = useContext(RegistryContext);\n    const dispatch = useDispatch();\n    let [matchStateValue, setStateValue] = useState(true);\n    useEffect(() => {\n        dispatch({ type: 'INVENTORY_INIT' });\n        dispatch({ type: 'RESET_PAGE' });\n        inventory?.current?.onRefreshData();\n    }, [dispatch]);\n\n    const fetchSystems = useCallback(useFetchSystems({\n        query: GET_SYSTEM_TABLE\n    }), []);\n\n    const { value } = matchFilter(matchStateValue, setStateValue)?.filterValues;\n    return <React.Fragment>\n        <Alert\n            isInline\n            variant=\"info\"\n            ouiaId=\"SystemsListIsDifferentAlert\"\n            title={intl.formatMessage(messages.systemsListIsDifferent)}\n        />\n        <InventoryTable\n            isFullView\n            autoRefresh\n            initialLoading\n            hideFilters={{ all: true, name: false, tags: false, operatingSystem: false, hostGroupFilter: false }}\n            columns={mergedColumns}\n            hasCheckbox={false}\n            showTags\n            ref={inventory}\n            fallback={<Spinner />}\n            onLoad={defaultOnLoad(columns, getRegistry)}\n            getEntities={async (\n                _ids,\n                { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n            ) => {\n                value === 'All' ? delete filters.hasMatch : (filters = { ...filters,  hasMatch: value  });\n                const sortableColumn = findColumnByKey(orderBy);\n                const sortBy = appendDirection(sortableColumn?.sortBy, orderDirection);\n                const filterForApi = buildApiFilters(filters);\n                const limit = perPage;\n                const offset = page * perPage - perPage;\n\n                const fetchedEntities = await fetchSystems(limit, offset, {\n                    ...filterForApi,\n                    orderBy: sortBy\n                });\n                const {\n                    entities,\n                    meta: { totalCount }\n                } = fetchedEntities || {};\n\n                return {\n                    // we need \"dipslay_name\" in TagModal for title, hence this mapping\n                    results: entities.map(entity => ({ ...entity, display_name: entity.displayName })),\n                    orderBy,\n                    orderDirection,\n                    total: totalCount\n                };\n            }}\n            tableProps={{\n                canSelectAll: false,\n                className: 'sysTable',\n                isStickyHeader: true\n            }}\n            noSystemsTable={<MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n                text={intl.formatMessage(messages.noResultsMatch)}/>}\n            customFilters={{\n                malwareParams: {\n                    ...globalFilters()\n                },\n                params: matchStateValue\n            }}\n            filterConfig={{\n                items: [matchFilter(matchStateValue, setStateValue)]\n            }}\n            activeFiltersConfig={buildActiveFiltersConfig(matchFilter(matchStateValue, setStateValue), setStateValue)}\n        />\n    </React.Fragment>;\n};\n\nSysTable.propTypes = gqlProps;\n\nexport default SysTable;\n","import { gql } from '@apollo/client';\n\nexport const DISABLE_SIGNATURES = gql`mutation DisableRule ($input: DisableRuleInput = {}) {\n  disableRule(input: $input) {\n    clientMutationId\n  }\n}`;\n\nexport const ENABLE_SIGNATURES = gql`mutation EnableRule ($input: EnableRuleInput = {}) {\n  enableRule(input: $input) {\n    clientMutationId\n  }\n}`;\n\n"],"names":["CodeEditor","code","language","isReadOnly","isDownloadEnabled","isCopyEnabled","height","intl","useIntl","isLanguageLabelVisible","emptyState","className","icon","LockIcon","variant","title","formatMessage","messages","text","propTypes","PropTypes","defaultProps","codeType","MessageState","children","iconClass","iconStyle","style","headingLevel","size","marginBottom","CubesIcon","EmptyStateVariant","SignatureDesctiprion","signature","useState","isCodeEditorEnabled","Grid","hasGutter","GridItem","span","rawRule","Text","component","TextVariants","metadata","description","initialState","tableVars","limit","offset","orderBy","ruleName","sortBy","index","direction","SortByDirection","rows","selectedSigs","sortIndices","orderByVariable","tableReducer","state","action","type","payload","SigTable","chips","refetchSigPageData","useReducer","stateSet","showTable","setShowTable","useQuery","GET_SIGNATURE_TABLE","variables","useReactiveVar","sigTableFilters","sigTableData","data","sigTableLoading","loading","sigTableError","error","client","mutationVars","input","id","map","sig","onCompleted","resetStore","useMutation","ENABLE_SIGNATURES","enableSignature","enableSigLoading","DISABLE_SIGNATURES","disableSignature","disableSigLoading","columns","cellFormatters","expandable","transforms","sortable","cellWidth","page","sigTableFiltersInitialState","items","hasMatch","isDisabled","condition","undefined","updateSelectedSigs","selectedRows","selected","rowSigIds","row","sigData","filteredSigs","filter","includes","name","toolbarActions","label","onClick","props","length","FILTER_CATEGORIES","sig_match","urlParam","values","value","sigs_included","filterConfigItems","toLowerCase","filterValues","key","onChange","e","tableFilters","JSON","parse","placeholder","field","onSetPage","onPerPageSelect","perPage","setMatchedFilterChips","event","matchedMessage","push","category","newValue","newCondition","setIncludedFilterChips","item","includedFilters","val","includedMessage","activeFiltersConfig","deleteTitle","filters","showDeleteButton","onDelete","itemsToRemove","isAll","useEffect","selectedSigIds","rulesList","flatMap","rowId","isOpen","cells","InsightsLink","to","Label","color","isCompact","StatusLabel","displayMatch","hostCount","toLocaleString","lastMatchDate","Tooltip","content","DateFormat","date","Date","parent","fullWidth","PrimaryToolbar","pagination","itemCount","rules","totalCount","filterConfig","actionsConfig","actions","dropdownProps","ouiaId","SkeletonTable","columnTransforms","classNames","rowSize","isSelectable","Table","onCollapse","rowKey","collapseRows","SignatureDescription","onSort","isStickyHeader","canSelectAll","onSelect","updatedSelectedSigs","actionResolver","rowData","rowIndex","newMutationVars","SearchIcon","Pagination","widgetId","PaginationVariant","gqlProps","buildApiFilters","tagFilters","otherFilters","isEmpty","hostGroupFilter","osFilter","tagsApiFilter","tags","tagFilter","tag","namespace","tagKey","cache","createIntlCache","locale","navigator","slice","createIntl","defaultOnLoad","getRegistry","INVENTORY_ACTION_TYPES","mergeWithEntities","register","entitiesReducer","renderFunc","displayName","requiresDefault","isStatic","width","osVersion","_","info","tooltip","totalMatches","lastScanDate","mergedColumns","defaultColumns","column","isStringCol","defaultColumn","find","defaultCol","Boolean","appendDirection","attributes","attribute","findColumnByKey","matchOptions","matchStateValue","setStateValue","conditionalFilterType","parseInt","buildActiveFiltersConfig","concat","match","SysTable","inventory","useRef","useContext","RegistryContext","dispatch","useDispatch","current","onRefreshData","query","onComplete","onError","fetchSystems","useCallback","GET_SYSTEM_TABLE","useApolloClient","requestVariables","fetchResults","fetchPolicy","then","result","entities","hostsList","meta","hosts","matchFilter","Alert","isInline","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","operatingSystem","hasCheckbox","showTags","ref","fallback","Spinner","onLoad","getEntities","_ids","per_page","orderDirection","sortableColumn","filterForApi","fetchedEntities","results","entity","display_name","total","tableProps","noSystemsTable","customFilters","malwareParams","globalFilters","params","gql"],"sourceRoot":""}