{"version":3,"sources":["webpack:///./src/Components/StatusCard/StatusCard.js"],"names":["StatusCard","date","newDate","sigStatsData","data","sigStatsLoading","loading","intl","useIntl","className","span","variant","icon","hasMalware","ExclamationCircleIcon","CheckCircleIcon","iconClass","title","formatMessage","messages","text","hostScans","nodes","createdAt","Date","toString","split","ruleStats","matchedCount","onClick","sigTableFilters","condition","hasMatch","enabledCount","disabledDcount","propTypes","gqlProps"],"mappings":"65BAgBA,IAAMA,EAAa,SAAC,GAAqD,gBAE9CC,EACbC,EAHcC,EAA6C,EAAnDC,KAA6BC,EAAsB,EAA/BC,QAChCC,GAAOC,SAMb,OAAO,kBAAC,IAAD,CAAMC,UAAU,cACnB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACKJ,EAAkB,kBAAC,IAAD,MAAc,kBAAC,IAAD,CAAUK,KAAM,GAAG,kBAAC,IAAD,CAAcD,UAAU,GAAGE,QAAQ,QACnFC,MAAMC,UAAeC,KAAwBC,KAC7CC,WAAWH,UAAe,qBAAuB,sBACjDI,OAAOJ,UACHN,EAAKW,cAAcC,iBAAwBZ,EAAKW,cAAcC,aAClEC,MAAMP,UACFN,EAAKW,cAAcC,qBAA4BZ,EAAKW,cAAcC,qBANtB,UAO5CZ,EAAKW,cAAcC,eAPyB,qCAQ1ChB,SAAA,UAAAA,EAAckB,iBAAd,SAAyBC,MAAM,IAhB9BrB,EAgBiDE,SAAD,UAACA,EAAckB,iBAAf,iBAAC,EAAyBC,MAAM,UAAhC,aAAC,EAAmCC,UAfjGrB,EAAW,IAAIsB,KAAKvB,GAAOwB,WAAWC,MAAM,KAClD,UAAUxB,EAAQ,GAAlB,YAAwBA,EAAQ,GAAhC,YAAsCA,EAAQ,KAe9CK,EAAKW,cAAcC,sBAGX,kBAAC,IAAD,CAAUT,KAAM,EACZD,UAAU,2GACbJ,EAAkB,kBAAC,IAAD,MACb,kBAAC,IAAD,CAAUI,UAAU,oBAAoBC,KAAM,GAC5C,kBAAC,IAAD,CAAUD,UAAU,gBAAgBC,KAAM,IACtC,kBAAC,aAAD,KACI,iCAASP,SAAA,UAAAA,EAAcwB,iBAAd,eAAyBC,eAAgB,GAClD,6BACA,kBAAC,KAAD,CAAQnB,UAAU,mBAAmBE,QAAQ,OACzCkB,QAAS,kBAAMC,QAAgB,EAAD,MAAMA,WAAN,IAAyBC,UAAW,CAAEC,UAAU,QAC7EzB,EAAKW,cAAcC,0BAIhC,kBAAC,IAAD,CAAUV,UAAU,gBAAgBC,KAAM,IACtC,iCAASP,SAAA,UAAAA,EAAcwB,iBAAd,eAAyBM,eAAgB,GAClD,2BAAI1B,EAAKW,cAAcC,yBAC3B,kBAAC,IAAD,CAAUV,UAAU,gBAAgBC,KAAM,IACtC,iCAASP,SAAA,UAAAA,EAAcwB,iBAAd,eAAyBO,iBAAkB,GACpD,2BAAI3B,EAAKW,cAAcC,+BAQnDnB,EAAWmC,UAAYC,KAEvB","file":"js/StatusCard.606fa3a696b8acbf6e9f.js","sourcesContent":["import './StatusCard.scss';\n\nimport { Card, CardBody } from '@patternfly/react-core/dist/esm/components/Card/index';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport { hasMalware, sigTableFilters } from '../../store/cache';\n\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport Loading from '../../Components/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport React from 'react';\nimport { gqlProps } from '../Common';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst StatusCard = ({ data: sigStatsData, loading: sigStatsLoading }) => {\n    const intl = useIntl();\n    const dateFormatter = (date) => {\n        const newDate = (new Date(date)).toString().split(' ');\n        return `${newDate[2]} ${newDate[1]} ${newDate[3]}`;\n    };\n\n    return <Card className='ins-l-card'>\n        <CardBody>\n            <Grid>\n                {sigStatsLoading ? <Loading /> : <GridItem span={7}><MessageState className='' variant='large'\n                    icon={hasMalware() ? ExclamationCircleIcon : CheckCircleIcon}\n                    iconClass={hasMalware() ? 'ins-l-danger-color' : 'ins-l-success-color'}\n                    title={hasMalware() ?\n                        intl.formatMessage(messages.activeFound) : intl.formatMessage(messages.noFound)}\n                    text={hasMalware() ?\n                        intl.formatMessage(messages.hostsVulnerable) : intl.formatMessage(messages.hostsProtected)} >\n                    {`${intl.formatMessage(messages.lastCheck)}\n                        ${sigStatsData?.hostScans?.nodes[0] ? dateFormatter(sigStatsData?.hostScans?.nodes[0]?.createdAt) :\n        intl.formatMessage(messages.noAnalysisRun)}`}\n                </MessageState></GridItem>\n                }\n                <GridItem span={1}\n                    className='pf-c-divider pf-m-vertical pf-m-inset-md pf-m-inset-none-on-md pf-m-inset-sm-on-lg pf-m-inset-xs-on-xl' />\n                {sigStatsLoading ? <Loading />\n                    : <GridItem className='ins-l-sigStatCard' span={3}>\n                        <GridItem className='ins-l-sigStat' span={12}>\n                            <React.Fragment>\n                                <strong>{sigStatsData?.ruleStats?.matchedCount || 0}</strong>\n                                <br />\n                                <Button className='ins-l-sigStatNum' variant='link'\n                                    onClick={() => sigTableFilters({ ...sigTableFilters(), condition: { hasMatch: true } })}>\n                                    {intl.formatMessage(messages.matchedSignatures)}\n                                </Button>\n                            </React.Fragment>\n                        </GridItem>\n                        <GridItem className='ins-l-sigStat' span={12}>\n                            <strong>{sigStatsData?.ruleStats?.enabledCount || 0}</strong>\n                            <p>{intl.formatMessage(messages.enabledSignatures)}</p></GridItem>\n                        <GridItem className='ins-l-sigStat' span={12}>\n                            <strong>{sigStatsData?.ruleStats?.disabledDcount || 0}</strong>\n                            <p>{intl.formatMessage(messages.disabledSignatures)}</p></GridItem>\n                    </GridItem>\n                }\n            </Grid>\n        </CardBody>\n    </Card >;\n};\n\nStatusCard.propTypes = gqlProps;\n\nexport default StatusCard;\n"],"sourceRoot":""}