{"version":3,"file":"js/SigTable.9576bfacb248ac60aafb.js","mappings":"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","sources":["webpack:///./src/Components/SigTable/SignatureDescription.js","webpack:///./src/Components/SigTable/SigTable.js","webpack:///./src/Components/SysTable/SysTable.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CodeEditor from '../CodeEditor/CodeEditor';\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport messages from '../../Messages';\nimport { useIntl } from 'react-intl';\n\nconst SignatureDesctiprion = ({ signature }) => {\n    const intl = useIntl();\n    const [isCodeEditorEnabled] = useState(false);\n    return (\n        <Grid hasGutter>\n            {isCodeEditorEnabled && (\n                <GridItem span={6}>\n                    <CodeEditor code={signature.rawRule} isReadOnly />\n                </GridItem>\n            )}\n            <GridItem span={isCodeEditorEnabled && 6 || 12}> <Text className='ins-l-sigtable--title' component={TextVariants.h6}>\n                {intl.formatMessage(messages.description)}\n            </Text>{signature.metadata.description}\n            </GridItem>\n        </Grid>\n    );\n};\n\nSignatureDesctiprion.propTypes = {\n    signature: PropTypes.object\n};\nexport default SignatureDesctiprion;\n","/* eslint-disable no-unused-vars */\nimport './SigTable.scss';\n\nimport { Grid, GridItem } from '@patternfly/react-core/dist/esm/layouts/Grid/index';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination/index';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    expandable,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table/index';\nimport { gqlProps, totalMatchesTitle } from '../Common';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SIGNATURE_TABLE } from '../../operations/queries';\nimport { Link } from 'react-router-dom';\nimport Loading from '../../Components/Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport StatusLabel from '../StatusLabel/StatusLabel';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport messages from '../../Messages';\nimport { sigTableFilters } from '../../store/cache';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport { useReactiveVar } from '@apollo/client';\nimport SignatureDesctiprion from './SignatureDescription';\n\nconst initialState = {\n    tableVars: {\n        limit: 10,\n        offset: 0,\n        orderBy: 'LAST_MATCH_DATE_DESC',\n        ruleName: ''\n    },\n    sortBy: {\n        index: 4,\n        direction: SortByDirection.desc\n    },\n    rows: []\n};\nconst sortIndices = { 1: 'NAME', 2: 'HAS_MATCH', 3: 'IS_DISABLED', 4: 'HOST_COUNT', 5: 'LAST_MATCH_DATE' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n    }\n\n    return state;\n};\n\nconst SigTable = () => {\n    const intl = useIntl();\n    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data: sigTableData, loading: sigTableLoading, error: sigTableError } =\n        useQuery(GET_SIGNATURE_TABLE, { variables: { ...tableVars, ...useReactiveVar(sigTableFilters) } });\n    const columns = [\n        { title: intl.formatMessage(messages.sigName), cellFormatters: [expandable], transforms: [cellWidth(45), sortable] },\n        { title: intl.formatMessage(messages.lastStatus), transforms: [cellWidth(10), sortable] },\n        { title: intl.formatMessage(messages.systems), transforms: [cellWidth(10), sortable] },\n        { title: intl.formatMessage(messages.matched), transforms: [cellWidth(10), sortable] }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const onCollapse = (e, rowKey, isOpen) => {\n        const collapseRows = [...rows];\n        const sig = collapseRows[rowKey + 1].sigData;\n\n        collapseRows[rowKey] = { ...collapseRows[rowKey], isOpen };\n        collapseRows[rowKey + 1].cells = [{\n            title: <SignatureDesctiprion signature={sig}/>\n        }];\n        stateSet({ type: 'setRows', payload: collapseRows });\n    };\n\n    const FILTER_CATEGORIES = {\n        sig_match: {\n            type: 'radio', title: intl.formatMessage(messages.status), urlParam: 'sig_match', values: [\n                { label: intl.formatMessage(messages.all), value: 'all' },\n                { label: intl.formatMessage(messages.matched), value: 'true' },\n                { label: intl.formatMessage(messages.notMatched), value: 'false' }\n            ]\n        }\n    };\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.signature).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { ruleName: value } }),\n            value: tableVars.ruleName,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.signature).toLowerCase() })\n        }\n    }, {\n        label: FILTER_CATEGORIES.sig_match.title.toLowerCase(),\n        type: FILTER_CATEGORIES.sig_match.type,\n        id: FILTER_CATEGORIES.sig_match.urlParam,\n        value: `radio-${FILTER_CATEGORIES.sig_match.urlParam}`,\n        filterValues: {\n            key: `${FILTER_CATEGORIES.sig_match.urlParam}-filter`,\n            onChange: (e, value) => {\n                const tableFilters = sigTableFilters();\n                value === 'all' && delete tableFilters?.condition;\n                value === 'all' ? sigTableFilters({ ...tableFilters }) :\n                    sigTableFilters({ ...tableFilters, condition: { hasMatch: JSON.parse(value) } });\n            },\n            value: JSON.stringify(sigTableFilters().condition?.hasMatch) || 'all',\n            items: FILTER_CATEGORIES.sig_match.values\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const buildFilterChips = () => {\n        const chips = [];\n        const hasMatch = sigTableFilters().condition?.hasMatch !== undefined && (sigTableFilters().condition?.hasMatch ?\n            intl.formatMessage(messages.matched) : intl.formatMessage(messages.notMatched));\n        tableVars?.ruleName &&\n        chips.push({ category: intl.formatMessage(messages.signature), value: 'name',\n            chips: [{ name: tableVars?.ruleName, value: tableVars?.ruleName }] });\n        hasMatch && chips.push({ category: intl.formatMessage(messages.status), value: 'matched', chips: [{ name: hasMatch, value: hasMatch }] });\n        return chips;\n    };\n\n    const activeFiltersConfig = {\n        deleteTitle: intl.formatMessage(messages.resetFilters),\n        filters: buildFilterChips(),\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                sigTableFilters({});\n                stateSet({ type: 'setTableVars', payload: { ruleName: '' } });\n            } else {\n                itemsToRemove.map((item) => {\n                    item.value === 'name' && stateSet({ type: 'setTableVars', payload: { ruleName: '' } });\n                    item.value === 'matched' && sigTableFilters({});\n                });\n            }\n        }\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.rulesList?.flatMap((data, key) => {\n            const sig = data;\n            return [{\n                rowId: key,\n                isOpen: false,\n                cells: [\n                    { title: <Link to={`/signatures/${sig.name}`}>{sig.name}</Link> },\n                    { title: <StatusLabel isDisabled={sig.isDisabled} hasMatch={sig.hasMatch} displayMatch /> },\n                    { title: <Link to={`/signatures/${sig.name}`}>{sig.hostCount?.toLocaleString()}</Link> },\n                    {\n                        title: sig.lastMatchDate ?\n                            <Tooltip content={<DateFormat date={new Date(sig.lastMatchDate)} type='exact' />}>\n                                <span><DateFormat date={new Date(sig.lastMatchDate)} type='onlyDate' /></span>\n                            </Tooltip>\n                            : <Tooltip content={intl.formatMessage(messages.noHostHas)}>\n                                <span>{intl.formatMessage(messages.never)}</span>\n                            </Tooltip>\n                    }\n                ]\n            }, {\n                parent: key * 2,\n                sigData: sig,\n                fullWidth: true,\n                cells: []\n            }];\n        });\n\n        stateSet({ type: 'setRows', payload: rowBuilder(sigTableData) });\n    }, [intl, sigTableData]);\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: sigTableData?.rules?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        <Table className='sigTable' aria-label='Signature table'\n            onCollapse={onCollapse}\n            rows={rows} cells={columns}\n            onSort={onSort} sortBy={sortBy} isStickyHeader>\n            <TableHeader />\n            <TableBody />\n        </Table>\n        {sigTableLoading && <Loading type='table' />}\n        {!sigTableLoading && !sigTableError && sigTableData?.rules?.totalCount === 0 &&\n            <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n                text={intl.formatMessage(messages.noResultsMatch)} />}\n        {sigTableError && <MessageState className='pf-c-card' variant='large' title='Error' text='error' />}\n        <Pagination\n            itemCount={sigTableData?.rules?.totalCount || 0}\n            widgetId='pagination-options-menu-bottom'\n            perPage={tableVars.limit}\n            page={page}\n            variant={PaginationVariant.bottom}\n            onSetPage={onSetPage}\n            onPerPageSelect={onPerPageSelect}\n        />\n    </React.Fragment>;\n};\n\nSigTable.propTypes = gqlProps;\n\nexport default SigTable;\n","/* eslint-disable no-unused-vars */\nimport './SysTable.scss';\n\nimport { Pagination, PaginationVariant } from '@patternfly/react-core/dist/esm/components/Pagination/index';\nimport React, { useEffect, useReducer } from 'react';\nimport {\n    SortByDirection,\n    Table,\n    TableBody,\n    TableHeader,\n    cellWidth,\n    sortable\n} from '@patternfly/react-table/dist/esm/components/Table/index';\n\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { GET_SYSTEM_TABLE } from '../../operations/queries';\nimport { Link } from 'react-router-dom';\nimport Loading from '../Loading/Loading';\nimport MessageState from '../MessageState/MessageState';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { SearchIcon } from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport StatusLabel from '../StatusLabel/StatusLabel';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport { gqlProps } from '../Common';\nimport messages from '../../Messages';\nimport { sysTableFilters } from '../../store/cache';\nimport { totalMatchesTitle } from '../Common';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\nimport { useReactiveVar } from '@apollo/client';\n\nconst initialState = {\n    tableVars: {\n        limit: 10,\n        offset: 0,\n        orderBy: 'LAST_SCAN_DATE_DESC',\n        name: ''\n    },\n    sortBy: {\n        index: 4,\n        direction: SortByDirection.desc\n    },\n    rows: []\n};\nconst sortIndices = { 0: 'DISPLAY_NAME', 1: 'HAS_MATCH', 2: 'LAST_MATCH_DATE', 3: 'TOTAL_MATCHES', 4: 'LAST_SCAN_DATE' };\nconst orderBy = ({ index, direction }) => `${sortIndices[index]}_${direction === SortByDirection.asc ? 'ASC' : 'DESC'}`;\n\nconst tableReducer = (state, action) => {\n    switch (action.type) {\n        case 'setTableVars':\n            return { ...state, tableVars: { ...state.tableVars, ...action.payload } };\n        case 'setSortBy':\n            return { ...state, sortBy: action.payload, tableVars: { ...state.tableVars, ...action.tableVars } };\n        case 'setRows':\n            return { ...state, rows: action.payload };\n    }\n\n    return state;\n};\n\nconst SysTable = () => {\n    const intl = useIntl();\n    const [{ tableVars, sortBy, rows }, stateSet] = useReducer(tableReducer, {\n        ...initialState\n    });\n    const { data: sysTableData, loading: sysTableLoading, error: sysTableError } =\n        useQuery(GET_SYSTEM_TABLE, { variables: { ...tableVars, ...useReactiveVar(sysTableFilters) } });\n    const columns = [\n        { title: intl.formatMessage(messages.name), transforms: [cellWidth(45), sortable] },\n        { title: intl.formatMessage(messages.lastStatus), transforms: [sortable, cellWidth(10)] },\n        { title: intl.formatMessage(messages.matched), transforms: [sortable, cellWidth(10)] },\n        { title: <span>{totalMatchesTitle({ tooltip: intl.formatMessage(messages.totalMatchesNote),\n            title: intl.formatMessage(messages.totalMatches) })}</span>, transforms: [sortable, cellWidth(15)] },\n        { title: intl.formatMessage(messages.lastScan), transforms: [sortable, cellWidth(10)] }\n    ];\n\n    const page = tableVars.offset / tableVars.limit + 1;\n\n    const filterConfigItems = [{\n        label: intl.formatMessage(messages.name).toLowerCase(),\n        filterValues: {\n            key: 'text-filter',\n            onChange: (e, value) => stateSet({ type: 'setTableVars', payload: { name: value } }),\n            value: tableVars.name,\n            placeholder: intl.formatMessage(messages.filterBy, { field: intl.formatMessage(messages.name).toLowerCase() })\n        }\n    }];\n\n    const onSetPage = (e, page) => stateSet({ type: 'setTableVars', payload: { offset: page * tableVars.limit - tableVars.limit } });\n\n    const onPerPageSelect = (e, perPage) => stateSet({ type: 'setTableVars', payload: { limit: perPage, offset: 0 } });\n\n    const onSort = (e, index, direction) =>\n        stateSet({ type: 'setSortBy', payload: { index, direction }, tableVars: { orderBy: orderBy({ index, direction }), offset: 0 } });\n\n    const buildFilterChips = () => {\n        const chips = [];\n        const hasMatch = sysTableFilters().condition?.hasMatch !== undefined && (sysTableFilters().condition?.hasMatch ?\n            intl.formatMessage(messages.matched) : intl.formatMessage(messages.notMatched));\n        tableVars?.name &&\n        chips.push({ category: intl.formatMessage(messages.name), value: 'name',\n            chips: [{ name: tableVars?.name, value: tableVars?.name }] });\n        hasMatch && chips.push({ category: intl.formatMessage(messages.status), value: 'matched', chips: [{ name: hasMatch, value: hasMatch }] });\n        return chips;\n    };\n\n    const activeFiltersConfig = {\n        deleteTitle: intl.formatMessage(messages.resetFilters),\n        filters: buildFilterChips(),\n        onDelete: (event, itemsToRemove, isAll) => {\n            if (isAll) {\n                sysTableFilters({});\n                stateSet({ type: 'setTableVars', payload: { name: '' } });\n            } else {\n                itemsToRemove.map((item) => {\n                    item.value === 'name' && stateSet({ type: 'setTableVars', payload: { name: '' } });\n                    item.value === 'matched' && sysTableFilters({});\n                });\n            }\n        }\n    };\n\n    useEffect(() => {\n        const rowBuilder = data => data?.hostsList?.flatMap((data, key) => ({\n            rowId: key,\n            cells: [\n                { title: <Link to={`/systems/${data.displayName}`}>{data.displayName}</Link> },\n                { title: <StatusLabel isDisabled={data.isDisabled} hasMatch={data.hasMatch} displayMatch /> },\n                {\n                    title: data.lastMatchDate ?\n                        <Tooltip content={<DateFormat date={new Date(data.lastMatchDate)} type='exact' />}>\n                            <span><DateFormat date={new Date(data.lastMatchDate)} type='onlyDate' /></span>\n                        </Tooltip>\n                        : <Tooltip content={intl.formatMessage(messages.noHostHas)}>\n                            <span>{intl.formatMessage(messages.never)}</span>\n                        </Tooltip>\n                },\n                { title: <Link to={`/systems/${data.displayName}`}>{data.totalMatches?.toLocaleString()}</Link> },\n                { title: <Tooltip content={<DateFormat date={new Date(data.lastScanDate)} type='exact' />}>\n                    <span><DateFormat date={new Date(data.lastScanDate)} /></span>\n                </Tooltip> }\n\n            ]\n        }));\n\n        stateSet({ type: 'setRows', payload: rowBuilder(sysTableData) });\n    }, [intl, sysTableData]);\n\n    return <React.Fragment>\n        <PrimaryToolbar\n            pagination={{\n                itemCount: sysTableData?.hosts?.totalCount || 0,\n                page,\n                perPage: tableVars.limit,\n                onSetPage(e, page) { onSetPage(e, page); },\n                onPerPageSelect(e, perPage) { onPerPageSelect(e, perPage); },\n                isCompact: true\n            }}\n            filterConfig={{ items: filterConfigItems }}\n            activeFiltersConfig={activeFiltersConfig}\n        />\n        <Table className='sysTable' aria-label='System table'\n            rows={rows} cells={columns}\n            onSort={onSort} sortBy={sortBy} isStickyHeader>\n            <TableHeader />\n            <TableBody />\n        </Table>\n        {sysTableLoading && <Loading type='table' />}\n        {!sysTableLoading && !sysTableError && sysTableData?.hosts?.totalCount === 0 &&\n            <MessageState className='pf-c-card' icon={SearchIcon} variant='large' title={intl.formatMessage(messages.noResults)}\n                text={intl.formatMessage(messages.noResultsMatch)} />}\n        {sysTableError && <MessageState className='pf-c-card' variant='large' title='Error' text='error' />}\n        <Pagination\n            itemCount={sysTableData?.hosts?.totalCount || 0}\n            widgetId='pagination-options-menu-bottom'\n            perPage={tableVars.limit}\n            page={page}\n            variant={PaginationVariant.bottom}\n            onSetPage={onSetPage}\n            onPerPageSelect={onPerPageSelect}\n        />\n    </React.Fragment>;\n};\n\nSysTable.propTypes = gqlProps;\n\nexport default SysTable;\n"],"names":["SignatureDesctiprion","signature","intl","useIntl","useState","isCodeEditorEnabled","Grid","hasGutter","GridItem","span","CodeEditor","code","rawRule","isReadOnly","Text","className","component","TextVariants","formatMessage","messages","metadata","description","propTypes","PropTypes","initialState","tableVars","limit","offset","orderBy","ruleName","sortBy","index","direction","SortByDirection","rows","sortIndices","tableReducer","state","action","type","payload","SigTable","chips","hasMatch","useReducer","stateSet","useQuery","GET_SIGNATURE_TABLE","variables","useReactiveVar","sigTableFilters","sigTableData","data","sigTableLoading","loading","sigTableError","error","columns","title","cellFormatters","expandable","transforms","cellWidth","sortable","page","FILTER_CATEGORIES","sig_match","urlParam","values","label","value","filterConfigItems","toLowerCase","filterValues","key","onChange","e","placeholder","field","id","tableFilters","condition","JSON","parse","stringify","items","onSetPage","onPerPageSelect","perPage","activeFiltersConfig","deleteTitle","filters","undefined","push","category","name","onDelete","event","itemsToRemove","isAll","map","item","useEffect","rulesList","flatMap","sig","rowId","isOpen","cells","Link","to","StatusLabel","isDisabled","displayMatch","hostCount","toLocaleString","lastMatchDate","Tooltip","content","DateFormat","date","Date","parent","sigData","fullWidth","PrimaryToolbar","pagination","itemCount","rules","totalCount","isCompact","filterConfig","Table","onCollapse","rowKey","collapseRows","onSort","isStickyHeader","Loading","MessageState","icon","SearchIcon","variant","text","Pagination","widgetId","PaginationVariant","gqlProps","SysTable","GET_SYSTEM_TABLE","sysTableFilters","sysTableData","sysTableLoading","sysTableError","totalMatchesTitle","tooltip","hostsList","displayName","totalMatches","lastScanDate","hosts"],"sourceRoot":""}