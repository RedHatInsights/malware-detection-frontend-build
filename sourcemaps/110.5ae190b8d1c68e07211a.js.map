{"version":3,"file":"js/110.5654a4835970831be410.js","mappings":"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","sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/Messages.js","webpack:///./src/operations/queries.js","webpack:///./src/store/cache.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Bullseye } from '@patternfly/react-core/dist/esm/layouts/Bullseye';\nimport { Spinner } from '@patternfly/react-core/dist/esm/components/Spinner';\n\nconst SigRoutes = lazy(() => import(/* webpackChunkName: \"Signatures\" */ './Routes/Signatures/Routes'));\nconst SysRoutes = lazy(() => import(/* webpackChunkName: \"Systems\" */ './Routes/Systems/Routes'));\nconst Oops = lazy(() => import(/* webpackChunkName: 'Oops' */ './Routes/OopsPage/OopsPage'));\nconst Noperms = lazy(() => import(/* webpackChunkName: 'Noperms' */ './Routes/NoPermissionsPage/NoPermissionsPage'));\n\nconst paths = [\n    { title: 'Signatures', path: '/signatures:?', component: SigRoutes },\n    { title: 'Signatures', path: '/signatures', component: SigRoutes },\n    { title: 'Systems', path: '/systems:?', component: SysRoutes },\n    { title: 'Systems', path: '/systems', component: SysRoutes },\n    { title: 'Oops', path: '/oops', component: Oops },\n    { title: 'Nopermisssions', path: '/nppermissions', component: Noperms }\n\n];\n\nexport const Routes = () => (\n    <Suspense\n        fallback={\n            <Bullseye>\n                <Spinner size=\"xl\" />\n            </Bullseye>\n        }\n    >\n        <Switch>\n            {paths.map((path) => (\n                <Route\n                    key={path.title}\n                    path={path.path}\n                    component={path.component}\n                    rootClass={path.rootClass}\n                />\n            ))}\n            <Redirect path=\"/signatures\" to={`${paths[1].path}`} push />\n            {/* Finally, catch all unmatched routes */}\n            <Redirect path=\"*\" to={`${paths[1].path}`} push />\n        </Switch>\n    </Suspense>\n);\n","import './App.scss';\n\nimport React, { useEffect, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { Banner } from '@patternfly/react-core/dist/esm/components/Banner/index';\nimport { GET_MALWARE_COUNT } from './operations/queries';\nimport { Routes } from './Routes';\nimport { hasMalware } from './store/cache';\nimport messages from './Messages';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from '@apollo/client';\n\nconst App = (props) => {\n    const { data, loading } = useQuery(GET_MALWARE_COUNT);\n    const intl = useIntl();\n    const { pathname } = useLocation();\n    const { push } = useHistory();\n    const appNavClick = useMemo(\n        () => ({\n            signatures(redirect) {\n                insights.chrome.appNavClick({ id: 'signatures', redirect });\n            },\n            systems(redirect) {\n                insights.chrome.appNavClick({ id: 'systems', redirect });\n            }\n        }),\n        []\n    );\n\n    !loading && hasMalware(Number(data?.ruleStats?.matchedCount) !== 0);\n\n    useEffect(() => {\n        insights.chrome.init();\n        const baseComponentUrl = pathname.split('/')[4];\n        const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n            if (event.domEvent) {\n                push(`/${event.navId}`);\n                appNavClick[baseComponentUrl] !== undefined\n                    ? appNavClick[baseComponentUrl](true)\n                    : appNavClick.signatures;\n            }\n        });\n\n        return () => unregister();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <React.Fragment>\n        { !loading && hasMalware() && <Banner variant=\"danger\" className='ins-l-malwareBanner'>{intl.formatMessage(messages.weDetected)}</Banner>}\n        <Routes childProps={props} />\n    </React.Fragment>;\n};\n\nexport default App;\n","/* eslint-disable max-len */\nimport { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n    malwareDetection: {\n        id: 'malwareDetection',\n        description: 'Title',\n        defaultMessage: 'Malware detection'\n    },\n    malwareDetectionSignatures: {\n        id: 'malwareDetectionSignatures',\n        description: 'Title',\n        defaultMessage: 'Malware detection signatures'\n    },\n    sigName: {\n        id: 'sigNameId',\n        description: 'Sig table column title',\n        defaultMessage: 'Signature name'\n    },\n    sig: {\n        id: 'sig',\n        description: 'Signature',\n        defaultMessage: 'Signature'\n    },\n    systems: {\n        id: 'systems',\n        description: 'Sig table column title',\n        defaultMessage: 'Systems'\n    },\n    added: {\n        id: 'added',\n        description: 'Sig table column title',\n        defaultMessage: 'Added'\n    },\n    matched: {\n        id: 'matched',\n        description: 'Sig table column title',\n        defaultMessage: 'Matched'\n    },\n    matchedSignatures: {\n        id: 'matchedSignatures',\n        description: 'Sig status card heading',\n        defaultMessage: 'Matched Signatures'\n    },\n    enabledSignatures: {\n        id: 'enabledSignatures',\n        description: 'Sig status card heading',\n        defaultMessage: 'Enabled Signatures'\n    },\n    disabledSignatures: {\n        id: 'disabledSignatures',\n        description: 'Sig status card heading',\n        defaultMessage: 'Disabled Signatures'\n    },\n    analysisRunAcross: {\n        id: 'analysisRunAcross',\n        description: 'Chart card heading',\n        defaultMessage: 'analyses run across {hosts, plural, one {# system} other {# systems}} with {matches, plural, one {# match} other {# matches}}'\n    },\n    noFound: {\n        id: 'noFound',\n        description: 'Sig status card heading',\n        defaultMessage: 'No active malware matches found'\n    },\n    noAnalysisRun: {\n        id: 'noFnoAnalysisRunound',\n        description: 'No host analyses run',\n        defaultMessage: 'No system analyses run'\n    },\n    hostsProtected: {\n        id: 'hostsProtected',\n        description: 'Sig status card sub heading',\n        defaultMessage: 'Your systems are protected.'\n    },\n    activeFound: {\n        id: 'activeFound',\n        description: 'Sig status card heading',\n        defaultMessage: 'Active malware matches found!'\n    },\n    hostsVulnerable: {\n        id: 'hostsVulnerable',\n        description: 'Sig status card sub heading',\n        defaultMessage: 'Your systems may be at risk.'\n    },\n    lastCheck: {\n        id: 'lastCheck',\n        description: 'Sig status card',\n        defaultMessage: 'Last check:'\n    },\n    lastSeen: {\n        id: 'lastSeen',\n        description: 'Last seen',\n        defaultMessage: 'Last seen'\n    },\n    uuid: {\n        id: 'uuid',\n        description: 'UUID',\n        defaultMessage: 'UUID'\n    },\n    description: {\n        id: 'description',\n        description: 'description',\n        defaultMessage: 'Description'\n    },\n    never: {\n        id: 'never',\n        description: 'never',\n        defaultMessage: 'Never'\n    },\n    malwareDetectionSigs: {\n        id: 'malwareDetectionSigs',\n        description: 'Malware detection signatures',\n        defaultMessage: 'Malware detection signatures'\n    },\n    affectedHosts: {\n        id: 'affectedHosts',\n        description: 'Affected hosts',\n        defaultMessage: 'Affected systems'\n    },\n    lastmatch: {\n        id: 'lastmatch',\n        description: 'Last match',\n        defaultMessage: 'Last match'\n    },\n    hostmatch: {\n        id: 'hostmatch',\n        description: 'Host match',\n        defaultMessage: 'System match'\n    },\n    status: {\n        id: 'status',\n        description: 'Status',\n        defaultMessage: 'Status'\n    },\n    author: {\n        id: 'author',\n        description: 'Author',\n        defaultMessage: 'Author'\n    },\n    enabled: {\n        id: 'enabled',\n        description: 'Enabled',\n        defaultMessage: 'Enabled'\n    },\n    enablement: {\n        id: 'enablement',\n        description: 'Enablement',\n        defaultMessage: 'Enablement'\n    },\n    disabled: {\n        id: 'disabled',\n        description: 'Disabled',\n        defaultMessage: 'Disabled'\n    },\n    noHostHas: {\n        id: 'noHostHas',\n        description: 'No host has been affectyed by this signature.',\n        defaultMessage: 'No system has been affectyed by this signature.'\n    },\n    signature: {\n        id: 'signature',\n        description: 'Signature',\n        defaultMessage: 'Signature'\n    },\n    filterBy: {\n        id: 'filterBy',\n        description: 'Filter by {what?}',\n        defaultMessage: 'Filter by {field}'\n    },\n    weDetected: {\n        id: 'weDetected',\n        description: 'Malware detected on your system. Contact your corporate information security team for more information.',\n        defaultMessage: 'Malware detected on your system. Contact your corporate information security team for more information.'\n    },\n    name: {\n        id: 'name',\n        description: 'Name',\n        defaultMessage: 'Name'\n    },\n    noMatches: {\n        id: 'noMatches',\n        description: 'No matches found',\n        defaultMessage: 'No matches found'\n    },\n    hostsNotAffected: {\n        id: 'hostsNotAffected',\n        description: 'Hosts are not affected by any signatures. Your hosts are protected!',\n        defaultMessage: 'Systems are not affected by any signatures. Your systems are protected!'\n    },\n    noResults: {\n        id: 'noResults',\n        description: 'No results found',\n        defaultMessage: 'No results found'\n    },\n    noResultsMatch: {\n        id: 'noResultsMatch',\n        description: 'No results match this filter criteria. Remove all filters or clear all filters to show results.',\n        defaultMessage: 'No results match this filter criteria. Remove all filters or clear all filters to show results.'\n    },\n    all: {\n        id: 'all',\n        description: 'all',\n        defaultMessage: 'All'\n    },\n    notMatched: {\n        id: 'notMatched',\n        description: 'not matched',\n        defaultMessage: 'Not matched'\n    },\n    sigCompiled: {\n        id: 'sigCompiled',\n        description: 'Signature is compiled',\n        defaultMessage: 'Signature is compiled'\n    },\n    sigCompiledBody: {\n        id: 'sigCompiledBody',\n        description: 'We couldnt display',\n        defaultMessage: 'We couldn\\'t display this signature because it\\'s compiled.'\n    },\n    totalMatches: {\n        id: 'totalMatches',\n        description: 'Total matches',\n        defaultMessage: 'Total matches'\n    },\n    noAffectedHosts: {\n        id: 'noAffectedHosts',\n        description: 'No affected hosts',\n        defaultMessage: 'No affected systems'\n    },\n    noAffectedHostsBody: {\n        id: 'noAffectedHostsBody',\n        description: 'This signature doesn\\'t affect any hosts. Your hosts are protected!',\n        defaultMessage: 'This signature doesn\\'t affect any systems. Your systems are protected!'\n    },\n    resetFilters: {\n        id: 'resetFilters',\n        description: 'Reset filters',\n        defaultMessage: 'Reset filters'\n    },\n    lastStatus: {\n        id: 'lastStatus',\n        description: 'Last status',\n        defaultMessage: 'Last status'\n    },\n    totalMatchesNote: {\n        id: 'totalMatchesNote',\n        description: 'Total number of matches found from every scan of a system within the last 14 days.',\n        defaultMessage: 'Total number of matches found from every scan of a system within the last 14 days.'\n    },\n    lastScan: {\n        id: 'lastScan',\n        description: 'Last scan',\n        defaultMessage: 'Last scan'\n    }\n});\n","import { gql, makeVar } from '@apollo/client';\n\nexport const test = makeVar(false);\n\nconst Signatures = {\n    RuleDetails: gql` fragment RuleDetails on Rule {\n      hasMatch\n      id\n      lastMatchDate\n      name\n      rawRule\n      metadata\n      isDisabled\n      hostCount\n    }`,\n    ExtraRuleDetails: gql` fragment ExtraRuleDetails on Rule {\n      affectedHosts {\n          totalCount\n        }\n}` };\n\nexport const GET_SIGNATURE_PAGE = gql`query QuerySigPage {\n  ruleStats {\n    matchedCount\n    enabledCount\n    disabledCount\n  }\n  hostScans(first: 1, orderBy: CREATED_AT_DESC) {\n    nodes {\n      createdAt\n    }\n    totalCount\n  }\n  hosts {\n    totalCount\n  }\n}`;\n\nexport const GET_SIGNATURE_TABLE = gql`query\nQuerySigPage($offset: Int = 0, $limit: Int = 10, $orderBy: [RulesOrderBy!], $ruleName: String, $condition: RuleCondition = {})  {\n  rulesList(offset: $offset, first: $limit, orderBy: $orderBy, ruleName: $ruleName, condition: $condition)  {\n      ...RuleDetails\n  }\n  rules(offset: $offset, first: $limit, orderBy: $orderBy, ruleName: $ruleName, condition: $condition) {\n    totalCount\n  }\n}${Signatures.RuleDetails}`;\n\nexport const GET_SIGNATURE_DETAILS_PAGE = gql`query QuerySigDetailsPage($ruleName: String)  {\n  rulesList(ruleName: $ruleName)  {\n      ...RuleDetails\n      ...ExtraRuleDetails\n  }\n  hosts {\n    totalCount\n  }\n}${Signatures.RuleDetails}${Signatures.ExtraRuleDetails}`;\n\nexport const GET_MALWARE_COUNT = gql`query QuerySigPage {\n  ruleStats {\n    matchedCount\n  }\n}`;\n\nexport const GET_SIGNATURE_DETAILS_TABLE = gql`query QuerySigPage($offset: Int = 0, $limit: Int = 10, $orderBy: [HostWithMatchesOrderBy!],\n$ruleName: String, $displayName: String)  {\n  rulesList(ruleName: $ruleName)  {\n    affectedHostsList (offset: $offset, first: $limit, orderBy: $orderBy, displayName: $displayName) {\n      displayName\n        lastScanDate\n        matchCount\n        matches {\n          stringOffset\n          stringIdentifier\n          stringData\n          source\n          scanDate\n          ruleScanId\n          ruleId\n          hostId\n          id\n          metadata\n      }\n      }\n      affectedHosts(offset: $offset, first: $limit, orderBy: $orderBy, displayName: $displayName) {\n        totalCount\n      }\n    }\n}`;\n\nexport const GET_SYSTEM_TABLE = gql`query\nQuerySysPage($offset: Int = 0, $limit: Int = 10, $orderBy: [HostsOrderBy!], $name: String)  {\n  hostsList(offset: $offset, first: $limit, orderBy: $orderBy, displayName: $name)  {\n    displayName\n    hasMatch\n    lastScanDate\n    lastMatchDate\n    totalMatches\n    hostScans {\n      totalCount\n    }\n    updated\n    }\n    hosts(offset: $offset, first: $limit, orderBy: $orderBy, displayName: $name){\n    totalCount\n  }\n}`;\n\nexport const GET_SYSTEMS_DETAILS_PAGE = gql`query QuerySysDetailsPage($name: String)  {\n  hosts(condition: {displayName: $name})  {\n    nodes {\n      updated\n      displayName\n      id\n      lastMatchDate\n      totalMatches\n  }\n}\n}`;\n\nexport const GET_SYSTEMS_DETAILS_TABLE_PAGE = gql`query QuerySysDetailsPage(\n  $systemId: UUID!, $offset: Int = 0, $limit: Int = 10, $orderBy: [RuleWithMatchesOrderBy!], $ruleName: String) {\n  host(id: $systemId) {\n    id\n    updated\n    lastMatchDate\n    hasMatch\n    affectedRules(\n      first: $limit\n      offset: $offset\n      orderBy: $orderBy\n      ruleName: $ruleName\n    ) {\n      totalCount\n    }\n    affectedRulesList(\n      first: $limit\n      offset: $offset\n      orderBy: $orderBy\n      ruleName: $ruleName\n    ) {\n      matchCount\n      createdAt\n      matches {\n        stringOffset\n        stringIdentifier\n        stringData\n        source\n        metadata\n        scanDate\n      }\n      name\n      metadata\n      rawRule\n    }\n  }\n}\n\n`;\n","import { InMemoryCache, makeVar } from '@apollo/client';\n// import { offsetLimitPagination } from '@apollo/client/utilities';\n\nexport const hasMalware = makeVar(false);\nexport const sigTableFilters = makeVar({});\nexport const sysTableFilters = makeVar({});\nexport const cache = new InMemoryCache({\n    typePolicies: {\n        Query: {\n            fields: {\n                // rulesList: { ...offsetLimitPagination(),\n                //     read(existing, { variables }) {\n\n                //         need to have the variables stored/updated as cache var, then we can compare exisitng to what we see in the read\n\n                //         console.error(existing, variables);\n                //         if (!existing) {return;} //We have no data at all\n\n                //         if (existing.length < (variables.offset + variables.limit)) {return;} //We don't have enough data\n\n                //         const sliced = existing.slice(variables.offset, variables.offset + variables.limit);\n\n                //         if (sliced.includes(undefined)) {return;} //Some of our data is null\n\n                //         return sliced;\n                //     }\n                // }\n            }\n        }\n    }\n});\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet registry;\n\nexport function init (...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n"],"names":["SigRoutes","lazy","SysRoutes","paths","title","path","component","Routes","Suspense","fallback","Bullseye","Spinner","size","Switch","map","Route","key","rootClass","Redirect","to","push","props","useQuery","GET_MALWARE_COUNT","data","loading","intl","useIntl","pathname","useLocation","useHistory","appNavClick","useMemo","signatures","redirect","insights","chrome","id","systems","hasMalware","Number","ruleStats","matchedCount","useEffect","init","baseComponentUrl","split","unregister","on","event","domEvent","navId","undefined","Banner","variant","className","formatMessage","messages","childProps","defineMessages","malwareDetection","description","defaultMessage","malwareDetectionSignatures","sigName","sig","added","matched","matchedSignatures","enabledSignatures","disabledSignatures","analysisRunAcross","noFound","noAnalysisRun","hostsProtected","activeFound","hostsVulnerable","lastCheck","lastSeen","uuid","never","malwareDetectionSigs","affectedHosts","lastmatch","hostmatch","status","author","enabled","enablement","disabled","noHostHas","signature","filterBy","weDetected","name","noMatches","hostsNotAffected","noResults","noResultsMatch","all","notMatched","sigCompiled","sigCompiledBody","totalMatches","noAffectedHosts","noAffectedHostsBody","resetFilters","lastStatus","totalMatchesNote","lastScan","Signatures","makeVar","RuleDetails","gql","ExtraRuleDetails","GET_SIGNATURE_PAGE","GET_SIGNATURE_TABLE","GET_SIGNATURE_DETAILS_PAGE","GET_SIGNATURE_DETAILS_TABLE","GET_SYSTEM_TABLE","GET_SYSTEMS_DETAILS_PAGE","GET_SYSTEMS_DETAILS_TABLE_PAGE","sigTableFilters","sysTableFilters","cache","InMemoryCache","typePolicies","Query","fields","registry","Error","middleware","ReducerRegistry","promiseMiddleware"],"sourceRoot":""}